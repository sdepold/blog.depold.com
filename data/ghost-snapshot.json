{"db":[{"meta":{"exported_on":1446578562971,"version":"004"},"data":{"app_fields":[],"app_settings":[],"apps":[],"client_trusted_domains":[],"permissions":[{"id":1,"uuid":"04221eee-e4e0-42fd-88c9-213bb005b934","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":2,"uuid":"3a0fe4b8-f2a2-49ad-bd9e-2903a6b8f77d","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":3,"uuid":"80d8db90-dbed-4cbf-b6d5-2a9c1c867ea7","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":4,"uuid":"fde50ab1-cd96-412f-b9c5-e4da41039290","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":5,"uuid":"70d84d36-c287-49b6-aab6-a9a8425eb46e","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":6,"uuid":"1ca3300c-671a-484d-8a75-69013fd4c79f","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":7,"uuid":"2230cee0-249f-4d4f-9f67-ab24143d4fe6","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":8,"uuid":"30a20da5-9236-4b8d-867b-acfdcd8ba5cf","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":9,"uuid":"b4fe308b-33be-4b9a-aad4-cf0a304271f2","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":10,"uuid":"6b71e4f1-8587-4bbb-a9cc-464c7f1ecc2c","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":11,"uuid":"4df74a11-3dc1-4a89-bc62-049d944f256a","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":12,"uuid":"9bdfe2cf-4e83-4003-91ae-f1ae11a13220","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":13,"uuid":"1d869095-c09e-4175-9cbe-f22d59ca2e2d","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":14,"uuid":"1268e337-ac6b-488c-9e3f-598221b619ac","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":15,"uuid":"4cc4f91a-f1af-4317-aa76-091896066051","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":16,"uuid":"969653b8-3b1f-4cc5-9e7a-cd6da498f297","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":17,"uuid":"b3703cc1-6917-4477-8e58-e92cfea5ff3a","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":18,"uuid":"2a9074fb-e119-4854-b4d9-fa0a03d7f61c","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":19,"uuid":"2ed75b63-ae45-432c-b746-8bf05e4935ac","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":20,"uuid":"0556b518-3a75-4871-8346-9fa9e2887d7f","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":21,"uuid":"f7f9bf13-38f1-4c2f-813b-16b9bf78eec2","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":22,"uuid":"2c84ba41-d408-49be-ba9f-dcd4658d36b9","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":23,"uuid":"bdd16955-162a-47be-ac83-51b25fbeaf45","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":24,"uuid":"a16b27aa-9c4f-4aec-8388-a7a8c3cd2d4a","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":25,"uuid":"04762a31-3f6c-4849-b5ca-9a118f29e48e","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":26,"uuid":"05ba3b03-2260-42f1-aaba-fad2518de825","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":27,"uuid":"8b5de4d5-eb59-4f96-8916-33030b85e0aa","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":28,"uuid":"e3f73515-a581-4f23-a48e-ce41fab17f7c","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":29,"uuid":"4974005f-5468-4e09-ac51-cec18c435eb4","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":30,"uuid":"425ce787-1137-4240-8def-74f4632fc7ca","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1}],"permissions_apps":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_users":[],"posts":[{"id":1,"uuid":"905ed83f-5b13-4cbf-9cf8-580eaf91543a","title":"Contentful ruby apps","slug":"contentful-ruby-apps","markdown":"Lately I was playing with the content management service [Contentful](http://contentful.com/) and its ruby gem [contentful.rb](https://github.com/contentful/contentful.rb). In this article you will learn how to kickstart your … contentful … ruby application!\n\n![contentful](/content/images/2014/Aug/127153-88b5dbeb-b37c-44ab-97ed-23e79d3e8518-concept-original-1396987079.jpg)\n\nContentful is a cloud-based and API-driven content management system that allows the user to structure his data via so-called *content models*. Those models are the blueprint for the to-be-stored information. One could think of them as database tables which have specific schemata. Once defined the user can create entries that are instances of the blueprints.\n\nThis article will explain how to create those schemata via Contentful's web GUI. Furthermore it will be described how a user can write and publish entries. Finally you will learn to access those entries easily within a ruby application. The result will be a tiny (read-only) blog system.\n\n## Update\n\nI wrote another post about contentful ruby apps, which introduces some additional helpers and fixes some caveats with the following approach. [You can find it here](/even-more-contentful-ruby-apps/).\n\n## Content models\n\nAs described, content models are the blueprints for your actual data. To keep things simple we will create two basic blog entities, which are connected with each other: A model **blog_post** and a model **tag**. The relationship between is a many-to-many association, meaning that a blog post can have multiple tags and a tag can contain multiple blog posts.\n\n### The content model <span style=\"font-weight: 400\">blog_post</span>\n\nOur upcoming blog post will contain the following fields:\n\n* A mandatory **headline** which is represented as *symbol*. \n* A mandatory **content** which is represented as *text*.\n* A mandatory **publishing date** which is represented as *date/time*.\n* An optional set of **tags** with a data type validation for *tag*. \n\n![The content model blog_post](/content/images/2014/Aug/content-model-blog-post-1.png)\n\nAn example blog post representation would look like this:\n\n```language-javascript\n{\n  \"sys\": {\n    /* meta data */\n  },\n  \"fields\": {\n    \"headline\": \"contentful ruby apps\",\n    \"content\": \"Lately I was playing with the content management service [Contentful](http://contentful.com/) and its ruby gem [contentful.rb](https://github.com/contentful/contentful.rb). In this article you will learn how to kickstart your … contentful … ruby application!\\n\\n\",\n    \"publishedAt\": \"2014-08-19T22:00:00+02:00\",\n    \"tags\": [ { \"sys\": { /* meta data */ } } ]\n  }\n}\n```\n\n### The content model <span style=\"font-weight: 400\">tag</span>\n\nThe tag model will be as simple as possible and just contain:\n\n* a mandatory **name** which is represented as *symbol*.\n\n![The content model tag](/content/images/2014/Aug/content-model-tag-1.png)\n\n\nAn example tag representation would look like this:\n\n```language-javascript\n{\n  \"sys\": {\n\t/* meta data */\n  },\n  \"fields\": {\n    \"name\": \"ruby\"\n  }\n}\n```\n\n### Some words about data types\n\nIn Contentful you will find a whole bunch of data types which are coming with different features and pitfalls. The previously stated ones have the following meanings:\n\n* A **symbol** is a short string that can be used for filtered searches. Symbols can be used to do strict equality checks. Maximum length is 256.\n* A **text** can contain huge textual content in which you might want to fuzzy search. A strict equality check cannot be done. Maximum length is 50,000.\n* A **date/time** comes with a handy calendar widget which allows you to choose a date.\n* A **set of entries** can reference one or many other elements and can furthermore be validated against certain constraints. One of them is a data type.\n\n\n## Talking ruby ...\n\nThe upcoming ruby application will use sinatra and the contentful gem. In order to structure the models and to make additions in contentful an ease, we will define a superclass which handles the whole communication with contentful and provides handy, ActiveRecord-esque helper methods. Furthermore every content model will get its own class representation and inherit from that superclass.\n\n### Getting started\n\nToo keep things short I will just assume some knowledge about ruby and sinatra and post a short gist for the application's scaffold:\n\n```language-bash\nmkdir contentful_blog\ncd contentful_blog\nbundle init\necho 'gem \"activesupport\"' >> Gemfile\necho 'gem \"contentful\"' >> Gemfile\necho 'gem \"i18n\"' >> Gemfile\necho 'gem \"sinatra\"' >> Gemfile\nbundle\nmkdir models\nmkdir views\n```\n\n### Accessing the data\n\n#### ContentModel\nThe most important class of our application is `models/content_model.rb` which act as superclass for the Contentful companions. Besides taking care of the actual API calls (via the contentful.rb gem) it will also provide handy methods to do full-text searches or to find entries by certain fields. Furthermore you will be able to use finder methods that are based on the field names of the content model.\n\nSo here we are:\n\n```language-ruby\nrequire \"contentful\"\n\nclass ContentModel < Contentful::Entry\n  class << self\n    def entry_mapping\n      @entry_mapping ||= superclass.descendants.map do |klass|\n        [klass::CONTENT_TYPE_ID, klass]\n      end.to_h\n    end\n\n    def delivery_client\n      @delivery_client ||= Contentful::Client.new(\n        access_token:    ENV.fetch(\"CONTENTFUL_ACCESS_TOKEN\"),\n        space:           ENV.fetch(\"CONTENTFUL_SPACE_ID\"),\n        dynamic_entries: :auto,\n        entry_mapping:   entry_mapping\n      )\n    end\n\n    def content_type\n      entry_mapping.invert[self]\n    end\n\n    def all(options = {})\n      locale  = options.delete(:locale) || I18n.locale\n      options = options.reverse_merge(\n        \"content_type\" => content_type,\n        \"locale\"       => locale\n      )\n\n      delivery_client.entries options\n    end\n\n    def first(options = {})\n      all(options.merge(\"limit\" => 1)).first\n    end\n\n    def full_text_search(needle)\n      first(\"query\" => needle)\n    end\n\n    def method_missing(method_name, needle, options={})\n      field_name = method_name.to_s.match(/^find_by_(.+)/)\n\n      if field_name\n        field_name = \"fields.#{field_name[1].camelize(:lower)}\"\n        first(options.merge(field_name => needle))\n      else\n        super\n      end\n    end\n  end\nend\n```\n\n#### ContentModel children\n\nAs the `ContentModel` already takes care of the core functionality, each child of that class can focus on their specific domain and might define associations or domain specific helper methods. One thing that needs to be defined for every child class is the constant `CONTENT_MODEL_ID`, though. Here is how an example looks like:\n\n```language-ruby\nclass ExampleContentModel < ContentModel\n  CONTENT_TYPE_ID = \"a-nice-id\"\nend\n```\n\nYou can find the ID of the content models within the web GUI of Contentful. Just open the tab **Content Model** and one of the models afterwards. On the top right you will find a button called **Info** that will open a drawer with meta information about the content type. The **id** is what you are looking for. Just copy and paste it into your model and you are good to go.\n\n![Meta information of the blog post model](/content/images/2014/Aug/content-type-meta-information.png)\n\n#### BlogPost\n\nThe only logic the blog post has to handle is to encode and decode a slug. That feature will be used for generating corresponding url paths. Furthermore we will specify an association to the tags:\n\n```language-ruby\nclass BlogPost < ContentModel\n  CONTENT_TYPE_ID = \"id-of-the-blog-post-model\"\n\n  def self.from_slug(slug)\n    find_by_headline(slug.gsub(\"-\", \" \"))\n  end\n\n  def slug\n    fields[:headline].gsub(\" \", \"-\")\n  end\n\n  def tags\n    fields[:tags]\n  end\nend\n```\n\nPlease notice that the method `from_slug` calls a custom finder method `find_by_headline`.\n\n#### Tag\n\nThe tag itself could in theory have a whole bunch of interesting methods, but to keep things simple it will just inherit from the superclass and define the needed content type id:\n\n```language-ruby\nclass Tag < ContentModel\n  CONTENT_TYPE_ID = \"id-of-the-tag-model\"\nend\n```\n\nOne possible method would be a finder for associated blog posts.\n\n### Please take the stage, mister!\n\nThe sinatra application is pretty simple, though there is one tiny detail which might be good to know and that is the I18n handling. I hooked `active_support/core_ext` into my app and set the `I18n.default_locale` to `en-US` because that is the default locale of a Contentful space:\n\n```language-ruby\nrequire \"active_support/core_ext\"\nrequire \"sinatra\"\n\nset :root, File.dirname(__FILE__)\nset :server, \"webrick\"\n\nconfigure do\n  I18n.default_locale = \"en-US\"\n\n  # load the content_model first and afterwards the other models\n  require File.join(settings.root, \"models\", \"content_model.rb\")\n  Dir[File.join(settings.root, \"models\", \"*.rb\")].each { |file| require file }\nend\n\nget \"/\" do\n  erb :index, locals: { posts: BlogPost.all }\nend\n\nget \"/:id\" do\n  erb :show, locals: { post: BlogPost.from_slug(params[:id]) }\nend\n```\n\n### Uhm, where is the view?\n\nI will skip the details about the view's implementation and instead direct the interested user to the relevant Github pages:\n\n[The post listing page](https://github.com/sdepold/contentful_blog/blob/master/views/index.erb)\n![The post listing page](/content/images/2014/Aug/blog-post-listing-1.png)\n\n[The post detail page](https://github.com/sdepold/contentful_blog/blob/master/views/show.erb)\n![The post detail page](/content/images/2014/Aug/blog-post-details-1.png)\n\n\n## Famous last words\n\nThe complete application [can be found on github](https://github.com/sdepold/contentful_blog). In order to start it, you will need a Contentful account as well as a space with the described content models. Before running the application you need to exchange the content model's ids within `blog_post.rb` and `tag.rb`. Once thats done you can run the application via:\n\n```\nbundle install\nCONTENTFUL_ACCESS_TOKEN=985174a630cf3203f578e747250bd9a9a9b6250e0a0be61367c2e9338b82d983 CONTENTFUL_SPACE_ID=svq072ikci2q bundle exec ruby app.rb\n```\n\nYou should now be able to open [http://localhost:4567](http://localhost:4567) :-)\n\n### Access token? Space ID? \n \nThe space id can be found either in the url of the web GUI (it is the string after `spaces/`) or in the space settings where it states it next to `key`. The access token can futhermore be obtained from the API tab. Just open the tab, click on `API Keys` within the delivery api column and create an API key. Once thats done you should stare at the access token.\n\n## Links\n\n* [Github repository](https://github.com/sdepold/contentful_blog/tree/v1)\n* [Contentful](https://www.contentful.com)\n* [contentful.rb](https://github.com/contentful/contentful.rb)\n* [Follow-up post](/even-more-contentful-ruby-apps/)\n","html":"<p>Lately I was playing with the content management service <a href=\"http://contentful.com/\">Contentful</a> and its ruby gem <a href=\"https://github.com/contentful/contentful.rb\">contentful.rb</a>. In this article you will learn how to kickstart your … contentful … ruby application!</p>\n\n<p><img src=\"/content/images/2014/Aug/127153-88b5dbeb-b37c-44ab-97ed-23e79d3e8518-concept-original-1396987079.jpg\" alt=\"contentful\" /></p>\n\n<p>Contentful is a cloud-based and API-driven content management system that allows the user to structure his data via so-called <em>content models</em>. Those models are the blueprint for the to-be-stored information. One could think of them as database tables which have specific schemata. Once defined the user can create entries that are instances of the blueprints.</p>\n\n<p>This article will explain how to create those schemata via Contentful's web GUI. Furthermore it will be described how a user can write and publish entries. Finally you will learn to access those entries easily within a ruby application. The result will be a tiny (read-only) blog system.</p>\n\n<h2 id=\"update\">Update</h2>\n\n<p>I wrote another post about contentful ruby apps, which introduces some additional helpers and fixes some caveats with the following approach. <a href=\"/even-more-contentful-ruby-apps/\">You can find it here</a>.</p>\n\n<h2 id=\"contentmodels\">Content models</h2>\n\n<p>As described, content models are the blueprints for your actual data. To keep things simple we will create two basic blog entities, which are connected with each other: A model <strong>blog_post</strong> and a model <strong>tag</strong>. The relationship between is a many-to-many association, meaning that a blog post can have multiple tags and a tag can contain multiple blog posts.</p>\n\n<h3 id=\"thecontentmodelspanstylefontweight400blog_postspan\">The content model <span style=\"font-weight: 400\">blog_post</span></h3>\n\n<p>Our upcoming blog post will contain the following fields:</p>\n\n<ul>\n<li>A mandatory <strong>headline</strong> which is represented as <em>symbol</em>. </li>\n<li>A mandatory <strong>content</strong> which is represented as <em>text</em>.</li>\n<li>A mandatory <strong>publishing date</strong> which is represented as <em>date/time</em>.</li>\n<li>An optional set of <strong>tags</strong> with a data type validation for <em>tag</em>. </li>\n</ul>\n\n<p><img src=\"/content/images/2014/Aug/content-model-blog-post-1.png\" alt=\"The content model blog_post\" /></p>\n\n<p>An example blog post representation would look like this:</p>\n\n<pre><code class=\"language-javascript\">{\n  \"sys\": {\n    /* meta data */\n  },\n  \"fields\": {\n    \"headline\": \"contentful ruby apps\",\n    \"content\": \"Lately I was playing with the content management service [Contentful](http://contentful.com/) and its ruby gem [contentful.rb](https://github.com/contentful/contentful.rb). In this article you will learn how to kickstart your … contentful … ruby application!\\n\\n\",\n    \"publishedAt\": \"2014-08-19T22:00:00+02:00\",\n    \"tags\": [ { \"sys\": { /* meta data */ } } ]\n  }\n}\n</code></pre>\n\n<h3 id=\"thecontentmodelspanstylefontweight400tagspan\">The content model <span style=\"font-weight: 400\">tag</span></h3>\n\n<p>The tag model will be as simple as possible and just contain:</p>\n\n<ul>\n<li>a mandatory <strong>name</strong> which is represented as <em>symbol</em>.</li>\n</ul>\n\n<p><img src=\"/content/images/2014/Aug/content-model-tag-1.png\" alt=\"The content model tag\" /></p>\n\n<p>An example tag representation would look like this:</p>\n\n<pre><code class=\"language-javascript\">{\n  \"sys\": {\n    /* meta data */\n  },\n  \"fields\": {\n    \"name\": \"ruby\"\n  }\n}\n</code></pre>\n\n<h3 id=\"somewordsaboutdatatypes\">Some words about data types</h3>\n\n<p>In Contentful you will find a whole bunch of data types which are coming with different features and pitfalls. The previously stated ones have the following meanings:</p>\n\n<ul>\n<li>A <strong>symbol</strong> is a short string that can be used for filtered searches. Symbols can be used to do strict equality checks. Maximum length is 256.</li>\n<li>A <strong>text</strong> can contain huge textual content in which you might want to fuzzy search. A strict equality check cannot be done. Maximum length is 50,000.</li>\n<li>A <strong>date/time</strong> comes with a handy calendar widget which allows you to choose a date.</li>\n<li>A <strong>set of entries</strong> can reference one or many other elements and can furthermore be validated against certain constraints. One of them is a data type.</li>\n</ul>\n\n<h2 id=\"talkingruby\">Talking ruby ...</h2>\n\n<p>The upcoming ruby application will use sinatra and the contentful gem. In order to structure the models and to make additions in contentful an ease, we will define a superclass which handles the whole communication with contentful and provides handy, ActiveRecord-esque helper methods. Furthermore every content model will get its own class representation and inherit from that superclass.</p>\n\n<h3 id=\"gettingstarted\">Getting started</h3>\n\n<p>Too keep things short I will just assume some knowledge about ruby and sinatra and post a short gist for the application's scaffold:</p>\n\n<pre><code class=\"language-bash\">mkdir contentful_blog  \ncd contentful_blog  \nbundle init  \necho 'gem \"activesupport\"' &gt;&gt; Gemfile  \necho 'gem \"contentful\"' &gt;&gt; Gemfile  \necho 'gem \"i18n\"' &gt;&gt; Gemfile  \necho 'gem \"sinatra\"' &gt;&gt; Gemfile  \nbundle  \nmkdir models  \nmkdir views  \n</code></pre>\n\n<h3 id=\"accessingthedata\">Accessing the data</h3>\n\n<h4 id=\"contentmodel\">ContentModel</h4>\n\n<p>The most important class of our application is <code>models/content_model.rb</code> which act as superclass for the Contentful companions. Besides taking care of the actual API calls (via the contentful.rb gem) it will also provide handy methods to do full-text searches or to find entries by certain fields. Furthermore you will be able to use finder methods that are based on the field names of the content model.</p>\n\n<p>So here we are:</p>\n\n<pre><code class=\"language-ruby\">require \"contentful\"\n\nclass ContentModel &lt; Contentful::Entry  \n  class &lt;&lt; self\n    def entry_mapping\n      @entry_mapping ||= superclass.descendants.map do |klass|\n        [klass::CONTENT_TYPE_ID, klass]\n      end.to_h\n    end\n\n    def delivery_client\n      @delivery_client ||= Contentful::Client.new(\n        access_token:    ENV.fetch(\"CONTENTFUL_ACCESS_TOKEN\"),\n        space:           ENV.fetch(\"CONTENTFUL_SPACE_ID\"),\n        dynamic_entries: :auto,\n        entry_mapping:   entry_mapping\n      )\n    end\n\n    def content_type\n      entry_mapping.invert[self]\n    end\n\n    def all(options = {})\n      locale  = options.delete(:locale) || I18n.locale\n      options = options.reverse_merge(\n        \"content_type\" =&gt; content_type,\n        \"locale\"       =&gt; locale\n      )\n\n      delivery_client.entries options\n    end\n\n    def first(options = {})\n      all(options.merge(\"limit\" =&gt; 1)).first\n    end\n\n    def full_text_search(needle)\n      first(\"query\" =&gt; needle)\n    end\n\n    def method_missing(method_name, needle, options={})\n      field_name = method_name.to_s.match(/^find_by_(.+)/)\n\n      if field_name\n        field_name = \"fields.#{field_name[1].camelize(:lower)}\"\n        first(options.merge(field_name =&gt; needle))\n      else\n        super\n      end\n    end\n  end\nend  \n</code></pre>\n\n<h4 id=\"contentmodelchildren\">ContentModel children</h4>\n\n<p>As the <code>ContentModel</code> already takes care of the core functionality, each child of that class can focus on their specific domain and might define associations or domain specific helper methods. One thing that needs to be defined for every child class is the constant <code>CONTENT_MODEL_ID</code>, though. Here is how an example looks like:</p>\n\n<pre><code class=\"language-ruby\">class ExampleContentModel &lt; ContentModel  \n  CONTENT_TYPE_ID = \"a-nice-id\"\nend  \n</code></pre>\n\n<p>You can find the ID of the content models within the web GUI of Contentful. Just open the tab <strong>Content Model</strong> and one of the models afterwards. On the top right you will find a button called <strong>Info</strong> that will open a drawer with meta information about the content type. The <strong>id</strong> is what you are looking for. Just copy and paste it into your model and you are good to go.</p>\n\n<p><img src=\"/content/images/2014/Aug/content-type-meta-information.png\" alt=\"Meta information of the blog post model\" /></p>\n\n<h4 id=\"blogpost\">BlogPost</h4>\n\n<p>The only logic the blog post has to handle is to encode and decode a slug. That feature will be used for generating corresponding url paths. Furthermore we will specify an association to the tags:</p>\n\n<pre><code class=\"language-ruby\">class BlogPost &lt; ContentModel  \n  CONTENT_TYPE_ID = \"id-of-the-blog-post-model\"\n\n  def self.from_slug(slug)\n    find_by_headline(slug.gsub(\"-\", \" \"))\n  end\n\n  def slug\n    fields[:headline].gsub(\" \", \"-\")\n  end\n\n  def tags\n    fields[:tags]\n  end\nend  \n</code></pre>\n\n<p>Please notice that the method <code>from_slug</code> calls a custom finder method <code>find_by_headline</code>.</p>\n\n<h4 id=\"tag\">Tag</h4>\n\n<p>The tag itself could in theory have a whole bunch of interesting methods, but to keep things simple it will just inherit from the superclass and define the needed content type id:</p>\n\n<pre><code class=\"language-ruby\">class Tag &lt; ContentModel  \n  CONTENT_TYPE_ID = \"id-of-the-tag-model\"\nend  \n</code></pre>\n\n<p>One possible method would be a finder for associated blog posts.</p>\n\n<h3 id=\"pleasetakethestagemister\">Please take the stage, mister!</h3>\n\n<p>The sinatra application is pretty simple, though there is one tiny detail which might be good to know and that is the I18n handling. I hooked <code>active_support/core_ext</code> into my app and set the <code>I18n.default_locale</code> to <code>en-US</code> because that is the default locale of a Contentful space:</p>\n\n<pre><code class=\"language-ruby\">require \"active_support/core_ext\"  \nrequire \"sinatra\"\n\nset :root, File.dirname(__FILE__)  \nset :server, \"webrick\"\n\nconfigure do  \n  I18n.default_locale = \"en-US\"\n\n  # load the content_model first and afterwards the other models\n  require File.join(settings.root, \"models\", \"content_model.rb\")\n  Dir[File.join(settings.root, \"models\", \"*.rb\")].each { |file| require file }\nend\n\nget \"/\" do  \n  erb :index, locals: { posts: BlogPost.all }\nend\n\nget \"/:id\" do  \n  erb :show, locals: { post: BlogPost.from_slug(params[:id]) }\nend  \n</code></pre>\n\n<h3 id=\"uhmwhereistheview\">Uhm, where is the view?</h3>\n\n<p>I will skip the details about the view's implementation and instead direct the interested user to the relevant Github pages:</p>\n\n<p><a href=\"https://github.com/sdepold/contentful_blog/blob/master/views/index.erb\">The post listing page</a>\n<img src=\"/content/images/2014/Aug/blog-post-listing-1.png\" alt=\"The post listing page\" /></p>\n\n<p><a href=\"https://github.com/sdepold/contentful_blog/blob/master/views/show.erb\">The post detail page</a>\n<img src=\"/content/images/2014/Aug/blog-post-details-1.png\" alt=\"The post detail page\" /></p>\n\n<h2 id=\"famouslastwords\">Famous last words</h2>\n\n<p>The complete application <a href=\"https://github.com/sdepold/contentful_blog\">can be found on github</a>. In order to start it, you will need a Contentful account as well as a space with the described content models. Before running the application you need to exchange the content model's ids within <code>blog_post.rb</code> and <code>tag.rb</code>. Once thats done you can run the application via:</p>\n\n<pre><code>bundle install  \nCONTENTFUL_ACCESS_TOKEN=985174a630cf3203f578e747250bd9a9a9b6250e0a0be61367c2e9338b82d983 CONTENTFUL_SPACE_ID=svq072ikci2q bundle exec ruby app.rb  \n</code></pre>\n\n<p>You should now be able to open <a href=\"http://localhost:4567\">http://localhost:4567</a> :-)</p>\n\n<h3 id=\"accesstokenspaceid\">Access token? Space ID?</h3>\n\n<p>The space id can be found either in the url of the web GUI (it is the string after <code>spaces/</code>) or in the space settings where it states it next to <code>key</code>. The access token can futhermore be obtained from the API tab. Just open the tab, click on <code>API Keys</code> within the delivery api column and create an API key. Once thats done you should stare at the access token.</p>\n\n<h2 id=\"links\">Links</h2>\n\n<ul>\n<li><a href=\"https://github.com/sdepold/contentful_blog/tree/v1\">Github repository</a></li>\n<li><a href=\"https://www.contentful.com\">Contentful</a></li>\n<li><a href=\"https://github.com/contentful/contentful.rb\">contentful.rb</a></li>\n<li><a href=\"/even-more-contentful-ruby-apps/\">Follow-up post</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-09-24T13:01:36.000Z","updated_by":1,"published_at":"2014-08-19T15:45:03.000Z","published_by":1},{"id":2,"uuid":"d5c7c94d-48b1-45df-9d51-190149700314","title":"eurucamp 2013 - A recap. [Part I]","slug":"eurucamp-2013-a-recap-part-i","markdown":"![image](http://imagine.depold.com/fit/magic/WP_20130816_011.jpg?url=http%3A%2F%2Ff.cl.ly%2Fitems%2F2B0b41321E2x2K0S1R1n%2FWP_20130816_011.jpg&size=640x150)\n\nSome weeks a go some colleagues of mine and me were attending the\neurucamp 2013 at the lovely Mggelsee in Berlin. Besides the nice\nlocation, the European Ruby Camp did not only provide tasty coffee but\nalso a whole bunch of interesting talks and workshops. This article will\nsummarize the most interesting parts.\n\n### Workshop: Up & Running with Ember.js\n\n![image](http://imagine.depold.com/fit/magic/ember.png?url=http%3A%2F%2Ff.cl.ly%2Fitems%2F0n0s2X1Z1U1S291D173v%2Fember.png&size=640x150)\n\nThe first course Ive attended has been the Ember.js workshop. Also this\nhas been the first contact with the eurucamp wifi\n\nTo be polite: It wasnt super optimal ;-) So while listening to the\nspeaker (Balint Erdi) I spent about 2 hours downloading Rails 4 :-/ In\nthe end it turned out, that using my mobile phones hotspot was a better\noption.\n\nAs it was quite hard to actually follow Balints workshop without running\nthe code he was explaining, [I will just reference his notes of the\ntalk](https://gist.github.com/balinterdi/6247828).\n\n### Workshop: Native iOS development using RubyMotion\n\n![image](http://io.depold.com/image/0K0F0p3Q1E2G/rubymotion.png)\n\nThe second workshop was about RubyMotion. First, Marin Usalj provided a\ntemporary RubyMotion executable for every attendee. That way it was a\npleasure to participate in the workshop, without getting into any\nhassles related to downloads. Once everyone installed the package, Marin\ncreate a first simple application:\n\n~~~~ {.prettyprint}\nmotion create test\n    Create test\n    Create test/.gitignore\n    Create test/Rakefile\n    Create test/app\n    Create test/app/app_delegate.rb\n    Create test/resources\n    Create test/resources/Default-568h@2x.png\n    Create test/spec\n    Create test/spec/main_spec.rb\n~~~~\n\nIts now possible to launch that application just by firing this:\n\n~~~~ {.prettyprint}\ncd test\nrake\n~~~~\n\nThis will basically compile the RubyMotion application and open it in\nthe simulator. You should see an iPhone with a black screen now.\n\nWe went on by adding a root controller, which gets loaded in the\napplications main entry point: The file\n`app/app_delegate.rb`{.prettyprint}:\n\n~~~~ {.prettyprint}\n# app/app_delegate.rb\n\nclass AppDelegate\n  def application(application, didFinishLaunchingWithOptions:launchOptions)\n    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)\n    @window.rootViewController = RootViewController.new\n    @window.makeKeyAndVisible\n    true\n  end\nend\n~~~~\n\n~~~~ {.prettyprint}\n# app/controllers/root_controller.rb\n\nclass RootViewController < UIViewController\n  def loadView\n    self.view = UIView.alloc.initWithFrame(UIScreen.mainScreen.bounds)\n    self.view.backgroundColor = UIColor.whiteColor\n    add_buttons\n  end\n\n  def add_buttons\n    # button = UIButton.alloc.initWithFrame([[100, 100], [200, 40]]))\n    button = UIButton.alloc.initWithFrame(CGRectMake(100, 100, 200, 40))\n    button.setBackgroundColor UIColor.grayColor\n    button.setTitle \"press me!\", forState: UIControlStateNormal\n    self.view.addSubview(button)\n  end\nend\n~~~~\n\n[![image](http://imagine.depold.com/fit/magic/rubymotion-app.png?url=http%3A%2F%2Ff.cl.ly%2Fitems%2F431q3n3p0F403C3P3G0a%2Frubymotion-app.png&size=49x93)](http://f.cl.ly/items/431q3n3p0F403C3P3G0a/rubymotion-app.png)\nOnce saved and ran (via `rake`{.prettyprint}), this code spawned the\nmost impressive and most beautiful application of all time Feel free to\ntake a look at the following git repository to [get in touch with more\nadvanced examples](https://github.com/HipByte/RubyMotionSamples) :)\n","html":"<p><img src=\"http://imagine.depold.com/fit/magic/WP_20130816_011.jpg?url=http%3A%2F%2Ff.cl.ly%2Fitems%2F2B0b41321E2x2K0S1R1n%2FWP_20130816_011.jpg&amp;size=640x150\" alt=\"image\" /></p>\n\n<p>Some weeks a go some colleagues of mine and me were attending the <br />\neurucamp 2013 at the lovely Mggelsee in Berlin. Besides the nice <br />\nlocation, the European Ruby Camp did not only provide tasty coffee but <br />\nalso a whole bunch of interesting talks and workshops. This article will <br />\nsummarize the most interesting parts.</p>\n\n<h3 id=\"workshopuprunningwithemberjs\">Workshop: Up &amp; Running with Ember.js</h3>\n\n<p><img src=\"http://imagine.depold.com/fit/magic/ember.png?url=http%3A%2F%2Ff.cl.ly%2Fitems%2F0n0s2X1Z1U1S291D173v%2Fember.png&amp;size=640x150\" alt=\"image\" /></p>\n\n<p>The first course Ive attended has been the Ember.js workshop. Also this <br />\nhas been the first contact with the eurucamp wifi</p>\n\n<p>To be polite: It wasnt super optimal ;-) So while listening to the <br />\nspeaker (Balint Erdi) I spent about 2 hours downloading Rails 4 :-/ In <br />\nthe end it turned out, that using my mobile phones hotspot was a better <br />\noption.</p>\n\n<p>As it was quite hard to actually follow Balints workshop without running <br />\nthe code he was explaining, <a href=\"https://gist.github.com/balinterdi/6247828\">I will just reference his notes of the <br />\ntalk</a>.</p>\n\n<h3 id=\"workshopnativeiosdevelopmentusingrubymotion\">Workshop: Native iOS development using RubyMotion</h3>\n\n<p><img src=\"http://io.depold.com/image/0K0F0p3Q1E2G/rubymotion.png\" alt=\"image\" /></p>\n\n<p>The second workshop was about RubyMotion. First, Marin Usalj provided a <br />\ntemporary RubyMotion executable for every attendee. That way it was a <br />\npleasure to participate in the workshop, without getting into any <br />\nhassles related to downloads. Once everyone installed the package, Marin <br />\ncreate a first simple application:</p>\n\n<p>~~<del> {.prettyprint}\nmotion create test <br />\n    Create test\n    Create test/.gitignore\n    Create test/Rakefile\n    Create test/app\n    Create test/app/app<em>delegate.rb\n    Create test/resources\n    Create test/resources/Default-568h@2x.png\n    Create test/spec\n    Create test/spec/main</em>spec.rb\n</del><del></p>\n\n<p>Its now possible to launch that application just by firing this:</p>\n\n<p></del><del> {.prettyprint} <br />\ncd test <br />\nrake <br />\n</del><del></p>\n\n<p>This will basically compile the RubyMotion application and open it in <br />\nthe simulator. You should see an iPhone with a black screen now.</p>\n\n<p>We went on by adding a root controller, which gets loaded in the <br />\napplications main entry point: The file <br />\n<code>app/app_delegate.rb</code>{.prettyprint}:</p>\n\n<p></del><del> {.prettyprint}  </p>\n\n<h1 id=\"appapp_delegaterb\">app/app_delegate.rb</h1>\n\n<p>class AppDelegate <br />\n  def application(application, didFinishLaunchingWithOptions:launchOptions)\n    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)\n    @window.rootViewController = RootViewController.new\n    @window.makeKeyAndVisible\n    true\n  end\nend <br />\n</del><del></p>\n\n<p></del><del> {.prettyprint}  </p>\n\n<h1 id=\"appcontrollersroot_controllerrb\">app/controllers/root_controller.rb</h1>\n\n<p>class RootViewController &lt; UIViewController <br />\n  def loadView\n    self.view = UIView.alloc.initWithFrame(UIScreen.mainScreen.bounds)\n    self.view.backgroundColor = UIColor.whiteColor\n    add_buttons\n  end</p>\n\n<p>def add_buttons\n    # button = UIButton.alloc.initWithFrame([[100, 100], [200, 40]]))\n    button = UIButton.alloc.initWithFrame(CGRectMake(100, 100, 200, 40))\n    button.setBackgroundColor UIColor.grayColor\n    button.setTitle \"press me!\", forState: UIControlStateNormal\n    self.view.addSubview(button)\n  end\nend <br />\n</del>~~</p>\n\n<p><a href=\"http://f.cl.ly/items/431q3n3p0F403C3P3G0a/rubymotion-app.png\"><img src=\"http://imagine.depold.com/fit/magic/rubymotion-app.png?url=http%3A%2F%2Ff.cl.ly%2Fitems%2F431q3n3p0F403C3P3G0a%2Frubymotion-app.png&amp;size=49x93\" alt=\"image\" title=\"\" /></a>\nOnce saved and ran (via <code>rake</code>{.prettyprint}), this code spawned the <br />\nmost impressive and most beautiful application of all time Feel free to <br />\ntake a look at the following git repository to <a href=\"https://github.com/HipByte/RubyMotionSamples\">get in touch with more <br />\nadvanced examples</a> :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2013-09-16T19:42:00.000Z","created_by":1,"updated_at":"2013-09-16T19:42:00.000Z","updated_by":1,"published_at":"2013-09-16T19:42:00.000Z","published_by":1},{"id":3,"uuid":"bd471015-3b1e-4d28-adf0-0e4a6ac4e2fe","title":"Wii U: Some impressions","slug":"wii-u-some-impressions","markdown":"![](http://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Wii_U_controller_illustration.svg/500px-Wii_U_controller_illustration.svg.png)\n\n<center>\n[Tokyoship](//commons.wikimedia.org/wiki/User:Tokyoship \"User:Tokyoship\"),\n[Wikimedia\nCommons](//commons.wikimedia.org/wiki/File:Wii_U_controller_illustration.svg)\n</center>\nWhen I left the office on last friday evening, I was looking forward to\nunpacking the just arrived Wii U. On my way home it already bugged me,\nthatI didn’t manage to order an external hard drive for the tons of\ngames I’m going to download soon via the built-in eShop. So I arrived at\nhome and setup the cables for the Wii U. I nicely connected everything\nwith each other, started the console and waited the next hour for an\nupdate of the next-generation Wii. Not super cool, but hey it was an\nupdate. Updates are good. So I waited for the progress bar to fill up.\n\nWhile waiting for the progress bar to fill up, I was wondering if the\nalso ordered game will arrive the same day or if I will end up playing\nonly the demos of the store for the rest of the weekend. As we found out\nlater, the game arrive the next day (saturday) when we weren’t available\nand that we can pick it up the next working day from the post office.\n\nHowever, the update finally came to an end and we launched the eShop,\nexcited about the soon to play demos. After figuring out how that shop\nis working, we found out, that there was exactly one demo available:\nFIFA 13. WTF? FIFA? On a console which is famous for it’s Marios, it’s\nLuigis, it’s Kirbies, it’s ton of funny multiplayer games, they decided\nto start the new generation of Nintendo TV consoles with FIFA\nInteresting As that was actually the only game we were able to play for\nthe rest of the weekend (without paying additional bucks), I hit the\ndownload button and waited another hour for the download and another 10\nminutes for the game’s installation (yes download and installation is\nseparated, because uhm .. you know just because ).\n\n![](http://cl.ly/image/360C2b1M0N3x/IMG_0017.JPG)\n![](http://cl.ly/image/1u2t3a0T2p0o/IMG_0019.JPG)\n\nAs I’m quite OK with FIFA, I played some matches and powered off the\nconsole afterwards. This morning I also noticed that the already limited\ndemo of FIFA is also only runnable for further 9 times. Isn’t that super\nstupid ? Why would you limit a demo in the times you can execute it ?\n\n![](http://cl.ly/image/3A3v090L1y3k/IMG_0018.JPG)\n\nImho it’s quite lame for Nintendo to deliver such a crappy experience\nfor a just-released console.\n\nHowever, there is also one nice thing about the console: It has a\nLoveFilm (a netflix-esque service in Germany) app. This is quite cool as\nuntil that point Lovefilm was only available for Sony devices. The bad\nthing about the application is the fact, that you cannot use it -.-”\nStarting it, it mentions, that another update is necessary in order to\nuse it. Sadly there is no other update at the moment.\n\nSo far about the first experiences with the new Wii U.\n","html":"<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Wii_U_controller_illustration.svg/500px-Wii_U_controller_illustration.svg.png\" alt=\"\" /></p>\n\n<p><center> <br />\n<a href=\"//commons.wikimedia.org/wiki/User:Tokyoship\" title=\"User:Tokyoship\">Tokyoship</a>,\n<a href=\"//commons.wikimedia.org/wiki/File:Wii_U_controller_illustration.svg\">Wikimedia\nCommons</a> <br />\n</center> <br />\nWhen I left the office on last friday evening, I was looking forward to <br />\nunpacking the just arrived Wii U. On my way home it already bugged me, <br />\nthatI didn’t manage to order an external hard drive for the tons of <br />\ngames I’m going to download soon via the built-in eShop. So I arrived at <br />\nhome and setup the cables for the Wii U. I nicely connected everything <br />\nwith each other, started the console and waited the next hour for an <br />\nupdate of the next-generation Wii. Not super cool, but hey it was an <br />\nupdate. Updates are good. So I waited for the progress bar to fill up.</p>\n\n<p>While waiting for the progress bar to fill up, I was wondering if the <br />\nalso ordered game will arrive the same day or if I will end up playing <br />\nonly the demos of the store for the rest of the weekend. As we found out <br />\nlater, the game arrive the next day (saturday) when we weren’t available <br />\nand that we can pick it up the next working day from the post office.</p>\n\n<p>However, the update finally came to an end and we launched the eShop, <br />\nexcited about the soon to play demos. After figuring out how that shop <br />\nis working, we found out, that there was exactly one demo available: <br />\nFIFA 13. WTF? FIFA? On a console which is famous for it’s Marios, it’s <br />\nLuigis, it’s Kirbies, it’s ton of funny multiplayer games, they decided <br />\nto start the new generation of Nintendo TV consoles with FIFA <br />\nInteresting As that was actually the only game we were able to play for <br />\nthe rest of the weekend (without paying additional bucks), I hit the <br />\ndownload button and waited another hour for the download and another 10 <br />\nminutes for the game’s installation (yes download and installation is <br />\nseparated, because uhm .. you know just because ).</p>\n\n<p><img src=\"http://cl.ly/image/360C2b1M0N3x/IMG_0017.JPG\" alt=\"\" />\n<img src=\"http://cl.ly/image/1u2t3a0T2p0o/IMG_0019.JPG\" alt=\"\" /></p>\n\n<p>As I’m quite OK with FIFA, I played some matches and powered off the <br />\nconsole afterwards. This morning I also noticed that the already limited <br />\ndemo of FIFA is also only runnable for further 9 times. Isn’t that super <br />\nstupid ? Why would you limit a demo in the times you can execute it ?</p>\n\n<p><img src=\"http://cl.ly/image/3A3v090L1y3k/IMG_0018.JPG\" alt=\"\" /></p>\n\n<p>Imho it’s quite lame for Nintendo to deliver such a crappy experience <br />\nfor a just-released console.</p>\n\n<p>However, there is also one nice thing about the console: It has a <br />\nLoveFilm (a netflix-esque service in Germany) app. This is quite cool as <br />\nuntil that point Lovefilm was only available for Sony devices. The bad <br />\nthing about the application is the fact, that you cannot use it -.-” <br />\nStarting it, it mentions, that another update is necessary in order to <br />\nuse it. Sadly there is no other update at the moment.</p>\n\n<p>So far about the first experiences with the new Wii U.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2012-12-02T12:48:00.000Z","created_by":1,"updated_at":"2014-09-24T05:35:46.000Z","updated_by":1,"published_at":"2012-12-02T12:48:00.000Z","published_by":1},{"id":4,"uuid":"c6c34346-c253-468f-b12c-4aaa98238ffc","title":"Cubi - details about my entry","slug":"cubi-details-about-my-entry","markdown":"It’s been a long time since my last post… However, I haven’t been lazy,\nbut worked on multiple things over the last few month. The funniest\nproject in the last weeks/months was my entry for\n[js13kgames](http://js13kgames.com/) called\n[Cubi](http://sdepold.github.com/cubi/index.html). In this post I want\nto present the game and some nice tweaks I added for achieving the right\nfile size.\n\n### js13kgames\n\n\"Js13kGames is a JavaScript coding competition for HTML5 game\ndevelopers. The fun part of the compo is the file size limit set to 13\nkilobytes\". Also the main theme of the entries is the number 13. The\nrules of the competition are pointing out, that everything that fits\ninto 13kb can be used, including frameworks and so on. The only thing\nthat developers are getting for free is the lib\n[prefixfree](http://leaverou.github.com/prefixfree/).\n\n### Cubi\n\nThe game itself is a tower defense game in exactly 11938 bytes. At the\ntime of submitting it to the contest, it had 13 different types of\nmonsters, 3 kind of towers and only one set of surface graphics. The\nmajor goal of that game is to kill all the monsters approaching you via\nchoosing the right amount of towers.\n\nYou can [play the game\nhere](http://sdepold.github.com/cubi/index.html)and [see the code\nhere](https://github.com/sdepold/cubi).\n\n![](https://fbcdn-sphotos-d-a.akamaihd.net/hphotos-ak-ash3/581496_468837273148811_1231438001_n.jpg)\n\n### Scripts/Tools\n\nOne of the first things I wrote for that project was a script that\ncreates me a bundled package. I chose to put my scripts into a subfolder\nand to alias them in a\n[package.json](https://github.com/sdepold/cubi/blob/gh-pages/package.json#L5-11),\nso that they can be executed via *npm run smth*. So, after writing the\nscript that creates a bundled version of my game, I wrote another one\nthat utilized the build script and which zipped the resulting folder.\nUsing the size of that zip file it printed the remaining free bytes.\nPretty handy :)\n\n### Optimizations\n\nIn that build script I added over time a handful of optimizations. The\nfirst step was to [uglify](https://github.com/mishoo/UglifyJS) each file\nand to concatinate them afterwards. This already saved some bytes, but\nturned out to be quite unefficient. As a colleague of mine told me (and\nwhat is quite obvious if you think about it :D), it makes more sense to\nconcatinate the files first and compress them afterwards. Doing so saved\na whole bunch of kilobytes!\n\nThe very next steps was the compression of css, which was done via the\n[YUICompressor](https://github.com/tim-smart/node-yui-compressor). As\nthe game has only \\~280 lines of css code this wasn’t super efficient\nbut still resulted in some improvements.\n\nAfter those two things I went on with coding the logic of the game.\nAfter some time I was quite close to an acceptable extent and decided to\nadd some more towers and monsters to the game. The disappointing thing\nwas that I already slightly crossed the allowed file size. So I decided\nto stop and submit the game. While I was improving my build script I got\nthe idea to do some minor changes in the build script. In the first\nplace I moved all assets directly into the folder where the index.html\nwas lying. This saved some bytes due to the removal of the subfolders.\nThe second and due to the first change mandatory thing was to change the\npaths in the index.html file which saved some chars (the subfolder’s\nnames). While modifying the file I got the idea of modifying the CSS as\nwell.\n\nSo I started to look into the CSS and tried to replace the images in\nthere with the base64 encoded equivalents. After some struggle this\nturned out to be super efficient and saved almost 4KB of data. Doing\nthat with node.js was pretty easy. You basically just read the file, put\nit into a buffer and let it transform the data into a base64 string. You\nmight want to [check the relevant\nlines](https://github.com/sdepold/cubi/blob/gh-pages/utils/build.js#L69-89).\nSimple :)\n\n### prefixfree\n\nAfter optimizing the game for Chrome I tested some other browsers and\nnoticed, that the bullet animation isn’t available. The reason for that\nwas the missing cross browser compatibility of the transition attribute.\nAs the competition gave us the prefixfree library for free, I just\nrequired that specific js file in my index.html and my problem was\nsolved. Furthermore I was afterwards able to remove some webkit specific\ncss!\n\n### gh-pages\n\nOne of the best choices for the project, was to switch from the master\nbranch to gh-pages branch and to set it as default. Doing so, I got a\nwebserver via github for free and was able to send around the link to\nthe game!\n","html":"<p>It’s been a long time since my last post… However, I haven’t been lazy, <br />\nbut worked on multiple things over the last few month. The funniest <br />\nproject in the last weeks/months was my entry for <br />\n<a href=\"http://js13kgames.com/\">js13kgames</a> called\n<a href=\"http://sdepold.github.com/cubi/index.html\">Cubi</a>. In this post I want\nto present the game and some nice tweaks I added for achieving the right <br />\nfile size.</p>\n\n<h3 id=\"js13kgames\">js13kgames</h3>\n\n<p>\"Js13kGames is a JavaScript coding competition for HTML5 game <br />\ndevelopers. The fun part of the compo is the file size limit set to 13 <br />\nkilobytes\". Also the main theme of the entries is the number 13. The <br />\nrules of the competition are pointing out, that everything that fits <br />\ninto 13kb can be used, including frameworks and so on. The only thing <br />\nthat developers are getting for free is the lib <br />\n<a href=\"http://leaverou.github.com/prefixfree/\">prefixfree</a>.</p>\n\n<h3 id=\"cubi\">Cubi</h3>\n\n<p>The game itself is a tower defense game in exactly 11938 bytes. At the <br />\ntime of submitting it to the contest, it had 13 different types of <br />\nmonsters, 3 kind of towers and only one set of surface graphics. The <br />\nmajor goal of that game is to kill all the monsters approaching you via <br />\nchoosing the right amount of towers.</p>\n\n<p>You can <a href=\"http://sdepold.github.com/cubi/index.html\">play the game <br />\nhere</a>and <a href=\"https://github.com/sdepold/cubi\">see the code <br />\nhere</a>.</p>\n\n<p><img src=\"https://fbcdn-sphotos-d-a.akamaihd.net/hphotos-ak-ash3/581496_468837273148811_1231438001_n.jpg\" alt=\"\" /></p>\n\n<h3 id=\"scriptstools\">Scripts/Tools</h3>\n\n<p>One of the first things I wrote for that project was a script that <br />\ncreates me a bundled package. I chose to put my scripts into a subfolder <br />\nand to alias them in a <br />\n<a href=\"https://github.com/sdepold/cubi/blob/gh-pages/package.json#L5-11\">package.json</a>,\nso that they can be executed via <em>npm run smth</em>. So, after writing the <br />\nscript that creates a bundled version of my game, I wrote another one <br />\nthat utilized the build script and which zipped the resulting folder. <br />\nUsing the size of that zip file it printed the remaining free bytes. <br />\nPretty handy :)</p>\n\n<h3 id=\"optimizations\">Optimizations</h3>\n\n<p>In that build script I added over time a handful of optimizations. The <br />\nfirst step was to <a href=\"https://github.com/mishoo/UglifyJS\">uglify</a> each file <br />\nand to concatinate them afterwards. This already saved some bytes, but <br />\nturned out to be quite unefficient. As a colleague of mine told me (and <br />\nwhat is quite obvious if you think about it :D), it makes more sense to <br />\nconcatinate the files first and compress them afterwards. Doing so saved <br />\na whole bunch of kilobytes!</p>\n\n<p>The very next steps was the compression of css, which was done via the <br />\n<a href=\"https://github.com/tim-smart/node-yui-compressor\">YUICompressor</a>. As\nthe game has only \\~280 lines of css code this wasn’t super efficient <br />\nbut still resulted in some improvements.</p>\n\n<p>After those two things I went on with coding the logic of the game. <br />\nAfter some time I was quite close to an acceptable extent and decided to <br />\nadd some more towers and monsters to the game. The disappointing thing <br />\nwas that I already slightly crossed the allowed file size. So I decided <br />\nto stop and submit the game. While I was improving my build script I got <br />\nthe idea to do some minor changes in the build script. In the first <br />\nplace I moved all assets directly into the folder where the index.html <br />\nwas lying. This saved some bytes due to the removal of the subfolders. <br />\nThe second and due to the first change mandatory thing was to change the <br />\npaths in the index.html file which saved some chars (the subfolder’s <br />\nnames). While modifying the file I got the idea of modifying the CSS as <br />\nwell.</p>\n\n<p>So I started to look into the CSS and tried to replace the images in <br />\nthere with the base64 encoded equivalents. After some struggle this <br />\nturned out to be super efficient and saved almost 4KB of data. Doing <br />\nthat with node.js was pretty easy. You basically just read the file, put <br />\nit into a buffer and let it transform the data into a base64 string. You <br />\nmight want to <a href=\"https://github.com/sdepold/cubi/blob/gh-pages/utils/build.js#L69-89\">check the relevant <br />\nlines</a>. <br />\nSimple :)</p>\n\n<h3 id=\"prefixfree\">prefixfree</h3>\n\n<p>After optimizing the game for Chrome I tested some other browsers and <br />\nnoticed, that the bullet animation isn’t available. The reason for that <br />\nwas the missing cross browser compatibility of the transition attribute. <br />\nAs the competition gave us the prefixfree library for free, I just <br />\nrequired that specific js file in my index.html and my problem was <br />\nsolved. Furthermore I was afterwards able to remove some webkit specific <br />\ncss!</p>\n\n<h3 id=\"ghpages\">gh-pages</h3>\n\n<p>One of the best choices for the project, was to switch from the master <br />\nbranch to gh-pages branch and to set it as default. Doing so, I got a <br />\nwebserver via github for free and was able to send around the link to <br />\nthe game!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2012-09-16T19:16:00.000Z","created_by":1,"updated_at":"2012-09-16T19:16:00.000Z","updated_by":1,"published_at":"2012-09-16T19:16:00.000Z","published_by":1},{"id":5,"uuid":"01c7c6c9-5387-4602-b8ca-fd18f934d92e","title":"Cubi - My entry for js13kgames","slug":"cubi-my-entry-for-js13kgames","markdown":"Today I submitted my entry for the coding competition\n[js13kgames](http://js13kgames.com/)! Would be pretty cool to win that\nImpact game engine :) Cubi is a classic tower defense game, which comes\nwith 13 types of monsters and 3 types of towers. [You can give it a try\nhere](http://js13kgames.com/entries/cubi/):) I will write a summary\nabout some tweaks I added later.\n\n![](http://sdepold.github.com/cubi/graphics/screenshot-400x250.png)\n","html":"<p>Today I submitted my entry for the coding competition <br />\n<a href=\"http://js13kgames.com/\">js13kgames</a>! Would be pretty cool to win that\nImpact game engine :) Cubi is a classic tower defense game, which comes <br />\nwith 13 types of monsters and 3 types of towers. <a href=\"http://js13kgames.com/entries/cubi/\">You can give it a try <br />\nhere</a>:) I will write a summary <br />\nabout some tweaks I added later.</p>\n\n<p><img src=\"http://sdepold.github.com/cubi/graphics/screenshot-400x250.png\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2012-09-05T19:13:21.000Z","created_by":1,"updated_at":"2012-09-05T19:13:21.000Z","updated_by":1,"published_at":"2012-09-05T19:13:21.000Z","published_by":1},{"id":6,"uuid":"074c4bba-8e38-43dc-a87f-7fd18753e8a4","title":"Kitty Face Detection","slug":"kitty-face-detection","markdown":"**[Kitty Face Detection](http://harthur.github.com/kittydar/)**\n\nEver wanted to find cats in pictures? No? Fair enough ;D However, …, you\nmight want to give this a try.\n","html":"<p><strong><a href=\"http://harthur.github.com/kittydar/\">Kitty Face Detection</a></strong></p>\n\n<p>Ever wanted to find cats in pictures? No? Fair enough ;D However, …, you <br />\nmight want to give this a try.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2012-06-16T18:45:34.000Z","created_by":1,"updated_at":"2012-06-16T18:45:34.000Z","updated_by":1,"published_at":"2012-06-16T18:45:34.000Z","published_by":1},{"id":7,"uuid":"68fd5c84-106e-4a4a-a9f9-98bb4cc734c3","title":"Hi, in Sequelize JS is it possible to refer to a model twice from another model? For example, if in Project I would like one User reference for the...","slug":"hi-in-sequelize-js-is-it-possible-to-refer-to-a-model","markdown":"Hi!\n\nYes this is possible. You have to add the ‘as’-option to your\ndefinition. [Take a look at this part of the\ndocumentation.](http://sequelizejs.com/?active=has-one#has-one)\n\nHope that helps\n","html":"<p>Hi!</p>\n\n<p>Yes this is possible. You have to add the ‘as’-option to your <br />\ndefinition. <a href=\"http://sequelizejs.com/?active=has-one#has-one\">Take a look at this part of the <br />\ndocumentation.</a></p>\n\n<p>Hope that helps</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2012-01-15T10:13:00.000Z","created_by":1,"updated_at":"2012-01-15T10:13:00.000Z","updated_by":1,"published_at":"2012-01-15T10:13:00.000Z","published_by":1},{"id":8,"uuid":"0027f57e-14a8-4696-9a79-1cefb5ade247","title":"Hi, I'm using the Dawanda jQuery RSS code to aggregate an RSS feed to a news website I'm building, and it runs great so long as I only run a single...","slug":"hi-im-using-the-dawanda-jquery-rss-code-to-aggregate","markdown":"Hmm that should actually work … Mhh can you please open an issue on\ngithub and add a link to page where this problem can be replayed? Thanks\na lot :)\n","html":"<p>Hmm that should actually work … Mhh can you please open an issue on <br />\ngithub and add a link to page where this problem can be replayed? Thanks <br />\na lot :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2012-01-13T07:48:32.000Z","created_by":1,"updated_at":"2012-01-13T07:48:32.000Z","updated_by":1,"published_at":"2012-01-13T07:48:32.000Z","published_by":1},{"id":9,"uuid":"246a59bf-fff4-42fe-97e0-df1f658ccc97","title":"Changes in Sequelize 1.3.0","slug":"changes-in-sequelize-1-3-0","markdown":"Sequelize v1.3.0 was just released and comes with some funky new\nfeatures and some minor refactorings, which you should know about. Most\nimportant things are: Migrations, validations, cross-database support\nand new event-listener notation.\n\n### Model\\#all is now a function and not a getter\n\nIn earlier versions it was possible to get all entries of a model with\nthe following command:\n\n> User.all.success(function(users){})\n\nThis has changed and the *all*-getter was refactored to be a function.\nThis way it is more consistent to the rest of the API (.find(),\n.findAll(), etc.). So it’s now:\n\n> User.all().success(function(users){})\n\n### Use the new util module for node 0.6.x compatibility\n\nAll references to the *sys*-module have been removed and replaced with\nthe *util*-module. To be honest, I have no idea when that module has\nbeen available, but it actually is in 0.4.12 and above. So sequelize is\ncompatible to all versions of node having the *util*-module.\n\n### QueryChainer can now run serially\n\nThe QueryChainer has been extended in order to run migrations serially.\nThe basic idea is to pass an object, the to be called function’s name\nand some parameters. After adding some items you can run them with\nchainer.runSerially(). You can find detailed information about this [in\nthe documentation](http://sequelizejs.com/?active=serially#serially).\n\n### Association definitions are now chainable\n\nEach association declaration now returns the ModelFactory. So it is\npossible to chain such declarations. Here is an example:\n\n> Person.hasOne(House).hasMany(Address)\n\n### Validations\n\n[hiddentao](https://github.com/hiddentao) has added validations to\nsequelize. This is pretty awesome and comes with a handy preset of known\nvalidations, but can be extended with custom validations as well. You\ncan find detailed information about this [in the\ndocumentation](http://sequelizejs.com/?active=validations#validations).\n\n### jQuery-like event listeners\n\nBecause the *.on(‘foo’, function(){})*-syntax really drove me nuts, I’ve\nadded some shorter notations. Inspired by jQuery (I know it has already\nchanged in v1.7) you can now do the following:\n\n> Model.findAll().success(function(models) { /\\* foo \\*/ })\n> Model.findAll().error(function(err) { /\\* bar \\*/ })\n\n[There are also some aliases, which can be found\nhere.](http://sequelizejs.com/?active=asynchronicity#asynchronicity)\n\n**Please notice:** I will replace .on(‘failure’) with .on(‘error’) in\nfuture releases. This will be done, due to being more native in the node\nenvironment. Doing so will throw an error each time you don’t listen for\nthe ‘error’-event, what is actually pretty good!\n\n### aliasing for select queries\n\nYou can now rename attributes of a model for only a specific query. The\nfollowing example gets a specific user and renames the original\n*name*-attribute to *username*. On database side this is a simple\n*SELECT name as username FROM table;*.\n\n> Model .find({ where: ‘id = 1’, attributes: [‘id’, [‘name’,\n> ‘username’]] }) .success(function(user) { console.log(user.name) //\n> undefined console.log(user.username) // something })\n\n### cross-database support\n\nSequelize has been refactored to be open for other SQL dialects. Doing\nso I’ve added examplary sqlite support. If you want to use it, make sure\nto install the sqlite3 package manually. [You can find more information\nabout that here.](http://sequelizejs.com/?active=dialects#dialects)\n\n### migrations\n\nAnother new awesome feature is migration support. With this mechanism it\nis now possible to modify the database manually. This should of course\n**not** be mixed with the *sync*-function of sequelize. In order to\nexecute migrations there is a new sequelize binary which you should look\nat. just run *node\\_modules/.bin/sequelize -h* to see what’s possible\nand make sure [to visit the\ndocumentation.](http://localhost:3000/?active=migrations#migrations)\n\n### ex-expresso-ed the project :D\n\nI moved all tests to jasmine and removed all expresso-related things.\\\n\\\n\\\n I hope you will like it!\n","html":"<p>Sequelize v1.3.0 was just released and comes with some funky new <br />\nfeatures and some minor refactorings, which you should know about. Most <br />\nimportant things are: Migrations, validations, cross-database support <br />\nand new event-listener notation.</p>\n\n<h3 id=\"modelallisnowafunctionandnotagetter\">Model#all is now a function and not a getter</h3>\n\n<p>In earlier versions it was possible to get all entries of a model with <br />\nthe following command:</p>\n\n<blockquote>\n  <p>User.all.success(function(users){})</p>\n</blockquote>\n\n<p>This has changed and the <em>all</em>-getter was refactored to be a function. <br />\nThis way it is more consistent to the rest of the API (.find(), <br />\n.findAll(), etc.). So it’s now:</p>\n\n<blockquote>\n  <p>User.all().success(function(users){})</p>\n</blockquote>\n\n<h3 id=\"usethenewutilmodulefornode06xcompatibility\">Use the new util module for node 0.6.x compatibility</h3>\n\n<p>All references to the <em>sys</em>-module have been removed and replaced with <br />\nthe <em>util</em>-module. To be honest, I have no idea when that module has <br />\nbeen available, but it actually is in 0.4.12 and above. So sequelize is <br />\ncompatible to all versions of node having the <em>util</em>-module.</p>\n\n<h3 id=\"querychainercannowrunserially\">QueryChainer can now run serially</h3>\n\n<p>The QueryChainer has been extended in order to run migrations serially. <br />\nThe basic idea is to pass an object, the to be called function’s name <br />\nand some parameters. After adding some items you can run them with <br />\nchainer.runSerially(). You can find detailed information about this <a href=\"http://sequelizejs.com/?active=serially#serially\">in <br />\nthe documentation</a>.</p>\n\n<h3 id=\"associationdefinitionsarenowchainable\">Association definitions are now chainable</h3>\n\n<p>Each association declaration now returns the ModelFactory. So it is <br />\npossible to chain such declarations. Here is an example:</p>\n\n<blockquote>\n  <p>Person.hasOne(House).hasMany(Address)</p>\n</blockquote>\n\n<h3 id=\"validations\">Validations</h3>\n\n<p><a href=\"https://github.com/hiddentao\">hiddentao</a> has added validations to\nsequelize. This is pretty awesome and comes with a handy preset of known <br />\nvalidations, but can be extended with custom validations as well. You <br />\ncan find detailed information about this <a href=\"http://sequelizejs.com/?active=validations#validations\">in the <br />\ndocumentation</a>.</p>\n\n<h3 id=\"jquerylikeeventlisteners\">jQuery-like event listeners</h3>\n\n<p>Because the <em>.on(‘foo’, function(){})</em>-syntax really drove me nuts, I’ve <br />\nadded some shorter notations. Inspired by jQuery (I know it has already <br />\nchanged in v1.7) you can now do the following:</p>\n\n<blockquote>\n  <p>Model.findAll().success(function(models) { /* foo */ })\n  Model.findAll().error(function(err) { /* bar */ })</p>\n</blockquote>\n\n<p><a href=\"http://sequelizejs.com/?active=asynchronicity#asynchronicity\">There are also some aliases, which can be found\nhere.</a></p>\n\n<p><strong>Please notice:</strong> I will replace .on(‘failure’) with .on(‘error’) in\nfuture releases. This will be done, due to being more native in the node <br />\nenvironment. Doing so will throw an error each time you don’t listen for <br />\nthe ‘error’-event, what is actually pretty good!</p>\n\n<h3 id=\"aliasingforselectqueries\">aliasing for select queries</h3>\n\n<p>You can now rename attributes of a model for only a specific query. The <br />\nfollowing example gets a specific user and renames the original <br />\n<em>name</em>-attribute to <em>username</em>. On database side this is a simple\n<em>SELECT name as username FROM table;</em>.</p>\n\n<blockquote>\n  <p>Model .find({ where: ‘id = 1’, attributes: [‘id’, [‘name’,\n  ‘username’]] }) .success(function(user) { console.log(user.name) //\n  undefined console.log(user.username) // something })</p>\n</blockquote>\n\n<h3 id=\"crossdatabasesupport\">cross-database support</h3>\n\n<p>Sequelize has been refactored to be open for other SQL dialects. Doing <br />\nso I’ve added examplary sqlite support. If you want to use it, make sure <br />\nto install the sqlite3 package manually. <a href=\"http://sequelizejs.com/?active=dialects#dialects\">You can find more information <br />\nabout that here.</a></p>\n\n<h3 id=\"migrations\">migrations</h3>\n\n<p>Another new awesome feature is migration support. With this mechanism it <br />\nis now possible to modify the database manually. This should of course <br />\n<strong>not</strong> be mixed with the <em>sync</em>-function of sequelize. In order to\nexecute migrations there is a new sequelize binary which you should look <br />\nat. just run <em>node_modules/.bin/sequelize -h</em> to see what’s possible <br />\nand make sure <a href=\"http://localhost:3000/?active=migrations#migrations\">to visit the <br />\ndocumentation.</a></p>\n\n<h3 id=\"exexpressoedtheprojectd\">ex-expresso-ed the project :D</h3>\n\n<p>I moved all tests to jasmine and removed all expresso-related things.\\ <br />\n\\\n\\\n I hope you will like it!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2012-01-04T05:48:00.000Z","created_by":1,"updated_at":"2012-01-04T05:48:00.000Z","updated_by":1,"published_at":"2012-01-04T05:48:00.000Z","published_by":1},{"id":10,"uuid":"34157759-1f3d-43c0-b0ba-3d37e9968d6e","title":"Greetings! Not sure if this is the best place to ask, but I've got a sequelize question for you:  is there a way to define something like a custom...","slug":"greetings-not-sure-if-this-is-the-best-place-to-ask","markdown":"Hi!\n\nFor now it is not possible to add a special data type. But you could use\nthe boolean datatype for the ‘sex’-attribute and add a gender method\nwhich evaluates the attribute and returns ‘male’ or ‘female’ as value.\nTake a look at\n[http://sequelizejs.com/?active=expanding-models\\#expanding-models](http://sequelizejs.com/?active=expanding-models#expanding-models)\nand\n[http://sequelizejs.com/?active=data-types\\#data-types](http://sequelizejs.com/?active=data-types#data-types)\nfor further information. What do you think?\n\nWith best regards,\n\nSascha\n","html":"<p>Hi!</p>\n\n<p>For now it is not possible to add a special data type. But you could use <br />\nthe boolean datatype for the ‘sex’-attribute and add a gender method <br />\nwhich evaluates the attribute and returns ‘male’ or ‘female’ as value. <br />\nTake a look at <br />\n<a href=\"http://sequelizejs.com/?active=expanding-models#expanding-models\">http://sequelizejs.com/?active=expanding-models#expanding-models</a>\nand <br />\n<a href=\"http://sequelizejs.com/?active=data-types#data-types\">http://sequelizejs.com/?active=data-types#data-types</a>\nfor further information. What do you think?</p>\n\n<p>With best regards,</p>\n\n<p>Sascha</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2012-01-02T06:38:11.000Z","created_by":1,"updated_at":"2012-01-02T06:38:11.000Z","updated_by":1,"published_at":"2012-01-02T06:38:11.000Z","published_by":1},{"id":11,"uuid":"0eee1c90-9dfb-4b09-a93f-98898e5c8149","title":"Changes in Sequelize 1.2.1","slug":"changes-in-sequelize-1-2-1","markdown":"This post summarizes changes in [Sequelize](http://sequelizejs.com)\nv1.2.1. It is highly recommended to read this post due to some changes\nin default values and interfaces. There are also some minor, but very\ncool new features.\n\n### Global options for models\n\nIn Sequelize v1.2.1 I’ve refactored the not so officially communicated\npossibility to define Sequelize-wide options, which are passed to the\nModels in multiple cases. I will explain the usage in the following, for\nnow let’s see how it was before and how it has changed:\n\n> var sequelize = new Sequelize(database, user, password, {\\\n>  queryOptions: {},\\\n>  defineOptions: {/\\*\\\n>  here you can pass options, which you want to be defined for all\n> models.\\\n>  e.g. underscored: true, which will turn all model usages into\n> underscore usage.\\\n>  look into the model definition options for more information\\\n>  \\*/},\\\n>  syncOptions: {/\\*\\\n>  also not really senseful atm, but you could do this:\\\n>  force: true —\\> this will\\\n>  \\*/}\\\n>  }\n\nThe new API is this way:\n\n> var sequelize = new Sequelize(database, user, password, {\\\n>  query: {},\\\n>  define: {},\\\n>  sync: {}\\\n>  }\n\nAnd here is what you can do with it:\n\n> var sequelize = new Sequelize(database, user, password, {\\\n>  queryOptions: { /\\* this has no further sense so far \\*/ },\\\n>  defineOptions: {/\\*\\\n>  here you can pass options, which you want to be defined for all\n> models.\\\n>  e.g. underscored: true, which will turn all model usages into\n> underscore usage.\\\n>  look into the model definition options for more information\\\n>  \\*/},\\\n>  syncOptions: {/\\*\\\n>  also not really senseful atm, but you could do this:\\\n>  force: true —\\> this will always drop the table before creating it\n> again, when calling sync\\\n>  \\*/}\\\n>  }\n\nHere is more realistic use case:\n\n> // Instead of doing this…\\\n>  var Person = sequelize.define(‘Person’, {/\\*attributes\\*/}, {\n> underscored: true })\\\n>  var Task = sequelize.define(‘Task’, {/\\*attributes\\*/}, {\n> underscored: true })\\\n> \\\n>  // …you can do this:\\\n>  var sequelize = new Sequelize(db, user, pw, { define: {underscored:\n> true} })\\\n>  var Person = sequelize.define(‘Person’, {/\\*attributes\\*/})\\\n>  var Task = sequelize.define(‘Task’, {/\\*attributes\\*/})\n\nHope you like it :)\n\n### Definition of the charset\n\nWhen setting up travis I found out that there were no way to define the\ncharset of the tables. Well, you can now do this but I guess this is\njust the beginning. I basically needed this because travis is has UTF8\nas default charset, which is OK but has broken all the tests. Please\ndrop me a line if you are using UTF8 with sequelize, because I had no\nluck with it. I forced all tests to create latin1 charsets.\n\nIf you to specify a non-default-charset, here is how you can do it:\n\n> // charset = latin1\\\n>  var sequelize = new Sequelize(db, user, pw, { define: {charset:\n> ‘latin1’} })\\\n>  // charset = utf8; collate = utf8\\_general\\_ci; I guess this will\n> break everything :D\\\n>  var sequelize = new Sequelize(db, user, pw, { define: {charset:\n> ‘latin1’, collate: ‘utf8\\_general\\_ci’} }\n\nOf course you can also define this for each model.\n\n### Definition of the MySQL engine\n\nSomeone requested InnoDB as default engine. Because I don’t mind, I just\ndid so. If you want to change it, feel free to do so:\n\n> var sequelize = new Sequelize(db, user, pw, { define: {engine:\n> ‘MYISAM’} })\n\nFeel free to drop me a line with your thoughts about this.\n\n### find / findAll with array usage\n\nI just added the possibility to search in the database for multiple\nspecific values:\n\n> Model.findAll({ where: { id: [1,2,3] } }).on(‘success’,\n> function(models) {\\\n>  // models will contain all entries with id 1, 2 or 3\\\n>  // the query will do this: SELECT \\* FROM Model WHERE id IN (1,2,3)\\\n>  })\n\nAnd that’s it :)\n","html":"<p>This post summarizes changes in <a href=\"http://sequelizejs.com\">Sequelize</a> <br />\nv1.2.1. It is highly recommended to read this post due to some changes <br />\nin default values and interfaces. There are also some minor, but very <br />\ncool new features.</p>\n\n<h3 id=\"globaloptionsformodels\">Global options for models</h3>\n\n<p>In Sequelize v1.2.1 I’ve refactored the not so officially communicated <br />\npossibility to define Sequelize-wide options, which are passed to the <br />\nModels in multiple cases. I will explain the usage in the following, for <br />\nnow let’s see how it was before and how it has changed:</p>\n\n<blockquote>\n  <p>var sequelize = new Sequelize(database, user, password, {\\\n   queryOptions: {},\\\n   defineOptions: {/*\\\n   here you can pass options, which you want to be defined for all\n  models.\\\n   e.g. underscored: true, which will turn all model usages into\n  underscore usage.\\\n   look into the model definition options for more information\\\n   */},\\\n   syncOptions: {/*\\\n   also not really senseful atm, but you could do this:\\\n   force: true —> this will\\\n   */}\\\n   }</p>\n</blockquote>\n\n<p>The new API is this way:</p>\n\n<blockquote>\n  <p>var sequelize = new Sequelize(database, user, password, {\\\n   query: {},\\\n   define: {},\\\n   sync: {}\\\n   }</p>\n</blockquote>\n\n<p>And here is what you can do with it:</p>\n\n<blockquote>\n  <p>var sequelize = new Sequelize(database, user, password, {\\\n   queryOptions: { /* this has no further sense so far */ },\\\n   defineOptions: {/*\\\n   here you can pass options, which you want to be defined for all\n  models.\\\n   e.g. underscored: true, which will turn all model usages into\n  underscore usage.\\\n   look into the model definition options for more information\\\n   */},\\\n   syncOptions: {/*\\\n   also not really senseful atm, but you could do this:\\\n   force: true —> this will always drop the table before creating it\n  again, when calling sync\\\n   */}\\\n   }</p>\n</blockquote>\n\n<p>Here is more realistic use case:</p>\n\n<blockquote>\n  <p>// Instead of doing this…\\\n   var Person = sequelize.define(‘Person’, {/*attributes*/}, {\n  underscored: true })\\\n   var Task = sequelize.define(‘Task’, {/*attributes*/}, {\n  underscored: true })\\\n  \\\n   // …you can do this:\\\n   var sequelize = new Sequelize(db, user, pw, { define: {underscored:\n  true} })\\\n   var Person = sequelize.define(‘Person’, {/*attributes*/})\\\n   var Task = sequelize.define(‘Task’, {/*attributes*/})</p>\n</blockquote>\n\n<p>Hope you like it :)</p>\n\n<h3 id=\"definitionofthecharset\">Definition of the charset</h3>\n\n<p>When setting up travis I found out that there were no way to define the <br />\ncharset of the tables. Well, you can now do this but I guess this is <br />\njust the beginning. I basically needed this because travis is has UTF8 <br />\nas default charset, which is OK but has broken all the tests. Please <br />\ndrop me a line if you are using UTF8 with sequelize, because I had no <br />\nluck with it. I forced all tests to create latin1 charsets.</p>\n\n<p>If you to specify a non-default-charset, here is how you can do it:</p>\n\n<blockquote>\n  <p>// charset = latin1\\\n   var sequelize = new Sequelize(db, user, pw, { define: {charset:\n  ‘latin1’} })\\\n   // charset = utf8; collate = utf8_general_ci; I guess this will\n  break everything :D\\\n   var sequelize = new Sequelize(db, user, pw, { define: {charset:\n  ‘latin1’, collate: ‘utf8_general_ci’} }</p>\n</blockquote>\n\n<p>Of course you can also define this for each model.</p>\n\n<h3 id=\"definitionofthemysqlengine\">Definition of the MySQL engine</h3>\n\n<p>Someone requested InnoDB as default engine. Because I don’t mind, I just <br />\ndid so. If you want to change it, feel free to do so:</p>\n\n<blockquote>\n  <p>var sequelize = new Sequelize(db, user, pw, { define: {engine:\n  ‘MYISAM’} })</p>\n</blockquote>\n\n<p>Feel free to drop me a line with your thoughts about this.</p>\n\n<h3 id=\"findfindallwitharrayusage\">find / findAll with array usage</h3>\n\n<p>I just added the possibility to search in the database for multiple <br />\nspecific values:</p>\n\n<blockquote>\n  <p>Model.findAll({ where: { id: [1,2,3] } }).on(‘success’,\n  function(models) {\\\n   // models will contain all entries with id 1, 2 or 3\\\n   // the query will do this: SELECT * FROM Model WHERE id IN (1,2,3)\\\n   })</p>\n</blockquote>\n\n<p>And that’s it :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-11-04T07:32:00.000Z","created_by":1,"updated_at":"2011-11-04T07:32:00.000Z","updated_by":1,"published_at":"2011-11-04T07:32:00.000Z","published_by":1},{"id":12,"uuid":"9990f204-acb3-4c56-9a73-dac2a5dd258b","title":"Theme Hospital on Mac OS X with Boxer 1.1.1","slug":"theme-hospital-on-mac-os-x-with-boxer-1-1-1","markdown":"Hey Mac gamers, about an year ago I wrote [an article\nabout](http://blog.depold.com/post/2072111779/theme-hospital-on-mac-os-x),\nhow to get Theme Hospital work on Mac OS X. Because that post is very\nold and things have changed, here is an updated how-to.\n\n1.  [Install Boxer.](http://boxer.washboardabs.net/download/latest)\n2.  Move the extracted file to the Applications folder.\n3.  Get a copy of the game. I just used a copy (ISO file) of my old cd.\n4.  Open Boxer.\n5.  Choose “Import a new game”.\n6.  Throw the ISO file / disk drive from the Finder into the wizard,\n    saying “Drop your game here.”\n7.  Choose setup.exe (was default for me).\n8.  Select a language.\n9.  Set up your soundcard: Sound Effects =\\> Creative Labs Sound Blaster\n    or 100% Compatible; Music =\\> Creative Labs Sound Blaster 16.\n    (Choose automatic setup after each step).\n10. Install. Complete Installation.\n11. You will get asked, where you want to install the game. Just keep\n    the default of C:\\\\HOSPITAL.\n12. Wait until installation is done.\n13. Exit.\n14. You will now get thrown into a DOS environment. Boxer will ask you,\n    if installation should be re-done or if everything works fine.\n    Select: ‘Finish importing’. Now wait a bit until Boxer says\n    “Congratulations”.\n15. Launch the game.\n16. You will be in a DOS environment again. Boxer will ask you, which\n    file you want to open. Choose hospital.exe.\n17. Also choose ‘Launch every time’.\n18. If you quit the game again and re-run it, Boxer will now\n    automatically run the right file.\n\nI hope this works for all of you :) Have fun! (I also checked for save\nissues, but it worked without problems.)\n","html":"<p>Hey Mac gamers, about an year ago I wrote <a href=\"http://blog.depold.com/post/2072111779/theme-hospital-on-mac-os-x\">an article <br />\nabout</a>, <br />\nhow to get Theme Hospital work on Mac OS X. Because that post is very <br />\nold and things have changed, here is an updated how-to.</p>\n\n<ol>\n<li><a href=\"http://boxer.washboardabs.net/download/latest\">Install Boxer.</a>  </li>\n<li>Move the extracted file to the Applications folder.  </li>\n<li>Get a copy of the game. I just used a copy (ISO file) of my old cd.  </li>\n<li>Open Boxer.  </li>\n<li>Choose “Import a new game”.  </li>\n<li>Throw the ISO file / disk drive from the Finder into the wizard, <br />\nsaying “Drop your game here.”</li>\n<li>Choose setup.exe (was default for me).  </li>\n<li>Select a language.  </li>\n<li>Set up your soundcard: Sound Effects => Creative Labs Sound Blaster <br />\nor 100% Compatible; Music => Creative Labs Sound Blaster 16.\n(Choose automatic setup after each step).</li>\n<li>Install. Complete Installation.  </li>\n<li>You will get asked, where you want to install the game. Just keep <br />\nthe default of C:\\HOSPITAL.</li>\n<li>Wait until installation is done.  </li>\n<li>Exit.  </li>\n<li>You will now get thrown into a DOS environment. Boxer will ask you, <br />\nif installation should be re-done or if everything works fine.\nSelect: ‘Finish importing’. Now wait a bit until Boxer says\n“Congratulations”.</li>\n<li>Launch the game.  </li>\n<li>You will be in a DOS environment again. Boxer will ask you, which <br />\nfile you want to open. Choose hospital.exe.</li>\n<li>Also choose ‘Launch every time’.  </li>\n<li>If you quit the game again and re-run it, Boxer will now <br />\nautomatically run the right file.</li>\n</ol>\n\n<p>I hope this works for all of you :) Have fun! (I also checked for save <br />\nissues, but it worked without problems.)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-10-08T19:57:00.000Z","created_by":1,"updated_at":"2011-10-08T19:57:00.000Z","updated_by":1,"published_at":"2011-10-08T19:57:00.000Z","published_by":1},{"id":13,"uuid":"6014d885-32ad-46e8-be97-58f805347e2a","title":"JSConf.EU 2011 - Summary of the 2nd Day","slug":"jsconf-eu-2011-summary-of-the-2nd-day","markdown":"And that’s it. JSConf.EU 2011 is done. Great conf! Here is my summary\nabout the second day’s talks.\n\n### High density server side java script\n\nThe first talk of the day was by [Tomasz\nJanczuk](http://twitter.com/tjanczuk) about [High density server side\njava\nscript](http://cloud.github.com/downloads/tjanczuk/denser/High%20density%20server%20side%20JavaScript.pdf).\nThe microsoft speaker was talking about possibilities to lower hosting\ncosts for lightweight applications (actual node apps). He assumed costs\nof 5 per month as current normal hosting costs. Way too much, according\nto him. Tomasz splitted the currently process based hosting approach\ninto threads. Doing so, each application won’t run in a single process\nbut in process’ threads. Because the resulting price reduction was not\nenough, he was going on. An explaination followed, which outlined the\nhierarchy of V8 apps with it’s V8::Isolates and it’s V8::Contexts.\nBasically each application has an isolate and in that one specific\ncontext. However, Tomasz was splitting the Isolate into multiple\ncontexts, running each an application. This was finally resulting in a\ndemonstration of 1000 chat servers running all in a single thread’s\nV8::Isolate. If I remember correctly the final price was about 0,30 a\nmonth.\n\nTomasz was using the tool Denser, which spawned the processes and\nstarted a web gui with some information about hardware usage and network\ntraffic. [You can find it here.](https://github.com/tjanczuk/denser)\n\n### Buzz It For Real ! … the tortuous road to Mobile HTML5 Apps\n\nThe next talk was about the ability of current browsers to support\n“HTML5”. [Andrea Giammarchi](http://twitter.com/WebReflection) made\nclear, that there’s neither a finished specification of it nor does\ncurrent browser support it consistantly or completely. In order to get\nthose features work, the Nokia guy pointed to polyfilling the missing\nstuff. To get those fallback solutions work, it’s the first step to\ndetect if the feature is already natively supported or not. He described\nthe stoney way to detect the browser’s compatibility to touch events and\nthat there are browers which seems to support it but actually fail when\nusing it. After that he also told about missing fallback solutions for\ncanvas usage, due to missing flash support in many mobile devices.\nLimitations in LocalStorage followed: Only 2.5MB of space, no getter for\ncurrent storage size, no timestamps in values. To get rid of those\nproblems, he throwed Web SQL into the buzzword bingo jungle. 50MB space\non iOS, unlimited space on Android, the possibility to increase the\nstorage size dynamically: “too fast, too easy and ABANDONED by W3C!”\nConclusion of him: No HTML5 feature is really cross-browser compatible,\nbut it’s taking the right direction. “Challenge accepted”. [Here are the\nslides of his talk.](http://www.3site.eu/JSConfEU.pdf)\n\n### Demand More From Your JavaScript Editor\n\nAfter this awesome talk I headed to the upstairs area to learn about\ncool JS IDEs… Well, let’s just say that the speaker was [Maxim\nMossienko](https://twitter.com/MaximMossienko), a JetBrains guy, talking\nabout how super awesome the WebStorm application is. I left after some\nminutes…\n\n### 140byt.es\n\nI just ran into another great talk of [Jed\nSchmidt](https://twitter.com/jedschmidt) presenting the idea of golfing\nJS code to [140 bytes](http://140byt.es). I assumed, that the talk would\nbe the very same as at Berlin.JS some weeks ago, but he ended up with\nsome nice tricks to [minimize code\nsize](https://github.com/jed/140bytes/wiki/Byte-saving-techniques). He\nalso pointed to some other projects of him:\n[kibi](https://github.com/jed/kibi) and\n[Namedrop](https://github.com/jed/namedrop). If you haven’t heard Jed\nspeaking you definitly should give it a try. Awesome speaker.\n\n### Magic Wand for surface generation\n\nThe next talk was by [Jakub Siemitkowski](http://twitter.com/sasklacz)\nabout using [Voxels](http://voxel.onaluf.org/) in JavaScript games. I\nhad not assumed that much of maths details but the talk was ok. After\nexplaining why Octotrees and Voxels are pretty useful, he showed a demo\nof what he built, crashed his browser and told about some improvents, he\nwant to add in the future. Fun fact: Someone asked, why he is using\nfirefox over Chrome or Safari. Answer: Because Firefox is the only\nbrowser which is not crashing initially. :D\n\n### Polyfilling the gaps\n\n[Lea Verou](http://twitter.com/LeaVerou) followed up with an awesome\ntalk about polyfilling. She defined rules for polyfilling correctly,\nmeaning basically that one should only fix things as specified. So don’t\nadd additional functionalities, as polyfills are meant to be replaced by\na native implementation without any changes on your code. [You can find\nthe slides here.](http://leaverou.me/polyfilling-the-gaps/)\n\n### All Your Browsers Are Belong To Me\n\nThe next talk was about playing sound on multiple machines dynamically.\n[James Coglan](http://twitter.com/jcoglan) asked the audience to open an\nURL in firefox. Doing so James was able to control the sound output of\neach client. The challenge was to synchronize the sound of all clients,\nwhile sending different data to each of them.\n\n### Community JS reloaded - how to rock as a movement\n\nAfterwards [Chris Heilmann](http://twitter.com/codepo8) entered the\nstage. The Mozilla guy complained about the current ongoing in the JS\nscene, resulting in some “rock stars”, which the masses follow. He wants\nmore people “to join the band”. Furthermore he told about some things,\nthat should be followed when joining. First thing: stop breaking other\npeople’s rules. So one should e.g. adapt the syntactical style when\ncommiting to someone’s project. He went on talking about, how to\ncommunicate to another person without criticism and with many other\nstuff. Finally he spent some time to talk about future Firefox features\nfor debugging and styling. [You can find the slides of Chris\nhere.](http://icant.co.uk/talks/jsconfeu2011)\n\n### dyn.js - 100% invokedynamic js impl\n\n[Douglas Campos](http://twitter.com/qmx) then presented a Rhino-like\nJavaScript Runtime based on the JVM 7, which just introduced semi\ndynamic data types. First he told the audience how awesome the\nRhino-devs were, when they developed the Runtime for Java 2, which he\nsaid is known for it’s slowness. He went on, explaining how he is\nconnecting the dynamic datatypes of JavaScript to the so called\ninvokedynamics. The project actually handles ECMAScript 3 but gets\nupdated to 6, once it’s final. You can find [the project\nhere](http://dynjs.org) and [the slides\nhere](http://cdn.qmx.me/presentations/2011/jsconf.eu/index.html).\n\n### Why JavaScript is the only language that matters - the story behind jsmad\n\n[Amos Wenger](http://twitter.com/nddrylliog) continued with the story\nbehind the mp3 decoding service [jsmad](http://jsmad.org). He compared\nFlash to HTML5 and showed things, that Flash can handle for years and …\ncurrent browsers can’t. He always made clear, that the specification is\npretty awesome but the browsers are implementing it wrong or only\npartly. He also pointed to an issue with MP3: The patent holders have to\nbe paid for ever single usage of MP3 on the web. [You can find the\nslides here.](http://slides.pageforest.com/docs/jsmad/slides). Awesome\ntalk BTW.\n\n### Garbage collection in JavaScript\n\n[Erik Corry](http://twitter.com/erikcorry) from Google was talking about\ngarbage collection in JavaScript afterwards. He showed a demo of how V8\nwill doing GC.\n\n### Why Do We Need Two Eyes?\n\n[Michal Budzyinski](http://twitter.com/michalbe) had an awesome talk\nabout anaglyphs. He talked about the history of anaglyphs and how the\nthings are actually working. The basic idea is to take two pictures with\nthe same content but with a minimal change to the camera angle. A live\nprogramming session followed, in which he was converting images to\ncanvas and manipulating them to extract red and blue from the one and\nred from the other image. He then combined both images to get an\nanaglyph version. Pretty cool :) [Slides\nhere.](http://www.slideshare.net/michalbu/we-do-we-need-two-eyes-jsconfeu-october-2011)\n\n### An End to Negativity\n\nThe final talk was by [Chris Williams](http://twitter.com/voodootikigod)\nhimself, making clear, that many people in the programmer scene are\nhating way too much. He want’s the see this stopping and also called for\nsupport for people, which are getting hated. He asked the audience what\nprogramming languages they are using and if they think, that it does\nmatter if they are using PHP, Ruby or whatever else. A rhetorical\nquestion of cause. Funfact: Before the talk started, he wanted to call\nhis wife + child to be part of the talk, but that failed. Some listener\noffers a dial with his mom, which he just facetimed and which was\nobviously confused :D\n","html":"<p>And that’s it. JSConf.EU 2011 is done. Great conf! Here is my summary <br />\nabout the second day’s talks.</p>\n\n<h3 id=\"highdensityserversidejavascript\">High density server side java script</h3>\n\n<p>The first talk of the day was by <a href=\"http://twitter.com/tjanczuk\">Tomasz <br />\nJanczuk</a> about <a href=\"http://cloud.github.com/downloads/tjanczuk/denser/High%20density%20server%20side%20JavaScript.pdf\">High density server side <br />\njava <br />\nscript</a>. <br />\nThe microsoft speaker was talking about possibilities to lower hosting <br />\ncosts for lightweight applications (actual node apps). He assumed costs <br />\nof 5 per month as current normal hosting costs. Way too much, according <br />\nto him. Tomasz splitted the currently process based hosting approach <br />\ninto threads. Doing so, each application won’t run in a single process <br />\nbut in process’ threads. Because the resulting price reduction was not <br />\nenough, he was going on. An explaination followed, which outlined the <br />\nhierarchy of V8 apps with it’s V8::Isolates and it’s V8::Contexts. <br />\nBasically each application has an isolate and in that one specific <br />\ncontext. However, Tomasz was splitting the Isolate into multiple <br />\ncontexts, running each an application. This was finally resulting in a <br />\ndemonstration of 1000 chat servers running all in a single thread’s <br />\nV8::Isolate. If I remember correctly the final price was about 0,30 a <br />\nmonth.</p>\n\n<p>Tomasz was using the tool Denser, which spawned the processes and <br />\nstarted a web gui with some information about hardware usage and network <br />\ntraffic. <a href=\"https://github.com/tjanczuk/denser\">You can find it here.</a></p>\n\n<h3 id=\"buzzitforrealthetortuousroadtomobilehtml5apps\">Buzz It For Real ! … the tortuous road to Mobile HTML5 Apps</h3>\n\n<p>The next talk was about the ability of current browsers to support <br />\n“HTML5”. <a href=\"http://twitter.com/WebReflection\">Andrea Giammarchi</a> made\nclear, that there’s neither a finished specification of it nor does <br />\ncurrent browser support it consistantly or completely. In order to get <br />\nthose features work, the Nokia guy pointed to polyfilling the missing <br />\nstuff. To get those fallback solutions work, it’s the first step to <br />\ndetect if the feature is already natively supported or not. He described <br />\nthe stoney way to detect the browser’s compatibility to touch events and <br />\nthat there are browers which seems to support it but actually fail when <br />\nusing it. After that he also told about missing fallback solutions for <br />\ncanvas usage, due to missing flash support in many mobile devices. <br />\nLimitations in LocalStorage followed: Only 2.5MB of space, no getter for <br />\ncurrent storage size, no timestamps in values. To get rid of those <br />\nproblems, he throwed Web SQL into the buzzword bingo jungle. 50MB space <br />\non iOS, unlimited space on Android, the possibility to increase the <br />\nstorage size dynamically: “too fast, too easy and ABANDONED by W3C!” <br />\nConclusion of him: No HTML5 feature is really cross-browser compatible, <br />\nbut it’s taking the right direction. “Challenge accepted”. <a href=\"http://www.3site.eu/JSConfEU.pdf\">Here are the <br />\nslides of his talk.</a></p>\n\n<h3 id=\"demandmorefromyourjavascripteditor\">Demand More From Your JavaScript Editor</h3>\n\n<p>After this awesome talk I headed to the upstairs area to learn about <br />\ncool JS IDEs… Well, let’s just say that the speaker was <a href=\"https://twitter.com/MaximMossienko\">Maxim <br />\nMossienko</a>, a JetBrains guy, talking <br />\nabout how super awesome the WebStorm application is. I left after some <br />\nminutes…</p>\n\n<h3 id=\"140bytes\">140byt.es</h3>\n\n<p>I just ran into another great talk of <a href=\"https://twitter.com/jedschmidt\">Jed <br />\nSchmidt</a> presenting the idea of golfing <br />\nJS code to <a href=\"http://140byt.es\">140 bytes</a>. I assumed, that the talk would <br />\nbe the very same as at Berlin.JS some weeks ago, but he ended up with <br />\nsome nice tricks to <a href=\"https://github.com/jed/140bytes/wiki/Byte-saving-techniques\">minimize code <br />\nsize</a>. He <br />\nalso pointed to some other projects of him: <br />\n<a href=\"https://github.com/jed/kibi\">kibi</a> and\n<a href=\"https://github.com/jed/namedrop\">Namedrop</a>. If you haven’t heard Jed\nspeaking you definitly should give it a try. Awesome speaker.</p>\n\n<h3 id=\"magicwandforsurfacegeneration\">Magic Wand for surface generation</h3>\n\n<p>The next talk was by <a href=\"http://twitter.com/sasklacz\">Jakub Siemitkowski</a> <br />\nabout using <a href=\"http://voxel.onaluf.org/\">Voxels</a> in JavaScript games. I <br />\nhad not assumed that much of maths details but the talk was ok. After <br />\nexplaining why Octotrees and Voxels are pretty useful, he showed a demo <br />\nof what he built, crashed his browser and told about some improvents, he <br />\nwant to add in the future. Fun fact: Someone asked, why he is using <br />\nfirefox over Chrome or Safari. Answer: Because Firefox is the only <br />\nbrowser which is not crashing initially. :D</p>\n\n<h3 id=\"polyfillingthegaps\">Polyfilling the gaps</h3>\n\n<p><a href=\"http://twitter.com/LeaVerou\">Lea Verou</a> followed up with an awesome\ntalk about polyfilling. She defined rules for polyfilling correctly, <br />\nmeaning basically that one should only fix things as specified. So don’t <br />\nadd additional functionalities, as polyfills are meant to be replaced by <br />\na native implementation without any changes on your code. <a href=\"http://leaverou.me/polyfilling-the-gaps/\">You can find <br />\nthe slides here.</a></p>\n\n<h3 id=\"allyourbrowsersarebelongtome\">All Your Browsers Are Belong To Me</h3>\n\n<p>The next talk was about playing sound on multiple machines dynamically. <br />\n<a href=\"http://twitter.com/jcoglan\">James Coglan</a> asked the audience to open an\nURL in firefox. Doing so James was able to control the sound output of <br />\neach client. The challenge was to synchronize the sound of all clients, <br />\nwhile sending different data to each of them.</p>\n\n<h3 id=\"communityjsreloadedhowtorockasamovement\">Community JS reloaded - how to rock as a movement</h3>\n\n<p>Afterwards <a href=\"http://twitter.com/codepo8\">Chris Heilmann</a> entered the <br />\nstage. The Mozilla guy complained about the current ongoing in the JS <br />\nscene, resulting in some “rock stars”, which the masses follow. He wants <br />\nmore people “to join the band”. Furthermore he told about some things, <br />\nthat should be followed when joining. First thing: stop breaking other <br />\npeople’s rules. So one should e.g. adapt the syntactical style when <br />\ncommiting to someone’s project. He went on talking about, how to <br />\ncommunicate to another person without criticism and with many other <br />\nstuff. Finally he spent some time to talk about future Firefox features <br />\nfor debugging and styling. <a href=\"http://icant.co.uk/talks/jsconfeu2011\">You can find the slides of Chris <br />\nhere.</a></p>\n\n<h3 id=\"dynjs100invokedynamicjsimpl\">dyn.js - 100% invokedynamic js impl</h3>\n\n<p><a href=\"http://twitter.com/qmx\">Douglas Campos</a> then presented a Rhino-like\nJavaScript Runtime based on the JVM 7, which just introduced semi <br />\ndynamic data types. First he told the audience how awesome the <br />\nRhino-devs were, when they developed the Runtime for Java 2, which he <br />\nsaid is known for it’s slowness. He went on, explaining how he is <br />\nconnecting the dynamic datatypes of JavaScript to the so called <br />\ninvokedynamics. The project actually handles ECMAScript 3 but gets <br />\nupdated to 6, once it’s final. You can find <a href=\"http://dynjs.org\">the project <br />\nhere</a> and <a href=\"http://cdn.qmx.me/presentations/2011/jsconf.eu/index.html\">the slides <br />\nhere</a>.</p>\n\n<h3 id=\"whyjavascriptistheonlylanguagethatmattersthestorybehindjsmad\">Why JavaScript is the only language that matters - the story behind jsmad</h3>\n\n<p><a href=\"http://twitter.com/nddrylliog\">Amos Wenger</a> continued with the story\nbehind the mp3 decoding service <a href=\"http://jsmad.org\">jsmad</a>. He compared <br />\nFlash to HTML5 and showed things, that Flash can handle for years and … <br />\ncurrent browsers can’t. He always made clear, that the specification is <br />\npretty awesome but the browsers are implementing it wrong or only <br />\npartly. He also pointed to an issue with MP3: The patent holders have to <br />\nbe paid for ever single usage of MP3 on the web. <a href=\"http://slides.pageforest.com/docs/jsmad/slides\">You can find the <br />\nslides here.</a>. Awesome <br />\ntalk BTW.</p>\n\n<h3 id=\"garbagecollectioninjavascript\">Garbage collection in JavaScript</h3>\n\n<p><a href=\"http://twitter.com/erikcorry\">Erik Corry</a> from Google was talking about\ngarbage collection in JavaScript afterwards. He showed a demo of how V8 <br />\nwill doing GC.</p>\n\n<h3 id=\"whydoweneedtwoeyes\">Why Do We Need Two Eyes?</h3>\n\n<p><a href=\"http://twitter.com/michalbe\">Michal Budzyinski</a> had an awesome talk\nabout anaglyphs. He talked about the history of anaglyphs and how the <br />\nthings are actually working. The basic idea is to take two pictures with <br />\nthe same content but with a minimal change to the camera angle. A live <br />\nprogramming session followed, in which he was converting images to <br />\ncanvas and manipulating them to extract red and blue from the one and <br />\nred from the other image. He then combined both images to get an <br />\nanaglyph version. Pretty cool :) <a href=\"http://www.slideshare.net/michalbu/we-do-we-need-two-eyes-jsconfeu-october-2011\">Slides <br />\nhere.</a></p>\n\n<h3 id=\"anendtonegativity\">An End to Negativity</h3>\n\n<p>The final talk was by <a href=\"http://twitter.com/voodootikigod\">Chris Williams</a> <br />\nhimself, making clear, that many people in the programmer scene are <br />\nhating way too much. He want’s the see this stopping and also called for <br />\nsupport for people, which are getting hated. He asked the audience what <br />\nprogramming languages they are using and if they think, that it does <br />\nmatter if they are using PHP, Ruby or whatever else. A rhetorical <br />\nquestion of cause. Funfact: Before the talk started, he wanted to call <br />\nhis wife + child to be part of the talk, but that failed. Some listener <br />\noffers a dial with his mom, which he just facetimed and which was <br />\nobviously confused :D</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-10-07T05:55:00.000Z","created_by":1,"updated_at":"2011-10-07T05:55:00.000Z","updated_by":1,"published_at":"2011-10-07T05:55:00.000Z","published_by":1},{"id":14,"uuid":"9543235b-c56c-4e0b-8b99-ca208f0eee64","title":"JSConf.EU 2011 - Summary of the 1st Day","slug":"jsconf-eu-2011-summary-of-the-1st-day","markdown":"Alright, …, day 1 of the JSConf.EU is done and while other are trying to\nminimize the results of the after show party I’ll try to summerize the\n(visited) talks:\n\n### Art\n\nNot a talk at all but a very nice detail was the artist [Anna Lena\nSchiller](http://www.annalenaschiller.com/). The Frulein (see the\nwebsite) created an artwork for each of the talks in the downstairs\narea.\n\n### Plask\n\nThe first talk was by [Dean McNamee](http://twitter.com/deanmcnamee)\nabout the multimedia programming environment\n[Plask](http://www.plask.org/). It might be my inability to completely\nunderstand native american speaker or the complexity of the topic, but I\ndon’t exactly got the point :D As far as I’ve understood, Plask is an\nenvironment which can be used in order to easily analyze multimedia and\ntrigger stuff according to the resulting data. Dean presented some\nshowcases including a visualization of music (via a nicely animated wave\nstream) and an experiment by a car manifacturer, who filled the inner of\nthe car with gas and placed some LEDs into it. The LEDs were then\ncolored according to the bass of the music. Check out the website for\nthe video.\n\nOne thing I’ve noticed, is, that Anna Lena had a type :D It’s “Plask”\nnot “Plusk” ;)\n\n### jsPerf\n\nThe second talk in the upstairs area was about\n[jsPerf](http://jsperf.com/) by [Mathias\nBynens](http://twitter.com/mathias). He was showing the testing tool and\nknown pitfalls. According to him, the most failures made are due to\nwrong testcase setups. For example it seems to be a common problem that\ntestcases are modifying the test setup without resetting the data. He\npointed out, that when your tests are resulting in very different\nvalues, the tests are most likely faulty. I will have to take a closer\nlook at jsPerf in the near future.\n\n### Sweet sixteen, but where are the tools?\n\nIn the third talk [Peter van der Zee](http://twitter.com/kuvos)\ncomplained about having so few tools and asked for more people to build\ntools. He also presented the proof-of-concept software Zeon.js which he\nannounced to be open-source the same day. You can find the Github\nrepositories (here [Zeon](https://github.com/qfox/Zeon)) and (here\n[ZeParser](https://github.com/qfox/ZeParser)). Zeon is by now possible\nto reflect the properties of an object, can detect errors thrown by a\nfunction and can also find dead code. It has also a profiling mode, in\nwhich the code get’s highlighted according to the currently active\nfunctions. He named it a heatmap for code :)\n\n### JavaScript JITs\n\n[David Mandelin](http://twitter.com/dmandelin) and [David\nAnderson](https://twitter.com/iamdvander) dived into the world of\nJavaScript JITs afterwards. They talked about typed and untyped JITs and\nhow JavaScript is now only 2-3 times slower than C. Awesome! The\nexplaination have been including the way, JavaScript is turned into\nAssembler and how it is optimized using code rewriting and dynamic\nmapping. This talk really reminds me of my studies :D\n\n### DOM implementation techniques\n\n[Marijn Haverbeke](http://twitter.com/marijnjh) talked about the DOM. He\ndescribed problems one should avoid while developing frontend stuff.\nAccording to that you should avoid reading the DOM as much as you can\nwhile you are manipulating it. Doing so will mark the DOM nodes as dirty\nwithout re-rendering it at all. So you should first manipulate it as\nmuch as possible and the read properties of it. Another thing I’ve\nlearned, was, that DOM implementations are trying to index the nodes.\nThey differ between ID usage, class usage, tag name usage and more\nsemantic usage, which are completely unindexed. So selecting nodes via a\nclass will be much faster than using a semantic selector like “:hover”.\n\n### HTML5 Game Engine development\n\nThe talk I was looking forward the most, was this one by [Paul\nBakaus](http://twitter.com/pbakaus). He reviewed the last two years\nlooking back at Dextrose AG and the lessons learned since then. He\nannounced, that Zynga is open-sourcing four of their libraries, two of\nthem just this day. First thing was\n[ViewPorter](https://github.com/zynga/viewporter), which will maximize\nthe Viewport on mobile devices and take care of things like positioning\nof elements at [Bottom: 0, Left: 0]. Second one was\n[Scroller](https://github.com/zynga/scroller), which unifies swiping\nguesteres and mouse dragging in order to move the viewport correctly\nover an clipped content. The library also allows sticking to the\nviewport to specific element borders.\n\nBesides that, he says, that he used external CSS Animations and\nTransitions in order to get performant graphics calculation. This is no\nlonger needed. Inline CSS will perform exactly as fast as external CSS\nis doing. Furthermore the Canvas is sometimes no more slower than DOM\nusage. This has totally changed in the last two years.\n\nAwesome talk!\n\n### Web Intents\n\n[Paul Kinlin](http://twitter.com/paul_kinlan) and [Jan\nKleinert](http://twitter.com/jankleinert) from Google followed with some\npretty nice and interesting talk. They first outlined, that it is a pain\nin the ass to edit an existing photo in the web and then send it to\nmultiple services. They explained, that there should be better\ninter-application communication and presented [Web\nIntents](http://webintents.org/). Web Intents is basically based on\nadditional meta data of the websites. On the server side you can define\nroutes for specific verbs. The client then calls those verbs via a\njavascript library and cann send and receive data from the server. They\nshowed an example in which they first took a picture from a website,\nthen manipulated it with a web editing tool and afterwards saved it on\nanother webservice.\n\nPretty interesting!\n\n### Intro to Kendo UI: The JS Developer Sword\n\nFollowing this very exciting talks, I did the failure to visit the\n[Kendo UI](http://www.kendoui.com/) talk by [Alexander\nGyoshev](http://twitter.com/alex_gyoshev). Neither the speaker was very\ninteresting nor the topic was well presented. After the talk I really\nhad no clue why to use the framework or what is possible with it… IMHO\nit is yet another UI Framework based on jQuery. Sorry folks.\n\n### Messing with JavaScript and the DOM to measure network performance characteristics\n\n[Phillip Tellis](http://twitter.com/bluesmoon) did a great job by\ntelling us how to measure the network performance of a client via\nJavaScript. He explained parts of the communication between client and\nserver and pointed to some problems you have when measuring the network.\nHe explained basics of the\n[Boomerang](http://yahoo.github.com/boomerang/doc/) project and\nfurthermore went into details about port profiling of the clients\nnetwork. Very very cool!\n\n### Beyond JavaScript\n\nIn this mindblowing talk [Jakob\nMattsson](http://twitter.com/jakobmattsson) talked about the not so\ndynamic programming languages out there and told the listeners that it\nwould be a very fail to design programming languages with the question\n“What can it do?” in mind. You should much more thing about “What can’t\nbe done with it?”. Problem with the so called dynamic languages today\nis, that you can’t change keywords or rewrite the syntax the way you\nwant. So you are forced to use the function keyword and to accept the\nor-operator as is. He also pointed to an upcoming open-source project by\nhim or his Company Burt.\n\n### Emscripten\n\nThe last scheduled talk at this day was by [Alon\nZakai](https://twitter.com/#!/aazakai) about\n[Emscripten](http://emscripten.org/). The Mozilla guy presented a\nproject which transforms LLVM Bytecode into JavaScript code. Doing so he\nwas able to create a bunch of demos available\n[here](https://github.com/kripken/emscripten/wiki). One of them (which\nwas also very well presented) is the Python environment, which actually\nhandles datatypes correctly and is behaving most likely as Python would.\nThe guy also talked about common pitfalls, e.g. manually deletion of\nobjects and minor problems with javascript runtimes.\n\n### JSLOL\n\nI was almost on my way to the train when Malte Ubl stopped everyone and\nannounced a further talk. Entering the stage was Mr. JS himself, talking\nabout the current state of ECMAScript 6. Brendan talked about the\ntriangle operator doing inheritance between classes (smth like Class \\<|\nBase). Furthermore he said, that this is a somehow strange syntax and\nthat they were thinking about the monocle-mustache operator (smth like\nClass.{a:1, b:2}). In addition he presented default values for functions\nand much more. He finally announced the [official draft of the\nspecification](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts).\nSomeone btw. requested the .js-TLD. Brendan will talk about that with\nES6 commitee. I finally got this [link](http://repl.it/), where it is\npossible to test ES6 in the web.\n\n### Talk-Listing\n\n[This gist is listing all the related resources of the\ntalks.](https://gist.github.com/1256066)\n","html":"<p>Alright, …, day 1 of the JSConf.EU is done and while other are trying to <br />\nminimize the results of the after show party I’ll try to summerize the <br />\n(visited) talks:</p>\n\n<h3 id=\"art\">Art</h3>\n\n<p>Not a talk at all but a very nice detail was the artist <a href=\"http://www.annalenaschiller.com/\">Anna Lena <br />\nSchiller</a>. The Frulein (see the <br />\nwebsite) created an artwork for each of the talks in the downstairs <br />\narea.</p>\n\n<h3 id=\"plask\">Plask</h3>\n\n<p>The first talk was by <a href=\"http://twitter.com/deanmcnamee\">Dean McNamee</a> <br />\nabout the multimedia programming environment <br />\n<a href=\"http://www.plask.org/\">Plask</a>. It might be my inability to completely\nunderstand native american speaker or the complexity of the topic, but I <br />\ndon’t exactly got the point :D As far as I’ve understood, Plask is an <br />\nenvironment which can be used in order to easily analyze multimedia and <br />\ntrigger stuff according to the resulting data. Dean presented some <br />\nshowcases including a visualization of music (via a nicely animated wave <br />\nstream) and an experiment by a car manifacturer, who filled the inner of <br />\nthe car with gas and placed some LEDs into it. The LEDs were then <br />\ncolored according to the bass of the music. Check out the website for <br />\nthe video.</p>\n\n<p>One thing I’ve noticed, is, that Anna Lena had a type :D It’s “Plask” <br />\nnot “Plusk” ;)</p>\n\n<h3 id=\"jsperf\">jsPerf</h3>\n\n<p>The second talk in the upstairs area was about <br />\n<a href=\"http://jsperf.com/\">jsPerf</a> by <a href=\"http://twitter.com/mathias\">Mathias\nBynens</a>. He was showing the testing tool and <br />\nknown pitfalls. According to him, the most failures made are due to <br />\nwrong testcase setups. For example it seems to be a common problem that <br />\ntestcases are modifying the test setup without resetting the data. He <br />\npointed out, that when your tests are resulting in very different <br />\nvalues, the tests are most likely faulty. I will have to take a closer <br />\nlook at jsPerf in the near future.</p>\n\n<h3 id=\"sweetsixteenbutwherearethetools\">Sweet sixteen, but where are the tools?</h3>\n\n<p>In the third talk <a href=\"http://twitter.com/kuvos\">Peter van der Zee</a> <br />\ncomplained about having so few tools and asked for more people to build <br />\ntools. He also presented the proof-of-concept software Zeon.js which he <br />\nannounced to be open-source the same day. You can find the Github <br />\nrepositories (here <a href=\"https://github.com/qfox/Zeon\">Zeon</a>) and (here <br />\n<a href=\"https://github.com/qfox/ZeParser\">ZeParser</a>). Zeon is by now possible\nto reflect the properties of an object, can detect errors thrown by a <br />\nfunction and can also find dead code. It has also a profiling mode, in <br />\nwhich the code get’s highlighted according to the currently active <br />\nfunctions. He named it a heatmap for code :)</p>\n\n<h3 id=\"javascriptjits\">JavaScript JITs</h3>\n\n<p><a href=\"http://twitter.com/dmandelin\">David Mandelin</a> and <a href=\"https://twitter.com/iamdvander\">David\nAnderson</a> dived into the world of <br />\nJavaScript JITs afterwards. They talked about typed and untyped JITs and <br />\nhow JavaScript is now only 2-3 times slower than C. Awesome! The <br />\nexplaination have been including the way, JavaScript is turned into <br />\nAssembler and how it is optimized using code rewriting and dynamic <br />\nmapping. This talk really reminds me of my studies :D</p>\n\n<h3 id=\"domimplementationtechniques\">DOM implementation techniques</h3>\n\n<p><a href=\"http://twitter.com/marijnjh\">Marijn Haverbeke</a> talked about the DOM. He\ndescribed problems one should avoid while developing frontend stuff. <br />\nAccording to that you should avoid reading the DOM as much as you can <br />\nwhile you are manipulating it. Doing so will mark the DOM nodes as dirty <br />\nwithout re-rendering it at all. So you should first manipulate it as <br />\nmuch as possible and the read properties of it. Another thing I’ve <br />\nlearned, was, that DOM implementations are trying to index the nodes. <br />\nThey differ between ID usage, class usage, tag name usage and more <br />\nsemantic usage, which are completely unindexed. So selecting nodes via a <br />\nclass will be much faster than using a semantic selector like “:hover”.</p>\n\n<h3 id=\"html5gameenginedevelopment\">HTML5 Game Engine development</h3>\n\n<p>The talk I was looking forward the most, was this one by <a href=\"http://twitter.com/pbakaus\">Paul <br />\nBakaus</a>. He reviewed the last two years <br />\nlooking back at Dextrose AG and the lessons learned since then. He <br />\nannounced, that Zynga is open-sourcing four of their libraries, two of <br />\nthem just this day. First thing was <br />\n<a href=\"https://github.com/zynga/viewporter\">ViewPorter</a>, which will maximize\nthe Viewport on mobile devices and take care of things like positioning <br />\nof elements at [Bottom: 0, Left: 0]. Second one was <br />\n<a href=\"https://github.com/zynga/scroller\">Scroller</a>, which unifies swiping\nguesteres and mouse dragging in order to move the viewport correctly <br />\nover an clipped content. The library also allows sticking to the <br />\nviewport to specific element borders.</p>\n\n<p>Besides that, he says, that he used external CSS Animations and <br />\nTransitions in order to get performant graphics calculation. This is no <br />\nlonger needed. Inline CSS will perform exactly as fast as external CSS <br />\nis doing. Furthermore the Canvas is sometimes no more slower than DOM <br />\nusage. This has totally changed in the last two years.</p>\n\n<p>Awesome talk!</p>\n\n<h3 id=\"webintents\">Web Intents</h3>\n\n<p><a href=\"http://twitter.com/paul_kinlan\">Paul Kinlin</a> and <a href=\"http://twitter.com/jankleinert\">Jan\nKleinert</a> from Google followed with some <br />\npretty nice and interesting talk. They first outlined, that it is a pain <br />\nin the ass to edit an existing photo in the web and then send it to <br />\nmultiple services. They explained, that there should be better <br />\ninter-application communication and presented <a href=\"http://webintents.org/\">Web <br />\nIntents</a>. Web Intents is basically based on <br />\nadditional meta data of the websites. On the server side you can define <br />\nroutes for specific verbs. The client then calls those verbs via a <br />\njavascript library and cann send and receive data from the server. They <br />\nshowed an example in which they first took a picture from a website, <br />\nthen manipulated it with a web editing tool and afterwards saved it on <br />\nanother webservice.</p>\n\n<p>Pretty interesting!</p>\n\n<h3 id=\"introtokendouithejsdevelopersword\">Intro to Kendo UI: The JS Developer Sword</h3>\n\n<p>Following this very exciting talks, I did the failure to visit the <br />\n<a href=\"http://www.kendoui.com/\">Kendo UI</a> talk by <a href=\"http://twitter.com/alex_gyoshev\">Alexander\nGyoshev</a>. Neither the speaker was very <br />\ninteresting nor the topic was well presented. After the talk I really <br />\nhad no clue why to use the framework or what is possible with it… IMHO <br />\nit is yet another UI Framework based on jQuery. Sorry folks.</p>\n\n<h3 id=\"messingwithjavascriptandthedomtomeasurenetworkperformancecharacteristics\">Messing with JavaScript and the DOM to measure network performance characteristics</h3>\n\n<p><a href=\"http://twitter.com/bluesmoon\">Phillip Tellis</a> did a great job by\ntelling us how to measure the network performance of a client via <br />\nJavaScript. He explained parts of the communication between client and <br />\nserver and pointed to some problems you have when measuring the network. <br />\nHe explained basics of the <br />\n<a href=\"http://yahoo.github.com/boomerang/doc/\">Boomerang</a> project and\nfurthermore went into details about port profiling of the clients <br />\nnetwork. Very very cool!</p>\n\n<h3 id=\"beyondjavascript\">Beyond JavaScript</h3>\n\n<p>In this mindblowing talk <a href=\"http://twitter.com/jakobmattsson\">Jakob <br />\nMattsson</a> talked about the not so <br />\ndynamic programming languages out there and told the listeners that it <br />\nwould be a very fail to design programming languages with the question <br />\n“What can it do?” in mind. You should much more thing about “What can’t\nbe done with it?”. Problem with the so called dynamic languages today <br />\nis, that you can’t change keywords or rewrite the syntax the way you <br />\nwant. So you are forced to use the function keyword and to accept the <br />\nor-operator as is. He also pointed to an upcoming open-source project by <br />\nhim or his Company Burt.</p>\n\n<h3 id=\"emscripten\">Emscripten</h3>\n\n<p>The last scheduled talk at this day was by <a href=\"https://twitter.com/#!/aazakai\">Alon <br />\nZakai</a> about <br />\n<a href=\"http://emscripten.org/\">Emscripten</a>. The Mozilla guy presented a\nproject which transforms LLVM Bytecode into JavaScript code. Doing so he <br />\nwas able to create a bunch of demos available <br />\n<a href=\"https://github.com/kripken/emscripten/wiki\">here</a>. One of them (which\nwas also very well presented) is the Python environment, which actually <br />\nhandles datatypes correctly and is behaving most likely as Python would. <br />\nThe guy also talked about common pitfalls, e.g. manually deletion of <br />\nobjects and minor problems with javascript runtimes.</p>\n\n<h3 id=\"jslol\">JSLOL</h3>\n\n<p>I was almost on my way to the train when Malte Ubl stopped everyone and <br />\nannounced a further talk. Entering the stage was Mr. JS himself, talking <br />\nabout the current state of ECMAScript 6. Brendan talked about the <br />\ntriangle operator doing inheritance between classes (smth like Class \\&lt;| <br />\nBase). Furthermore he said, that this is a somehow strange syntax and <br />\nthat they were thinking about the monocle-mustache operator (smth like <br />\nClass.{a:1, b:2}). In addition he presented default values for functions <br />\nand much more. He finally announced the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts\">official draft of the <br />\nspecification</a>. <br />\nSomeone btw. requested the .js-TLD. Brendan will talk about that with <br />\nES6 commitee. I finally got this <a href=\"http://repl.it/\">link</a>, where it is <br />\npossible to test ES6 in the web.</p>\n\n<h3 id=\"talklisting\">Talk-Listing</h3>\n\n<p><a href=\"https://gist.github.com/1256066\">This gist is listing all the related resources of the\ntalks.</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-10-02T12:25:00.000Z","created_by":1,"updated_at":"2011-10-02T12:25:00.000Z","updated_by":1,"published_at":"2011-10-02T12:25:00.000Z","published_by":1},{"id":15,"uuid":"0dd99723-88d3-45f1-8188-388155b7df40","title":"Hey, I just started using Sequelize and was wondering if you support inserting BLOB data? If not, can you recommend some solution? Thanks!","slug":"hey-i-just-started-using-sequelize-and-was-wondering","markdown":"Hmm you are right, that’s missing :) Can you please open a tickket on\ngithub ? For the moment i recommend using a text column and manually\nconverting the data.\n\nYou can also send me a pull request if you want to. if so, don’t forget\nthe tests ;)\n","html":"<p>Hmm you are right, that’s missing :) Can you please open a tickket on <br />\ngithub ? For the moment i recommend using a text column and manually <br />\nconverting the data.</p>\n\n<p>You can also send me a pull request if you want to. if so, don’t forget <br />\nthe tests ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-10-02T09:09:01.000Z","created_by":1,"updated_at":"2011-10-02T09:09:01.000Z","updated_by":1,"published_at":"2011-10-02T09:09:01.000Z","published_by":1},{"id":16,"uuid":"c17b70b4-762f-4be9-8784-0bc713aede28","title":"JSConf.EU","slug":"jsconf-eu","markdown":"This weekend I will pause writing my master thesis\n(about[sequelize](http://www.sequelizejs.com)btw.) andattending the\njavascript conference[JSConf.EU](http://jsconf.eu)for the first time.\nDoing so, I will hopefully get a lot of inspiration for future work and\nprojects. I will every once and while post about some topics, not sure\nif in the blog or via[twitter](http://twitter.com/sdepold).\n\nThis is my schedule for the next two days:\n\n**Day 1**\n\nBreakfast 2011-10-01 08:30\n\nOpening 2011-10-01 09:15\n\nPlask 2011-10-01 09:30\n\njsPerf (upstairs) 2011-10-01 10:30\n\nKaffeepause 2011-10-01 11:00\n\njsTools 2011-10-01 11:15\n\nMittag 2011-10-01 12:45\n\nJITs 2011-10-01 11:45\n\nDOM implementation techniques 2011-10-01 12:15\n\nHTML5 Game Engine development 2011-10-01 13:45\n\nWeb Intents 2011-10-01 14:30\n\nKaffee 2011-10-01 15:15\n\nKendo UI (upstairs) 2011-10-01 15:30\n\nNetwork performance (upstairs) 2011-10-01 16:00\n\nBeyond JavaScript (upstairs) 2011-10-01 16:30\n\nPause 2011-10-01 17:00\n\nEmscripten 2011-10-01 17:15\n\n**Day 2**\n\nFrhstck 2011-10-02 09:00\n\nOpening 2011-10-02 09:45\n\nSSJS 2011-10-02 10:00\n\nMobile HTML5 App 2011-10-02 10:45\n\nKaffee 2011-10-02 11:30\n\nJS Editors (upstairs) 2011-10-02 11:45\n\nsurface generation 2011-10-02 12:15\n\npolyfilling the gaps 2011-10-02 12:45\n\nMittag 2011-10-02 13:15\n\nall your browsers are belong to me 2011-10-02 14:15\n\nJS Compilers (upstairs) 2011-10-02 14:45\n\nnode modules mit V8 (upstairs) 2011-10-02 15:15\n\nKaffee 2011-10-02 15:45\n\njsmad 2011-10-02 16:00\n\ngarbage collection 2011-10-02 16:30\n\nPause 2011-10-02 17:00\n\nwhy do we need two eyes? 2011-10-02 17:15\n\nend to negativity 2011-10-02 18:00\n\nclosing 2011-10-02 18:45\n\ngruppen foto 2011-10-02 19:00\n","html":"<p>This weekend I will pause writing my master thesis <br />\n(about<a href=\"http://www.sequelizejs.com\">sequelize</a>btw.) andattending the\njavascript conference<a href=\"http://jsconf.eu\">JSConf.EU</a>for the first time. <br />\nDoing so, I will hopefully get a lot of inspiration for future work and <br />\nprojects. I will every once and while post about some topics, not sure <br />\nif in the blog or via<a href=\"http://twitter.com/sdepold\">twitter</a>.</p>\n\n<p>This is my schedule for the next two days:</p>\n\n<p><strong>Day 1</strong></p>\n\n<p>Breakfast 2011-10-01 08:30</p>\n\n<p>Opening 2011-10-01 09:15</p>\n\n<p>Plask 2011-10-01 09:30</p>\n\n<p>jsPerf (upstairs) 2011-10-01 10:30</p>\n\n<p>Kaffeepause 2011-10-01 11:00</p>\n\n<p>jsTools 2011-10-01 11:15</p>\n\n<p>Mittag 2011-10-01 12:45</p>\n\n<p>JITs 2011-10-01 11:45</p>\n\n<p>DOM implementation techniques 2011-10-01 12:15</p>\n\n<p>HTML5 Game Engine development 2011-10-01 13:45</p>\n\n<p>Web Intents 2011-10-01 14:30</p>\n\n<p>Kaffee 2011-10-01 15:15</p>\n\n<p>Kendo UI (upstairs) 2011-10-01 15:30</p>\n\n<p>Network performance (upstairs) 2011-10-01 16:00</p>\n\n<p>Beyond JavaScript (upstairs) 2011-10-01 16:30</p>\n\n<p>Pause 2011-10-01 17:00</p>\n\n<p>Emscripten 2011-10-01 17:15</p>\n\n<p><strong>Day 2</strong></p>\n\n<p>Frhstck 2011-10-02 09:00</p>\n\n<p>Opening 2011-10-02 09:45</p>\n\n<p>SSJS 2011-10-02 10:00</p>\n\n<p>Mobile HTML5 App 2011-10-02 10:45</p>\n\n<p>Kaffee 2011-10-02 11:30</p>\n\n<p>JS Editors (upstairs) 2011-10-02 11:45</p>\n\n<p>surface generation 2011-10-02 12:15</p>\n\n<p>polyfilling the gaps 2011-10-02 12:45</p>\n\n<p>Mittag 2011-10-02 13:15</p>\n\n<p>all your browsers are belong to me 2011-10-02 14:15</p>\n\n<p>JS Compilers (upstairs) 2011-10-02 14:45</p>\n\n<p>node modules mit V8 (upstairs) 2011-10-02 15:15</p>\n\n<p>Kaffee 2011-10-02 15:45</p>\n\n<p>jsmad 2011-10-02 16:00</p>\n\n<p>garbage collection 2011-10-02 16:30</p>\n\n<p>Pause 2011-10-02 17:00</p>\n\n<p>why do we need two eyes? 2011-10-02 17:15</p>\n\n<p>end to negativity 2011-10-02 18:00</p>\n\n<p>closing 2011-10-02 18:45</p>\n\n<p>gruppen foto 2011-10-02 19:00</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-10-01T09:30:00.000Z","created_by":1,"updated_at":"2011-10-01T09:30:00.000Z","updated_by":1,"published_at":"2011-10-01T09:30:00.000Z","published_by":1},{"id":17,"uuid":"1eead0a0-af36-4280-9575-fb33a0ba562f","title":"Changes in Sequelize 1.0.0","slug":"changes-in-sequelize-1-0-0","markdown":"With Sequelize 1.0.0 the project was completly rewritten and had some\nmajor api changes, which will break your app, if you dont fix em. This\npost summarizes all changes and points out improvements and new\nfeatures.\n\n### Logging\n\nDisable logging of Sequelize is not longer realized via the options\n*disableLogging:true*, but with *logging:false*. So you now have to do\nthis:\n\n> new Sequelize(config.database, config.username, config.password, { \\\n> logging: false\\\n> })\n\n### Chaining\n\n*Sequelize.chainQueries* was replaced by *Sequelize.Utils.QueryChainer*.\nThe API for that is:\n\n> new Sequelize.Utils.QueryChainer\\\n>  .add(person.save())\\\n>  .add(pet.save())\\\n>  .run()\\\n> .on(success, function() { // done :) })\n\n### Instantiation\n\nThe instantiation of models has changed:\n\n> // Before\\\n>  new Model({attr1: 1, attr2: 2}).save()\\\n> \\\n>  //Now\\\n>  Model.build({…}).save()\\\n>  // to first create the instance and save it afterwards or…\\\n> \\\n> Model.create({…})\\\n>  // to create it and directly write it to the database\n\n### Listeners\n\nSequelize changed from callback-driven to listener-driven architecture.\nSo you now have to do\n\n> Model.create({a:1})\\\n> .on(success, function(model){})\\\n> .on(failure, function(err){})\n\ninstead of\n\n> new Model({a:1}).save(function(err, model) {})\n\n### Syncing\n\nSyncing sequelize is the same way then before, but got some convenience:\n\n> //Before\\\n>  Sequelize.drop(function(){\\\n>  Sequelize.sync(function(){ })\\\n>  })\\\n> \\\n>\n> //Now\\\n>  Sequelize.sync({force: true}).on(‘success’, function(){ })\n\n### New stuff / Other changes\n\nAdded a count method to Model:\n\n> Model.count().on(success, function(num) {})\n\nAdded option passing everywhere:\n\n> Model.count({where: {attr1: 1}})\\\n> Model.find({where: {attr1: 1}})\\\n> Model.findAll({where: {attr1: 1}})\\\n> //….\\\n> //[Take a look at this for further\n> information.](http://www.sequelizejs.com/?active=find-objects#find-objects)\n\nAdded more options for Model definition: unique, primaryKey,\nautoIncrement. [Take a look at\nthis](http://www.sequelizejs.com/?active=usage#usage).\n\nSome sequelize options have changed:\n\n-   Don’t add timestamp attributes: timestamps: false\n-   Don’t delete things from the database: paranoid: true\n-   Use underscore names instead of camelcase: underscore: true\n-   Don’t pluralize table names: freezeTableName: true\n\nFile import changed. The imported file should only return a single\nfunction. Take a look at the usage section on the Sequelize page.\n\nThe association API has changed. Please take a deeper look at\n[this](http://www.sequelizejs.com/?active=associations#associations).\n\nThere might be more stuff, but I dunno them at the moment :D Have fun!\n\nAnd btw. … expect more stuff in the future. I will write about sequelize\nin my master thesis :)\n","html":"<p>With Sequelize 1.0.0 the project was completly rewritten and had some <br />\nmajor api changes, which will break your app, if you dont fix em. This <br />\npost summarizes all changes and points out improvements and new <br />\nfeatures.</p>\n\n<h3 id=\"logging\">Logging</h3>\n\n<p>Disable logging of Sequelize is not longer realized via the options <br />\n<em>disableLogging:true</em>, but with <em>logging:false</em>. So you now have to do\nthis:</p>\n\n<blockquote>\n  <p>new Sequelize(config.database, config.username, config.password, { \\\n  logging: false\\\n  })</p>\n</blockquote>\n\n<h3 id=\"chaining\">Chaining</h3>\n\n<p><em>Sequelize.chainQueries</em> was replaced by <em>Sequelize.Utils.QueryChainer</em>.\nThe API for that is:</p>\n\n<blockquote>\n  <p>new Sequelize.Utils.QueryChainer\\\n   .add(person.save())\\\n   .add(pet.save())\\\n   .run()\\\n  .on(success, function() { // done :) })</p>\n</blockquote>\n\n<h3 id=\"instantiation\">Instantiation</h3>\n\n<p>The instantiation of models has changed:</p>\n\n<blockquote>\n  <p>// Before\\\n   new Model({attr1: 1, attr2: 2}).save()\\\n  \\\n   //Now\\\n   Model.build({…}).save()\\\n   // to first create the instance and save it afterwards or…\\\n  \\\n  Model.create({…})\\\n   // to create it and directly write it to the database</p>\n</blockquote>\n\n<h3 id=\"listeners\">Listeners</h3>\n\n<p>Sequelize changed from callback-driven to listener-driven architecture. <br />\nSo you now have to do</p>\n\n<blockquote>\n  <p>Model.create({a:1})\\\n  .on(success, function(model){})\\\n  .on(failure, function(err){})</p>\n</blockquote>\n\n<p>instead of</p>\n\n<blockquote>\n  <p>new Model({a:1}).save(function(err, model) {})</p>\n</blockquote>\n\n<h3 id=\"syncing\">Syncing</h3>\n\n<p>Syncing sequelize is the same way then before, but got some convenience:</p>\n\n<blockquote>\n  <p>//Before\\\n   Sequelize.drop(function(){\\\n   Sequelize.sync(function(){ })\\\n   })\\\n  \\</p>\n  \n  <p>//Now\\\n   Sequelize.sync({force: true}).on(‘success’, function(){ })</p>\n</blockquote>\n\n<h3 id=\"newstuffotherchanges\">New stuff / Other changes</h3>\n\n<p>Added a count method to Model:</p>\n\n<blockquote>\n  <p>Model.count().on(success, function(num) {})</p>\n</blockquote>\n\n<p>Added option passing everywhere:</p>\n\n<blockquote>\n  <p>Model.count({where: {attr1: 1}})\\\n  Model.find({where: {attr1: 1}})\\\n  Model.findAll({where: {attr1: 1}})\\\n  //….\\\n  //<a href=\"http://www.sequelizejs.com/?active=find-objects#find-objects\">Take a look at this for further\n  information.</a></p>\n</blockquote>\n\n<p>Added more options for Model definition: unique, primaryKey, <br />\nautoIncrement. <a href=\"http://www.sequelizejs.com/?active=usage#usage\">Take a look at <br />\nthis</a>.</p>\n\n<p>Some sequelize options have changed:</p>\n\n<ul>\n<li>Don’t add timestamp attributes: timestamps: false</li>\n<li>Don’t delete things from the database: paranoid: true</li>\n<li>Use underscore names instead of camelcase: underscore: true</li>\n<li>Don’t pluralize table names: freezeTableName: true</li>\n</ul>\n\n<p>File import changed. The imported file should only return a single <br />\nfunction. Take a look at the usage section on the Sequelize page.</p>\n\n<p>The association API has changed. Please take a deeper look at <br />\n<a href=\"http://www.sequelizejs.com/?active=associations#associations\">this</a>.</p>\n\n<p>There might be more stuff, but I dunno them at the moment :D Have fun!</p>\n\n<p>And btw. … expect more stuff in the future. I will write about sequelize <br />\nin my master thesis :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-05-28T17:55:00.000Z","created_by":1,"updated_at":"2011-05-28T17:55:00.000Z","updated_by":1,"published_at":"2011-05-28T17:55:00.000Z","published_by":1},{"id":18,"uuid":"80b14862-138e-4aa6-a1ca-f2aa63b94067","title":"[sdepold] Sharing Rubymine preferences via Dropbox","slug":"sdepold-sharing-rubymine-preferences-via-dropbox","markdown":"[devanda](http://devblog.dawanda.com/post/5827128711):\n\n> ### Motivation\n>\n> If you are using Rubymine (like \\~50% of the DaWanda devs is), you\n> might have got the idea of sharing your preferenceswith multiple\n> computers. Because most of us are coding on Apple hardware, this\n> description is for MacOSX, butwill work similarly on linux as well.\n>\n> ### The naive way\n>\n> When thinking about sharing stuff on multiple devices, you will\n> stumble across Dropbox. The first and obvious way is movingyour\n> preferences folder into it and symlinking it into the origin place:\n>\n> > mv \\~/Library/Preferences/RubyMine31 \\~/Dropbox/System/Preferences/\\\n> > ln -s \\~/Dropbox/System/Preferences/RubyMine31\n> > \\~/Library/Preferences/RubyMine31\n>\n> When starting RubyMine for the next time, it will complain about a\n> missing preferences folder and bootup some strange environmentin which\n> you can work almost normally but have no shortcuts etc. The very next\n> thing I tried was symlink without the -s flag.This will fail due to\n> MacOSX missing support of hardlinks for directories.\n>\n> ### Solution\n>\n> After googling for a while, I found [this discussion on\n> StackOverflow](http://stackoverflow.com/questions/1432540/creating-directory-hard-links-in-macos-x/1547720#1547720).\n> It explains how to compile a binary for creating directory symlinks.\n> So copy the following snippet and paste it into your favorite place\n> for binaries and shell scripts (because I like sharing custom binaries\n> via Dropbox it is \\~/Dropbox/System/Bin/hlink.c for me).\n>\n> > \\#include \\<unistd.h\\>\\\n> >  \\#include \\<stdio.h\\>\\\n> > \\\n> >  int main(int argc, char\\* argv[]) {\\\n> >  if (argc != 3) {\\\n> >  fprintf(stderr,Use: hlink \\<src\\_dir\\> \\<target\\_dir\\>\\\\n);\\\n> >  return 1;\\\n> >  }\\\n> >  int ret = link(argv[1],argv[2]);\\\n> >  if (ret != 0)\\\n> >  perror(link);\\\n> >  return ret;\\\n> > }\n>\n> Afterwards cd into that specific folder and do this:\n>\n> > cd \\~/Dropbox/System/Bin\\\n> >  gcc hlink.c -o hlink\n>\n> And finally:\n>\n> > mv \\~/Library/Preferences/RubyMine31\\~/Dropbox/System/Preferences/\\\n> >  ./hlink \\~/Dropbox/System/Preferences/RubyMine31\n> > \\~/Library/Preferences/RubyMine31\n>\n> When running RubyMine for the next time, everything should be just as\n> before!\n>\n> Have fun,\\\n> sdepold\n","html":"<p><a href=\"http://devblog.dawanda.com/post/5827128711\">devanda</a>:</p>\n\n<blockquote>\n  <h3 id=\"motivation\">Motivation</h3>\n  \n  <p>If you are using Rubymine (like \\~50% of the DaWanda devs is), you\n  might have got the idea of sharing your preferenceswith multiple\n  computers. Because most of us are coding on Apple hardware, this\n  description is for MacOSX, butwill work similarly on linux as well.</p>\n  \n  <h3 id=\"thenaiveway\">The naive way</h3>\n  \n  <p>When thinking about sharing stuff on multiple devices, you will\n  stumble across Dropbox. The first and obvious way is movingyour\n  preferences folder into it and symlinking it into the origin place:</p>\n  \n  <blockquote>\n    <p>mv \\~/Library/Preferences/RubyMine31 \\~/Dropbox/System/Preferences/\\\n    ln -s \\~/Dropbox/System/Preferences/RubyMine31\n    \\~/Library/Preferences/RubyMine31</p>\n  </blockquote>\n  \n  <p>When starting RubyMine for the next time, it will complain about a\n  missing preferences folder and bootup some strange environmentin which\n  you can work almost normally but have no shortcuts etc. The very next\n  thing I tried was symlink without the -s flag.This will fail due to\n  MacOSX missing support of hardlinks for directories.</p>\n  \n  <h3 id=\"solution\">Solution</h3>\n  \n  <p>After googling for a while, I found <a href=\"http://stackoverflow.com/questions/1432540/creating-directory-hard-links-in-macos-x/1547720#1547720\">this discussion on\n  StackOverflow</a>.\n  It explains how to compile a binary for creating directory symlinks.\n  So copy the following snippet and paste it into your favorite place\n  for binaries and shell scripts (because I like sharing custom binaries\n  via Dropbox it is \\~/Dropbox/System/Bin/hlink.c for me).</p>\n  \n  <blockquote>\n    <p>#include \\<unistd.h\\>\\\n     #include \\<stdio.h\\>\\\n    \\\n     int main(int argc, char* argv[]) {\\\n     if (argc != 3) {\\\n     fprintf(stderr,Use: hlink \\<src\\_dir\\> \\<target\\_dir\\>\\n);\\\n     return 1;\\\n     }\\\n     int ret = link(argv[1],argv[2]);\\\n     if (ret != 0)\\\n     perror(link);\\\n     return ret;\\\n    }</p>\n  </blockquote>\n  \n  <p>Afterwards cd into that specific folder and do this:</p>\n  \n  <blockquote>\n    <p>cd \\~/Dropbox/System/Bin\\\n     gcc hlink.c -o hlink</p>\n  </blockquote>\n  \n  <p>And finally:</p>\n  \n  <blockquote>\n    <p>mv \\~/Library/Preferences/RubyMine31\\~/Dropbox/System/Preferences/\\\n     ./hlink \\~/Dropbox/System/Preferences/RubyMine31\n    \\~/Library/Preferences/RubyMine31</p>\n  </blockquote>\n  \n  <p>When running RubyMine for the next time, everything should be just as\n  before!</p>\n  \n  <p>Have fun,\\\n  sdepold</p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-05-26T09:55:35.000Z","created_by":1,"updated_at":"2011-05-26T09:55:35.000Z","updated_by":1,"published_at":"2011-05-26T09:55:35.000Z","published_by":1},{"id":19,"uuid":"8994caed-c623-41b5-80a2-e729b9a9e961","title":"svalts:\n\nSpiderpig - by Thong Le\n(Via: herochan)","slug":"spiderpig","markdown":"[svalts](http://svalts.tumblr.com/post/5632923551/spiderpig):\n\n> ***Spiderpig*** - by [Thong\n> Le](http://darklord381.deviantart.com/gallery/)\n>\n> (Via: [herochan](http://herochan.com/post/5632784807/spiderpig))\n\n![](http://37.media.tumblr.com/tumblr_llfnozllmT1qd9jlto1_1280.jpg)\n","html":"<p><a href=\"http://svalts.tumblr.com/post/5632923551/spiderpig\">svalts</a>:</p>\n\n<blockquote>\n  <p><strong><em>Spiderpig</em></strong> - by <a href=\"http://darklord381.deviantart.com/gallery/\">Thong\n  Le</a></p>\n  \n  <p>(Via: <a href=\"http://herochan.com/post/5632784807/spiderpig\">herochan</a>)</p>\n</blockquote>\n\n<p><img src=\"http://37.media.tumblr.com/tumblr_llfnozllmT1qd9jlto1_1280.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-05-26T09:54:42.000Z","created_by":1,"updated_at":"2011-05-26T09:54:42.000Z","updated_by":1,"published_at":"2011-05-26T09:54:42.000Z","published_by":1},{"id":20,"uuid":"6b520199-bb6f-4dd1-b0ee-a3c20353f970","title":"I'm looking at \"Connecting Up MongoDB\" at this page http://dailyjs.com/2010/11/08/node-tutorial-2/<br />\r\n<br />\r\nI've looked thru the examples at...","slug":"im-looking-at-connecting-up-mongodb-at-this-page","markdown":"hey there, thanks tumblr i just got your message now :D I also have no\nclue when you asked me. If I understand right, you want to define your\nmodels in an extra file?\n","html":"<p>hey there, thanks tumblr i just got your message now :D I also have no <br />\nclue when you asked me. If I understand right, you want to define your <br />\nmodels in an extra file?</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-05-04T06:53:00.000Z","created_by":1,"updated_at":"2011-05-04T06:53:00.000Z","updated_by":1,"published_at":"2011-05-04T06:53:00.000Z","published_by":1},{"id":21,"uuid":"f468973d-84c3-4035-b854-33ed1c50f7e9","title":"Working with ssh keys","slug":"working-with-ssh-keys","markdown":"This is mostly a reminder for myself. But maybe you are also interested\nin this :)\n\nSo this is the way you can access a server via ssh without getting asked\nabout passwords:\n\n> ​1. Create a SSH key. You might want to take a look at\n> [this](http://help.github.com/mac-set-up-git/) to get one.\n>\n> ​2. Copy the result of the following command:cat .ssh/id\\_rsa.pub\n>\n> ​3. Connect to the server: ssh user@server.tld + Enter password\n>\n> ​4. Create the .ssh folder if not yet done:mkdir \\~/.ssh\n>\n> ​5. pico \\~/.ssh/authorized\\_keys =\\> Paste the clipboard.\n>\n> ​6. exit\n>\n> ​7. ssh user@server.tld =\\> You should now be connected without\n> entering a password!\n\nHF\n","html":"<p>This is mostly a reminder for myself. But maybe you are also interested <br />\nin this :)</p>\n\n<p>So this is the way you can access a server via ssh without getting asked <br />\nabout passwords:</p>\n\n<blockquote>\n  <p>​1. Create a SSH key. You might want to take a look at\n  <a href=\"http://help.github.com/mac-set-up-git/\">this</a> to get one.</p>\n  \n  <p>​2. Copy the result of the following command:cat .ssh/id_rsa.pub</p>\n  \n  <p>​3. Connect to the server: ssh user@server.tld + Enter password</p>\n  \n  <p>​4. Create the .ssh folder if not yet done:mkdir \\~/.ssh</p>\n  \n  <p>​5. pico \\~/.ssh/authorized_keys => Paste the clipboard.</p>\n  \n  <p>​6. exit</p>\n  \n  <p>​7. ssh user@server.tld => You should now be connected without\n  entering a password!</p>\n</blockquote>\n\n<p>HF</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-05-02T18:02:54.000Z","created_by":1,"updated_at":"2011-05-02T18:02:54.000Z","updated_by":1,"published_at":"2011-05-02T18:02:54.000Z","published_by":1},{"id":22,"uuid":"a3194ad1-52f6-42b4-8aa6-f8b5a6eabca3","title":"Is there anyone out who has ever got senseful things via the app stores genius function? I&#8217;ve just fucking installed nova2 so &#8230; wtf?...","slug":"is-there-anyone-out-who-has-ever-got-senseful","markdown":"Is there anyone out who has ever got senseful things via the app stores\ngenius function? I’ve just fucking installed nova2 so … wtf? because of\ntrenches???\n\n![](http://38.media.tumblr.com/tumblr_lgr2ccTZvL1qbce7po1_1280.jpg)\n","html":"<p>Is there anyone out who has ever got senseful things via the app stores <br />\ngenius function? I’ve just fucking installed nova2 so … wtf? because of <br />\ntrenches???</p>\n\n<p><img src=\"http://38.media.tumblr.com/tumblr_lgr2ccTZvL1qbce7po1_1280.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-02-17T07:04:50.000Z","created_by":1,"updated_at":"2011-02-17T07:04:50.000Z","updated_by":1,"published_at":"2011-02-17T07:04:50.000Z","published_by":1},{"id":23,"uuid":"70992f3b-002b-4e08-8531-3a3a60c6b9bb","title":"That&#8217;s the way the internet works! via http://www.lowbird.com/data/images/2011/01/hayungs-website.jpg","slug":"thats-the-way-the-internet-works-via","markdown":"That’s the way the internet works! via\n[http://www.lowbird.com/data/images/2011/01/hayungs-website.jpg](http://www.lowbird.com/data/images/2011/01/hayungs-website.jpg)\n\n![](http://38.media.tumblr.com/tumblr_lf9nq1XgNR1qbce7po1_1280.jpg)\n","html":"<p>That’s the way the internet works! via <br />\n<a href=\"http://www.lowbird.com/data/images/2011/01/hayungs-website.jpg\">http://www.lowbird.com/data/images/2011/01/hayungs-website.jpg</a></p>\n\n<p><img src=\"http://38.media.tumblr.com/tumblr_lf9nq1XgNR1qbce7po1_1280.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-01-19T10:56:00.000Z","created_by":1,"updated_at":"2011-01-19T10:56:00.000Z","updated_by":1,"published_at":"2011-01-19T10:56:00.000Z","published_by":1},{"id":24,"uuid":"abc420d4-21b3-40f7-8a3c-79089d92396a","title":"Mac Dashboard Plugin for dict.cc","slug":"mac-dashboard-plugin-for-dict-cc","markdown":"**[Mac Dashboard Plugin for\ndict.cc](http://lipflip.org/articles/dictcc-dictionary-plugin)**\n\n[christianreber](http://www.christianreber.com/post/2668635234/mac-dashboard-plugin-for-dict-cc):\n\n> I use it nearly every day!\n","html":"<p><strong><a href=\"http://lipflip.org/articles/dictcc-dictionary-plugin\">Mac Dashboard Plugin for\ndict.cc</a></strong></p>\n\n<p><a href=\"http://www.christianreber.com/post/2668635234/mac-dashboard-plugin-for-dict-cc\">christianreber</a>:</p>\n\n<blockquote>\n  <p>I use it nearly every day!</p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-01-09T17:47:28.000Z","created_by":1,"updated_at":"2011-01-09T17:47:28.000Z","updated_by":1,"published_at":"2011-01-09T17:47:28.000Z","published_by":1},{"id":25,"uuid":"c8238cd8-2806-49c8-8558-a61cea2158c2","title":"Can the new mac store update already installed applications?","slug":"can-the-new-mac-store-update-already-installed","markdown":"**[Can the new mac store update already installed\napplications?](http://ifiboughtyourappalreadycaniupdateitthroughthemacappstore.com/)**\n\nThe Mac Store was just released and many people are wondering if the\nstore can just update already installed applications. The posted link\ngives you the answer :)\n","html":"<p><strong><a href=\"http://ifiboughtyourappalreadycaniupdateitthroughthemacappstore.com/\">Can the new mac store update already installed\napplications?</a></strong></p>\n\n<p>The Mac Store was just released and many people are wondering if the <br />\nstore can just update already installed applications. The posted link <br />\ngives you the answer :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-01-08T18:03:00.000Z","created_by":1,"updated_at":"2011-01-08T18:03:00.000Z","updated_by":1,"published_at":"2011-01-08T18:03:00.000Z","published_by":1},{"id":26,"uuid":"905dade2-35d7-4833-bcdf-b1481e49e1d2","title":"Creating spaces in the Mac OS X dock","slug":"creating-spaces-in-the-mac-os-x-dock","markdown":"**[Creating spaces in the Mac OS X dock](http://vimeo.com/18476877)**\n\nThis video shows a way to add spaces to the Mac OS X dock. This is great\nif you want to group programs. For example you could seperate multiple\nfolders into a specific group or split your iWork/Office suite from\nother stuff. IMHO the spaces could be a little bit less wide.\n\nAh and if you want more than one space, just re-run the mentioned\ncommand and kill the dock again.\n\nBTW. that’s the command:\n\n> defaults write com.apple.dock persistent-apps -array-add\n> ‘{“tile-type”=”spacer-tile”;}’\n","html":"<p><strong><a href=\"http://vimeo.com/18476877\">Creating spaces in the Mac OS X dock</a></strong></p>\n\n<p>This video shows a way to add spaces to the Mac OS X dock. This is great <br />\nif you want to group programs. For example you could seperate multiple <br />\nfolders into a specific group or split your iWork/Office suite from <br />\nother stuff. IMHO the spaces could be a little bit less wide.</p>\n\n<p>Ah and if you want more than one space, just re-run the mentioned <br />\ncommand and kill the dock again.</p>\n\n<p>BTW. that’s the command:</p>\n\n<blockquote>\n  <p>defaults write com.apple.dock persistent-apps -array-add\n  ‘{“tile-type”=”spacer-tile”;}’</p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2011-01-06T08:10:00.000Z","created_by":1,"updated_at":"2011-01-06T08:10:00.000Z","updated_by":1,"published_at":"2011-01-06T08:10:00.000Z","published_by":1},{"id":27,"uuid":"24eb1f47-6d38-47da-b08b-ff5fe39cec3c","title":"Just found this little typo in the iphone game “Funny Sango TD”… haha","slug":"just-found-this-little-typo-in-the-iphone-game","markdown":"Just found this little typo in the iphone game Funny Sango TD haha\n\n![](http://www.tumblr.com/photo/1280/sdepold/2467149645/1/tumblr_le0zytFiTT1qbce7p)\n","html":"<p>Just found this little typo in the iphone game Funny Sango TD haha</p>\n\n<p><img src=\"http://www.tumblr.com/photo/1280/sdepold/2467149645/1/tumblr_le0zytFiTT1qbce7p\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-12-26T08:08:00.000Z","created_by":1,"updated_at":"2010-12-26T08:08:00.000Z","updated_by":1,"published_at":"2010-12-26T08:08:00.000Z","published_by":1},{"id":28,"uuid":"d7b8ae11-1adb-41ca-9956-5dfc0ec4bd81","title":"ReTweetie","slug":"retweetie","markdown":"**[ReTweetie](http://nickpaulson.com/retweetie/)**\n\nOne major reason for switching from Tweetie for Mac to Echofon was the\nmissing native retweeting function. Nick Paulson just released\nReTweetie, which fixes that issue.\n","html":"<p><strong><a href=\"http://nickpaulson.com/retweetie/\">ReTweetie</a></strong></p>\n\n<p>One major reason for switching from Tweetie for Mac to Echofon was the <br />\nmissing native retweeting function. Nick Paulson just released <br />\nReTweetie, which fixes that issue.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-12-16T08:06:55.000Z","created_by":1,"updated_at":"2010-12-16T08:06:55.000Z","updated_by":1,"published_at":"2010-12-16T08:06:55.000Z","published_by":1},{"id":29,"uuid":"9c5eb41c-0e3b-4177-9382-703133138395","title":"Loading an image asynchronously in C#","slug":"loading-an-image-asynchronously-in-c","markdown":"**[Loading an image asynchronously in\nC\\#](http://hackingsilverlight.blogspot.com/2010/01/asynchronous-image-loading-in.html)**\n\nI just needed a way to load images asynchronously in a Windows Phone 7\napplication. This article explains the very nice way to go. I just\nshortened the presented code a little bit:\n\n> private void updateImage(Image i, Uri uri)\\\n> {\\\n>  WebClient client = new WebClient();\\\n> \\\n>  client.OpenReadCompleted += new\n> OpenReadCompletedEventHandler(delegate(object sender,\n> OpenReadCompletedEventArgs e) {\\\n>  BitmapImage imageToLoad = new BitmapImage();\\\n>  imageToLoad.SetSource(e.Result as Stream);\\\n>  i.Source = imageToLoad;\\\n>  });\\\n> \\\n>  client.OpenReadAsync(uri, uri.AbsoluteUri);\\\n> }\n\nThe method awaits an Image and an Uri object. Have fun :)\n","html":"<p><strong><a href=\"http://hackingsilverlight.blogspot.com/2010/01/asynchronous-image-loading-in.html\">Loading an image asynchronously in\nC#</a></strong></p>\n\n<p>I just needed a way to load images asynchronously in a Windows Phone 7 <br />\napplication. This article explains the very nice way to go. I just <br />\nshortened the presented code a little bit:</p>\n\n<blockquote>\n  <p>private void updateImage(Image i, Uri uri)\\\n  {\\\n   WebClient client = new WebClient();\\\n  \\\n   client.OpenReadCompleted += new\n  OpenReadCompletedEventHandler(delegate(object sender,\n  OpenReadCompletedEventArgs e) {\\\n   BitmapImage imageToLoad = new BitmapImage();\\\n   imageToLoad.SetSource(e.Result as Stream);\\\n   i.Source = imageToLoad;\\\n   });\\\n  \\\n   client.OpenReadAsync(uri, uri.AbsoluteUri);\\\n  }</p>\n</blockquote>\n\n<p>The method awaits an Image and an Uri object. Have fun :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-12-13T12:38:30.000Z","created_by":1,"updated_at":"2010-12-13T12:38:30.000Z","updated_by":1,"published_at":"2010-12-13T12:38:30.000Z","published_by":1},{"id":30,"uuid":"c7360d57-b603-40a8-b05f-7759118694a5","title":"Deploying a Node.JS web application with Express and nDistro","slug":"deploying-a-node-js-web-application-with-express-and","markdown":"As I finished my first real Node.JS app last week, I was looking for a\nnice way to deploy the application easily to my server. I found a very\nlong articleusing upstart and Spark, which I thought is way to\ncomplicated. I went on for another way and finally stopped at a project\ncalled [nDistro](http://github.com/visionmedia/ndistro), which is less a\ndeployment tool but a handy one for getting dependencies work.\n\n### Hello World\n\nBefore diving into the deployment stuff, let’s create an example\napplication printing *Hello World* in the browser:\n\n> [\\~/Projects] express HelloWorld\\\n>  create : HelloWorld\\\n>  create : HelloWorld/app.js\\\n>  create : HelloWorld/pids\\\n>  create : HelloWorld/views/partials\\\n>  create : HelloWorld/views/layout.jade\\\n>  create : HelloWorld/views/index.jade\\\n>  create : HelloWorld/public/stylesheets\\\n>  create : HelloWorld/public/stylesheets/style.less\\\n>  create : HelloWorld/public/javascripts\\\n>  create : HelloWorld/logs\\\n>  create : HelloWorld/public/images\\\n>  create : HelloWorld/test\\\n>  create : HelloWorld/test/app.test.js\n\n> [\\~/Projects] cd HelloWorld\\\n>  [\\~/Projects/HelloWorld] pico views/index.jade\n\n> \\#paste in the following\n\n> h1 Deploying a Node.JS application with Express and nDistro\\\n>  p Hello World!\n\n> [\\~/Projects/HelloWorld] node app.js\n\nHaving all needed libraries installed, you can just open your browser\nand visit <http://localhost:3000>! If you haven’t all the libraries…\nread on and get it running!\n\n### nDistro\n\nWith nDistro you can easily manage library dependencies, writing a\nscript containing used libraries. To install nDistro, just do:\n\n> cd /usr/local/bin && curl\n> [http://github.com/visionmedia/ndistro/raw/master/install](http://github.com/visionmedia/ndistro/raw/master/install)\n> | sh\n\nYou should now be able to run the *ndistro* command in your console:\n\n> [\\~/Projects/HelloWorld] ndistro\\\n>  Error: .ndistro not found in this directory\n\n### Getting the example running\n\nTo install all the dependencies you could use npm, which is great for\ndeveloping software locally, but which I would like to avoid in\nproduction.You probably ask why to avoid npm. Well, I like to seperate\ndependencies from the environment as much as I can. Dealing with nDistro\nis doing exactly that.\n\nTo prepare your project for nDistro, add the following line at the\nbeginning of *app.js*:\n\n> require.paths.unshift(\\_\\_dirname + “/lib/node”)\n\nThis will force Node.JS to look for libraries in that specific folder.\nRunning the app will fail with the following error:\n\n> [\\~/Projects/HelloWorld] node app.js\\\n>  node.js:275\\\n>  throw new Error(“Cannot find module ‘” + request + “’”);\\\n>  \\^\\\n>  Error: Cannot find module ‘express’\\\n>  at loadModule (node.js:275:15)\\\n>  at require (node.js:411:14)\\\n>  at Object. (/Users/prototype/Projects/HelloWorld/app.js:2:1)\\\n>  at Module.\\_compile (node.js:461:23)\\\n>  at Module.\\_loadScriptSync (node.js:468:10)\\\n>  at Module.loadSync (node.js:338:12)\\\n>  at Object.runMain (node.js:521:24)\\\n>  at node.js:751:10\n\nNow open the file .ndistro and add this:\n\n> module visionmedia express 1.0.0beta2\\\n>  module visionmedia jade\n\nRun *ndistro* in the app folder and watch the output:\n\n> [\\~/Projects/HelloWorld] ndistro\\\n>  … installing express 1.0.0beta2\\\n>  \\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\# 100,0%\\\n>  … installing bin/express\\\n>  … installing jade\\\n>  \\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\#\\# 100,0%\\\n>  … installation complete\n\nAs you will see, nDistro created a *modules* folder, which contains the\nsource code of all specified dependencies. Furthermore there will be a\nfolder called *lib/node*, which has links to the sources and which can\nbe required using the *require* command. What you actually wrote in that\n.ndistro file are definitions of github repositories. The syntax is:\n\n> module *user* *project*\n\nRunning the example app again should work now!\n\n**Note**: While developing your application make sure to write\ndependencies to your .ndistro file!\n\n### Prepare node with nDistro\n\nWhy I really like nDistro a lot is the fact that it can also generate a\nfully working node binary. That mean you don’t have to setup your\nenvironment including downloading and compiling node and it’s\ndependencies. Just add the following to your .ndistro:\n\n> node 0.1.104\n\n**Important note**: There are currently not all releases available, but\nAFAIK it should be in the future. Which versions of node are supported,\ncan be seen here:\n[http://github.com/visionmedia/nodes](http://github.com/visionmedia/nodes)\n\nRunning *ndistro* again, will add a node binary to the bin folder. So\nyou can now just run *./bin/node app.js*. Awesome!\n\nStarting the application this way, will make node look automatically\ninto the project’s lib folder, when calling the require method. So the\ninserted line (require.paths.unshift …) is now **obsolete** and can be\ndropped.\n\n### Setting up the server\n\nI use git for managing my source code, but using svn or any other way\nwill work either. At this time I assume,that your project is under\nsource control or that you can just get your code onto your server.\n\nSooo… connect to your server via SSH as root and execute the following\nlines. BTW: I have an Ubuntu server so thecommands might differ for\nother operating systems.\n\n> ssh root@yourserver.tld\\\n>  sudo useradd -d /srv/www/\\<projectUrl\\> \\<projectUrl\\>\\\n>  sudo passwd \\<projectUrl\\>\\\n>  cd /srv/www/\\\n>  mkdir \\<projectUrl\\>\\\n>  chown \\<projectUrl\\>:\\<projectUrl\\> ./\\<projectUrl\\>\n\nThis will create a new user named like the url, the project will be\navailable through. You can of course name it as you want to, but I am\ndoing it that way.\n\nTo setup apache do that:\n\n> pico /etc/apache2/sites-available/\\<projectUrl\\>\\\n>  ==\\>\\\n> \\<VirtualHost \\*:80\\>\\\n> ServerAdmin an@email.com\\\n> ServerName \\<projectUrl\\>\\\n> ServerAlias www.\\<projectUrl\\>\\\n> ProxyPass / http://localhost:\\<port\\>/\\\n> ProxyPassReverse / http://localhost:\\<port\\>/\\\n>  \\</VirtualHost\\>\\\n\n> ==\\>\\\n>  a2ensite \\<projectUrl\\>\\\n>  /etc/init.d/apache2 reload\n\nThe port is just the one your application listens on. The example app\nwill listen on port 3000.\n\n### Deploying the application\n\nNow that the server is prepared, we can go on and get the application\nrunning. Login with your newly created user:\n\n> ssh \\<projectUrl\\>@yourserver.tld\\\n>  \\# somehow checkout your code\\\n>  \\# e.g. git clone git@yourserver.tld:\\<projectUrl\\>\\\n>  mv \\<projectUrl\\>/\\* .\\\n>  rm -r \\<projectUrl\\>\\\n>  ndistro\\\n>  ./bin/node app.js\n\nThis will download the project from your repository, moves the content\nof the repository folder into the current one, install all dependencies\nvia ndistro and finally start the application. You should now be able to\naccess your app via the specific project url.\n\nYou should now test all of the applications functions to be sure, you\nfetched all dependencies in your .ndistro file. If the app crashes, take\na look at the console and fix that issue. If a library is missing, just\nadd it to .ndistro and commit it to source control once you finished.\nWhen everything works the way it should, start your application the\nfollowing way:\n\n> EXPRESS\\_ENV=production ./bin/node app.js \\> ./logs/production.log &\n\nThis will start the server in production mode and send all logging to\nlogs/production.log. The & at the end will send the server to the\nbackground, so that you can just go on using your console. If you want\nto check the log, use the tail command:\n\n> tail -f logs/production.log\n\n**Note:** If you stop the node server and restart it after some changes,\nyou maybe have to restart the apache as well, due to a still visible\n“Service not available” notification. Thanks for that note goes to\nRobert :)\n\n### Misc\n\nI highly recommend you to register for a monitoring service and let your\napplication be monitored. I’m using\n[UptimeRobot](http://www.uptimerobot.com/) which is free and will notify\nyou via E-Mail, SMS or Twitter once your server isbroken.\n\nI will take a look at upstart and Spark to checkout if this can be\nuseful somehow.\n\nLet me know if you got stuck or what could be explained better :)\n","html":"<p>As I finished my first real Node.JS app last week, I was looking for a <br />\nnice way to deploy the application easily to my server. I found a very <br />\nlong articleusing upstart and Spark, which I thought is way to <br />\ncomplicated. I went on for another way and finally stopped at a project <br />\ncalled <a href=\"http://github.com/visionmedia/ndistro\">nDistro</a>, which is less a <br />\ndeployment tool but a handy one for getting dependencies work.</p>\n\n<h3 id=\"helloworld\">Hello World</h3>\n\n<p>Before diving into the deployment stuff, let’s create an example <br />\napplication printing <em>Hello World</em> in the browser:</p>\n\n<blockquote>\n  <p>[\\~/Projects] express HelloWorld\\\n   create : HelloWorld\\\n   create : HelloWorld/app.js\\\n   create : HelloWorld/pids\\\n   create : HelloWorld/views/partials\\\n   create : HelloWorld/views/layout.jade\\\n   create : HelloWorld/views/index.jade\\\n   create : HelloWorld/public/stylesheets\\\n   create : HelloWorld/public/stylesheets/style.less\\\n   create : HelloWorld/public/javascripts\\\n   create : HelloWorld/logs\\\n   create : HelloWorld/public/images\\\n   create : HelloWorld/test\\\n   create : HelloWorld/test/app.test.js</p>\n  \n  <p>[\\~/Projects] cd HelloWorld\\\n   [\\~/Projects/HelloWorld] pico views/index.jade</p>\n  \n  <p>#paste in the following</p>\n  \n  <p>h1 Deploying a Node.JS application with Express and nDistro\\\n   p Hello World!</p>\n  \n  <p>[\\~/Projects/HelloWorld] node app.js</p>\n</blockquote>\n\n<p>Having all needed libraries installed, you can just open your browser <br />\nand visit <a href=\"http://localhost:3000\">http://localhost:3000</a>! If you haven’t all the libraries… <br />\nread on and get it running!</p>\n\n<h3 id=\"ndistro\">nDistro</h3>\n\n<p>With nDistro you can easily manage library dependencies, writing a <br />\nscript containing used libraries. To install nDistro, just do:</p>\n\n<blockquote>\n  <p>cd /usr/local/bin &amp;&amp; curl\n  <a href=\"http://github.com/visionmedia/ndistro/raw/master/install\">http://github.com/visionmedia/ndistro/raw/master/install</a>\n  | sh</p>\n</blockquote>\n\n<p>You should now be able to run the <em>ndistro</em> command in your console:</p>\n\n<blockquote>\n  <p>[\\~/Projects/HelloWorld] ndistro\\\n   Error: .ndistro not found in this directory</p>\n</blockquote>\n\n<h3 id=\"gettingtheexamplerunning\">Getting the example running</h3>\n\n<p>To install all the dependencies you could use npm, which is great for <br />\ndeveloping software locally, but which I would like to avoid in <br />\nproduction.You probably ask why to avoid npm. Well, I like to seperate <br />\ndependencies from the environment as much as I can. Dealing with nDistro <br />\nis doing exactly that.</p>\n\n<p>To prepare your project for nDistro, add the following line at the <br />\nbeginning of <em>app.js</em>:</p>\n\n<blockquote>\n  <p>require.paths.unshift(__dirname + “/lib/node”)</p>\n</blockquote>\n\n<p>This will force Node.JS to look for libraries in that specific folder. <br />\nRunning the app will fail with the following error:</p>\n\n<blockquote>\n  <p>[\\~/Projects/HelloWorld] node app.js\\\n   node.js:275\\\n   throw new Error(“Cannot find module ‘” + request + “’”);\\\n   \\^\\\n   Error: Cannot find module ‘express’\\\n   at loadModule (node.js:275:15)\\\n   at require (node.js:411:14)\\\n   at Object. (/Users/prototype/Projects/HelloWorld/app.js:2:1)\\\n   at Module._compile (node.js:461:23)\\\n   at Module._loadScriptSync (node.js:468:10)\\\n   at Module.loadSync (node.js:338:12)\\\n   at Object.runMain (node.js:521:24)\\\n   at node.js:751:10</p>\n</blockquote>\n\n<p>Now open the file .ndistro and add this:</p>\n\n<blockquote>\n  <p>module visionmedia express 1.0.0beta2\\\n   module visionmedia jade</p>\n</blockquote>\n\n<p>Run <em>ndistro</em> in the app folder and watch the output:</p>\n\n<blockquote>\n  <p>[\\~/Projects/HelloWorld] ndistro\\\n   … installing express 1.0.0beta2\\\n   ############################# 100,0%\\\n   … installing bin/express\\\n   … installing jade\\\n   ############################# 100,0%\\\n   … installation complete</p>\n</blockquote>\n\n<p>As you will see, nDistro created a <em>modules</em> folder, which contains the <br />\nsource code of all specified dependencies. Furthermore there will be a <br />\nfolder called <em>lib/node</em>, which has links to the sources and which can <br />\nbe required using the <em>require</em> command. What you actually wrote in that <br />\n.ndistro file are definitions of github repositories. The syntax is:</p>\n\n<blockquote>\n  <p>module <em>user</em> <em>project</em></p>\n</blockquote>\n\n<p>Running the example app again should work now!</p>\n\n<p><strong>Note</strong>: While developing your application make sure to write\ndependencies to your .ndistro file!</p>\n\n<h3 id=\"preparenodewithndistro\">Prepare node with nDistro</h3>\n\n<p>Why I really like nDistro a lot is the fact that it can also generate a <br />\nfully working node binary. That mean you don’t have to setup your <br />\nenvironment including downloading and compiling node and it’s <br />\ndependencies. Just add the following to your .ndistro:</p>\n\n<blockquote>\n  <p>node 0.1.104</p>\n</blockquote>\n\n<p><strong>Important note</strong>: There are currently not all releases available, but\nAFAIK it should be in the future. Which versions of node are supported, <br />\ncan be seen here: <br />\n<a href=\"http://github.com/visionmedia/nodes\">http://github.com/visionmedia/nodes</a></p>\n\n<p>Running <em>ndistro</em> again, will add a node binary to the bin folder. So <br />\nyou can now just run <em>./bin/node app.js</em>. Awesome!</p>\n\n<p>Starting the application this way, will make node look automatically <br />\ninto the project’s lib folder, when calling the require method. So the <br />\ninserted line (require.paths.unshift …) is now <strong>obsolete</strong> and can be <br />\ndropped.</p>\n\n<h3 id=\"settinguptheserver\">Setting up the server</h3>\n\n<p>I use git for managing my source code, but using svn or any other way <br />\nwill work either. At this time I assume,that your project is under <br />\nsource control or that you can just get your code onto your server.</p>\n\n<p>Sooo… connect to your server via SSH as root and execute the following <br />\nlines. BTW: I have an Ubuntu server so thecommands might differ for <br />\nother operating systems.</p>\n\n<blockquote>\n  <p>ssh root@yourserver.tld\\\n   sudo useradd -d /srv/www/\\<projectUrl\\> \\<projectUrl\\>\\\n   sudo passwd \\<projectUrl\\>\\\n   cd /srv/www/\\\n   mkdir \\<projectUrl\\>\\\n   chown \\<projectUrl\\>:\\<projectUrl\\> ./\\<projectUrl\\></p>\n</blockquote>\n\n<p>This will create a new user named like the url, the project will be <br />\navailable through. You can of course name it as you want to, but I am <br />\ndoing it that way.</p>\n\n<p>To setup apache do that:</p>\n\n<blockquote>\n  <p>pico /etc/apache2/sites-available/\\<projectUrl\\>\\\n   ==>\\\n  \\<VirtualHost \\*:80\\>\\\n  ServerAdmin an@email.com\\\n  ServerName \\<projectUrl\\>\\\n  ServerAlias www.\\<projectUrl\\>\\\n  ProxyPass / <a href='http://localhost:\\'>http://localhost:\\</a><port\\>/\\\n  ProxyPassReverse / <a href='http://localhost:\\'>http://localhost:\\</a><port\\>/\\\n   \\</VirtualHost\\>\\</p>\n  \n  <p>==>\\\n   a2ensite \\<projectUrl\\>\\\n   /etc/init.d/apache2 reload</p>\n</blockquote>\n\n<p>The port is just the one your application listens on. The example app <br />\nwill listen on port 3000.</p>\n\n<h3 id=\"deployingtheapplication\">Deploying the application</h3>\n\n<p>Now that the server is prepared, we can go on and get the application <br />\nrunning. Login with your newly created user:</p>\n\n<blockquote>\n  <p>ssh \\<projectUrl\\>@yourserver.tld\\\n   # somehow checkout your code\\\n   # e.g. git clone git@yourserver.tld:\\<projectUrl\\>\\\n   mv \\<projectUrl\\>/* .\\\n   rm -r \\<projectUrl\\>\\\n   ndistro\\\n   ./bin/node app.js</p>\n</blockquote>\n\n<p>This will download the project from your repository, moves the content <br />\nof the repository folder into the current one, install all dependencies <br />\nvia ndistro and finally start the application. You should now be able to <br />\naccess your app via the specific project url.</p>\n\n<p>You should now test all of the applications functions to be sure, you <br />\nfetched all dependencies in your .ndistro file. If the app crashes, take <br />\na look at the console and fix that issue. If a library is missing, just <br />\nadd it to .ndistro and commit it to source control once you finished. <br />\nWhen everything works the way it should, start your application the <br />\nfollowing way:</p>\n\n<blockquote>\n  <p>EXPRESS_ENV=production ./bin/node app.js > ./logs/production.log &amp;</p>\n</blockquote>\n\n<p>This will start the server in production mode and send all logging to <br />\nlogs/production.log. The &amp; at the end will send the server to the <br />\nbackground, so that you can just go on using your console. If you want <br />\nto check the log, use the tail command:</p>\n\n<blockquote>\n  <p>tail -f logs/production.log</p>\n</blockquote>\n\n<p><strong>Note:</strong> If you stop the node server and restart it after some changes,\nyou maybe have to restart the apache as well, due to a still visible <br />\n“Service not available” notification. Thanks for that note goes to\nRobert :)</p>\n\n<h3 id=\"misc\">Misc</h3>\n\n<p>I highly recommend you to register for a monitoring service and let your <br />\napplication be monitored. I’m using <br />\n<a href=\"http://www.uptimerobot.com/\">UptimeRobot</a> which is free and will notify\nyou via E-Mail, SMS or Twitter once your server isbroken.</p>\n\n<p>I will take a look at upstart and Spark to checkout if this can be <br />\nuseful somehow.</p>\n\n<p>Let me know if you got stuck or what could be explained better :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-08-30T19:10:00.000Z","created_by":1,"updated_at":"2010-08-30T19:10:00.000Z","updated_by":1,"published_at":"2010-08-30T19:10:00.000Z","published_by":1},{"id":31,"uuid":"623c74b6-f2cd-4d77-bb97-6e29195b40ce","title":"Duplicating a bucket on Amazon S3 with Ruby","slug":"duplicating-a-bucket-on-amazon-s3-with-ruby","markdown":"Due to my studies I’m currently working with the Amazon Services Elastic\nCompute Cloud (EC2) and the Simple Storage Service (S3).\n\nI wanted to easyly duplicate a bucket on S3 but found no method to do\nso. So I just wrote a script in Ruby which just makes a copy of each key\nin a source bucket to a target bucket. At first I tried the script on my\nlocal machine but stopped that due to my slow internet connection. Soooo\nI went over to EC2 and started an instance, configured it and tadaa,..,\ngot everything work.\n\nHere is the way to go:\n\nFirst we have to start the EC2 instance and install some additional\npackages:\n\n> ec2-add-keypair \\<name\\>-keypair\\\n> \\# copy the result to ./\\~ssh/id\\_rsa-\\<name\\>-keypair\\\n> chmod 700 ./\\~ssh/id\\_rsa-\\<name\\>-keypair\n>\n> ec2-run-instances \\<instance-identifier, e.g.: ami-0d729464\\> -k\n> \\<name\\>-keypair\\\n> \\# copy the value behind INSTANCE (should be smth. like i-64d4c00f)\\\n> ec2-describe-instances \\<copied value\\> (refresh until instance has\n> booted)\\\n> \\# once it’s running you will get an url which we use for ssh\n>\n> ssh -i \\~/.ssh/id\\_rsa-\\<name\\>-keypair root@\\<url\\>\n>\n> sudo apt-get update\\\n> sudo apt-get install ruby-full build-essential\\\n> sudo apt-get install rubygems1.8\\\n> sudo gem install right\\_aws\n\nAfter that we can just jump right into the Interactive Ruby Shell and\nrock on:\n\n> require “rubygems”\\\n> require “right\\_aws”\n>\n> KEY = “xx”\\\n> SECRET = “xx”\\\n> SOURCE\\_BUCKET = “xx”\\\n> TARGET\\_BUCKET = “xx”\n>\n> s3 = RightAws::S3.new(KEY, SECRET)\\\n> source = s3.bucket(SOURCE\\_BUCKET)\\\n> target = s3.bucket(TARGET\\_BUCKET, true)\n>\n> source.keys.each{ |key| target.put(key.name, key.data) }\n\nHope this might help someone out there. Ah and one further notice: All\ndata duplicated seems to dive directly into the RAM of the machine, so\nyou probably don’t want to copy all of the keys in a single step.\n","html":"<p>Due to my studies I’m currently working with the Amazon Services Elastic <br />\nCompute Cloud (EC2) and the Simple Storage Service (S3).</p>\n\n<p>I wanted to easyly duplicate a bucket on S3 but found no method to do <br />\nso. So I just wrote a script in Ruby which just makes a copy of each key <br />\nin a source bucket to a target bucket. At first I tried the script on my <br />\nlocal machine but stopped that due to my slow internet connection. Soooo <br />\nI went over to EC2 and started an instance, configured it and tadaa,.., <br />\ngot everything work.</p>\n\n<p>Here is the way to go:</p>\n\n<p>First we have to start the EC2 instance and install some additional <br />\npackages:</p>\n\n<blockquote>\n  <p>ec2-add-keypair \\<name\\>-keypair\\\n  # copy the result to ./\\~ssh/id_rsa-\\<name\\>-keypair\\\n  chmod 700 ./\\~ssh/id_rsa-\\<name\\>-keypair</p>\n  \n  <p>ec2-run-instances \\<instance-identifier, e.g.: ami-0d729464\\> -k\n  \\<name\\>-keypair\\\n  # copy the value behind INSTANCE (should be smth. like i-64d4c00f)\\\n  ec2-describe-instances \\<copied value\\> (refresh until instance has\n  booted)\\\n  # once it’s running you will get an url which we use for ssh</p>\n  \n  <p>ssh -i \\~/.ssh/id_rsa-\\<name\\>-keypair root@\\<url\\></p>\n  \n  <p>sudo apt-get update\\\n  sudo apt-get install ruby-full build-essential\\\n  sudo apt-get install rubygems1.8\\\n  sudo gem install right_aws</p>\n</blockquote>\n\n<p>After that we can just jump right into the Interactive Ruby Shell and <br />\nrock on:</p>\n\n<blockquote>\n  <p>require “rubygems”\\\n  require “right_aws”</p>\n  \n  <p>KEY = “xx”\\\n  SECRET = “xx”\\\n  SOURCE_BUCKET = “xx”\\\n  TARGET_BUCKET = “xx”</p>\n  \n  <p>s3 = RightAws::S3.new(KEY, SECRET)\\\n  source = s3.bucket(SOURCE_BUCKET)\\\n  target = s3.bucket(TARGET_BUCKET, true)</p>\n  \n  <p>source.keys.each{ |key| target.put(key.name, key.data) }</p>\n</blockquote>\n\n<p>Hope this might help someone out there. Ah and one further notice: All <br />\ndata duplicated seems to dive directly into the RAM of the machine, so <br />\nyou probably don’t want to copy all of the keys in a single step.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-06-12T18:57:00.000Z","created_by":1,"updated_at":"2010-06-12T18:57:00.000Z","updated_by":1,"published_at":"2010-06-12T18:57:00.000Z","published_by":1},{"id":32,"uuid":"ed9aa089-a388-418a-9d1d-be882edf1788","title":"Passing arguments/parameters using the node command","slug":"passing-arguments-parameters-using-the-node-command","markdown":"I recently wanted to pass some parameters to my .js file just from the\ncommandline using the *node* command. Because I didn’t found an answer\non Google, but in a project on Github, I want to let you know how it\nworks.\n\nLet’s say you have a script named *foo.js.* Run the following command:\n\n> node foo.js myParameter\n\nIn your script you can now access the attached parameters with:\n\n> process.ARGV\n\nYou will get:\n\n> [ ‘node’\\\n>  , ‘/path/to/foo.js’\\\n>  ,’myParameter’\\\n>  ]\n\nI needed something like that, to pass a boolean. The final result was:\n\n> \\# script call:\\\n>  node my.js —option\\\n> \\\n> \\# script content:\\\n>  var foo = (process.ARGV.indexOf(“—option”) \\> -1)\n\nAlso useful could be something like:\n\n> \\# script call:\\\n>  node my.js —path=/foo/bar/foobar.js\\\n> \\\n> \\# script content:\\\n>  var path = “”\\\n>  process.ARGV.forEach(function(arg) {\\\n> if(arg.indexOf(“—path”) == 0)\\\n>  path = arg.split(“=”)[1]\\\n>  })\\\n>  require(“sys”).puts(path)\n\nOK… That’s it for now. Hope it might be useful. :)\n","html":"<p>I recently wanted to pass some parameters to my .js file just from the <br />\ncommandline using the <em>node</em> command. Because I didn’t found an answer <br />\non Google, but in a project on Github, I want to let you know how it <br />\nworks.</p>\n\n<p>Let’s say you have a script named <em>foo.js.</em> Run the following command:</p>\n\n<blockquote>\n  <p>node foo.js myParameter</p>\n</blockquote>\n\n<p>In your script you can now access the attached parameters with:</p>\n\n<blockquote>\n  <p>process.ARGV</p>\n</blockquote>\n\n<p>You will get:</p>\n\n<blockquote>\n  <p>[ ‘node’\\\n   , ‘/path/to/foo.js’\\\n   ,’myParameter’\\\n   ]</p>\n</blockquote>\n\n<p>I needed something like that, to pass a boolean. The final result was:</p>\n\n<blockquote>\n  <p># script call:\\\n   node my.js —option\\\n  \\\n  # script content:\\\n   var foo = (process.ARGV.indexOf(“—option”) > -1)</p>\n</blockquote>\n\n<p>Also useful could be something like:</p>\n\n<blockquote>\n  <p># script call:\\\n   node my.js —path=/foo/bar/foobar.js\\\n  \\\n  # script content:\\\n   var path = “”\\\n   process.ARGV.forEach(function(arg) {\\\n  if(arg.indexOf(“—path”) == 0)\\\n   path = arg.split(“=”)[1]\\\n   })\\\n   require(“sys”).puts(path)</p>\n</blockquote>\n\n<p>OK… That’s it for now. Hope it might be useful. :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-05-21T18:53:00.000Z","created_by":1,"updated_at":"2010-05-21T18:53:00.000Z","updated_by":1,"published_at":"2010-05-21T18:53:00.000Z","published_by":1},{"id":33,"uuid":"565b2920-b92d-4536-8c30-97fcf872a74f","title":"Render collections with layout in Rails","slug":"render-collections-with-layout-in-rails","markdown":"Today I found a very strange behavior of Ruby on Rails. I wanted to\nrender a partial using the *collection* option. So far so normal. But: I\nneeded the result to be wrapped with some stuff, so I found out, that\nyou can just specify a layout! What I expected to get was something\nlike:\n\n> Layout Layout Layout\\\n>  \\<%= yield %\\> \\<—- this should be filled with my partial Layout\n> Layout Layout\n\nSo this is what I executed:\n\n> my\\_array = [“hello”, “world”]\\\n>  render(:partial =\\> “test”, :collection =\\> my\\_array, :layout =\\>\n> “test\\_layout”)\n\nLayout file:\n\n> some text before yield\\\n>  \\<%= yield %\\>\\\n>  some text after yield\n\nPartial file:\n\n> \\<%= test %\\>\n\nI expected the result to be either:\n\n> some text before yield\\\n>  hello\\\n>  some text after yield\\\n>  some text before yield\\\n>  world\\\n>  some text after yield\n\nor:\n\n> some text before yield\\\n>  hello\\\n>  world\\\n>  some text after yield\n\nBut instead I got this:\n\n> some text before yield\\\n>  hello\\\n>  world\\\n>  some text after yield\\\n>  some text before yield\\\n>  hello\\\n>  world\\\n>  some text after yield\n\nSo please tell me… WTF is going on!!\n","html":"<p>Today I found a very strange behavior of Ruby on Rails. I wanted to <br />\nrender a partial using the <em>collection</em> option. So far so normal. But: I <br />\nneeded the result to be wrapped with some stuff, so I found out, that <br />\nyou can just specify a layout! What I expected to get was something <br />\nlike:</p>\n\n<blockquote>\n  <p>Layout Layout Layout\\\n   \\&lt;%= yield %> \\&lt;—- this should be filled with my partial Layout\n  Layout Layout</p>\n</blockquote>\n\n<p>So this is what I executed:</p>\n\n<blockquote>\n  <p>my_array = [“hello”, “world”]\\\n   render(:partial => “test”, :collection => my_array, :layout =>\n  “test_layout”)</p>\n</blockquote>\n\n<p>Layout file:</p>\n\n<blockquote>\n  <p>some text before yield\\\n   \\&lt;%= yield %>\\\n   some text after yield</p>\n</blockquote>\n\n<p>Partial file:</p>\n\n<blockquote>\n  <p>\\&lt;%= test %></p>\n</blockquote>\n\n<p>I expected the result to be either:</p>\n\n<blockquote>\n  <p>some text before yield\\\n   hello\\\n   some text after yield\\\n   some text before yield\\\n   world\\\n   some text after yield</p>\n</blockquote>\n\n<p>or:</p>\n\n<blockquote>\n  <p>some text before yield\\\n   hello\\\n   world\\\n   some text after yield</p>\n</blockquote>\n\n<p>But instead I got this:</p>\n\n<blockquote>\n  <p>some text before yield\\\n   hello\\\n   world\\\n   some text after yield\\\n   some text before yield\\\n   hello\\\n   world\\\n   some text after yield</p>\n</blockquote>\n\n<p>So please tell me… WTF is going on!!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-03-27T19:50:00.000Z","created_by":1,"updated_at":"2010-03-27T19:50:00.000Z","updated_by":1,"published_at":"2010-03-27T19:50:00.000Z","published_by":1},{"id":34,"uuid":"162516d8-1e8c-4b79-9d79-338423d87d00","title":"Node.JS + Express on Snow Leopard","slug":"node-js-express-on-snow-leopard","markdown":"Hey folks! Today I wil take some time to get started with Node.JS and\nthe Express framework. You are maybe interested in how to get this stuff\nrun on Snow Leopard. You need to have XCode installed.\n\nSo here is what I did:\n\nPrerequisite\n------------\n\n~~Before diving into the NodeJS world I highly recommend you the usage\nif kiwi. Kiwi is a NodeJS package manager.~~\n\n> ~~git clone git://github.com/visionmedia/kiwi.git~~\\\n> ~~cd kiwi~~\\\n> ~~sudo make install~~\\\n> ~~sudo kiwi install kiwi~~\n\n~~You will probably ask why you should install kiwi with kiwi after you\nalready installed it via the make file. Well,… I actually don’t have a\nclue, but *reinstalling* it via kiwi will give you the possibility to\nupdate it later.~~\n\nInstallation of NodeJS\n----------------------\n\nDue to the package manager, installing NodeJS is an ease:\n\n> sudo kiwi install node\n\n**UPDATE:** Because it’s no longer possible to install node via kiwi,\nhere are some updated instructions for getting node started:\n\n> git clone\\\n>  [http://github.com/ry/node.git](http://github.com/ry/node.git)\\\n>  cd node\\\n>  ./configure\\\n>  make\\\n>  sudo make install\n\nThis will take some time… so lay back and drink some coffee… or beer …\nor whatever!\n\nAfter ~~kiwi~~the script gives you back control to your shell, you\nshould be able to run the *node* command.\n\n> [\\~] node\\\n>  No script was specified.\\\n>  Usage: node [options] script.js [arguments]\\\n>  Options:\\\n>  -v, —version print node’s version\\\n>  —debug[=port] enable remote debugging via given TCP port without\n> stopping the execution\\\n>  —debug-brk[=port] as above, but break in script.js and wait for\n> remote debugger to connect\\\n>  —v8-options print v8 command line options\\\n>  —vars print various compiled-in variables Enviromental variables:\n> NODE\\_PATH ‘:’-separated list of directories\\\n>  prefixed to the module search path,\\\n>  require.paths.\\\n>  NODE\\_DEBUG Print additional debugging output.\\\n>  Documentation can be found at\n> [http://nodejs.org/api.html](http://nodejs.org/api.html) or with ‘man\n> node’\n\nYou should also be able to run the *Hello World* example from\n[NodeJS](http://nodejs.org/). I tested it and I get some errors. Here is\na corrected version:\n\n> var sys = require(‘sys’), http = require(‘http’);\\\n>  http.createServer(function (req, res) {\\\n>  setTimeout(function () {\\\n>  res.sendHeader(200, {‘Content-Type’: ‘text/plain’});\\\n>  res.write(‘Hello World’);\\\n>  res.close();\\\n>  }, 2000);\\\n>  }).listen(8000);\\\n>  sys.puts(‘Server running at\n> [http://127.0.0.1:8000/’](http://127.0.0.1:8000/'));\n\nInstallation of Express\n-----------------------\n\nThe NodeJS framework express is a Sinatra touched web framework on top\nof NodeJS. It allows you to just specify some routes (so URIs) and a\nresponse you want to give to the browser.\n\n> kiwi -v install express\n\nFinished that you can try to run the following lines of code:\n\n> var sys = require(“sys”),\\\n>  kiwi = require(“kiwi”),\\\n>  express = kiwi.require(‘express’)\\\n> \\\n> get(‘/’, function(){\\\n>  this.redirect(‘/hello/world’)\\\n>  })\\\n> \\\n> get(‘/hello/world’, function(){\\\n>  return ‘Hello World’\\\n>  })\\\n> \\\n> run()\n\nJust save it in a file and run it with the node command.\n\nSo… that’s it! Let me know if something went wrong during the\ninstallation process.\n\nAh and… here are some links to the things:\n\n-   [NodeJS](http://nodejs.org/)\n-   [Kiwi](http://github.com/visionmedia/kiwi)\n-   [Express](http://github.com/visionmedia/express)\n\n","html":"<p>Hey folks! Today I wil take some time to get started with Node.JS and <br />\nthe Express framework. You are maybe interested in how to get this stuff <br />\nrun on Snow Leopard. You need to have XCode installed.</p>\n\n<p>So here is what I did:</p>\n\n<h2 id=\"prerequisite\">Prerequisite  </h2>\n\n<p><del>Before diving into the NodeJS world I highly recommend you the usage <br />\nif kiwi. Kiwi is a NodeJS package manager.</del></p>\n\n<blockquote>\n  <p><del>git clone git://github.com/visionmedia/kiwi.git</del>\\\n  <del>cd kiwi</del>\\\n  <del>sudo make install</del>\\\n  <del>sudo kiwi install kiwi</del></p>\n</blockquote>\n\n<p><del>You will probably ask why you should install kiwi with kiwi after you <br />\nalready installed it via the make file. Well,… I actually don’t have a <br />\nclue, but <em>reinstalling</em> it via kiwi will give you the possibility to <br />\nupdate it later.</del></p>\n\n<h2 id=\"installationofnodejs\">Installation of NodeJS  </h2>\n\n<p>Due to the package manager, installing NodeJS is an ease:</p>\n\n<blockquote>\n  <p>sudo kiwi install node</p>\n</blockquote>\n\n<p><strong>UPDATE:</strong> Because it’s no longer possible to install node via kiwi,\nhere are some updated instructions for getting node started:</p>\n\n<blockquote>\n  <p>git clone\\\n   <a href=\"http://github.com/ry/node.git\">http://github.com/ry/node.git</a>\\\n   cd node\\\n   ./configure\\\n   make\\\n   sudo make install</p>\n</blockquote>\n\n<p>This will take some time… so lay back and drink some coffee… or beer … <br />\nor whatever!</p>\n\n<p>After <del>kiwi</del>the script gives you back control to your shell, you <br />\nshould be able to run the <em>node</em> command.</p>\n\n<blockquote>\n  <p>[\\~] node\\\n   No script was specified.\\\n   Usage: node [options] script.js [arguments]\\\n   Options:\\\n   -v, —version print node’s version\\\n   —debug[=port] enable remote debugging via given TCP port without\n  stopping the execution\\\n   —debug-brk[=port] as above, but break in script.js and wait for\n  remote debugger to connect\\\n   —v8-options print v8 command line options\\\n   —vars print various compiled-in variables Enviromental variables:\n  NODE_PATH ‘:’-separated list of directories\\\n   prefixed to the module search path,\\\n   require.paths.\\\n   NODE_DEBUG Print additional debugging output.\\\n   Documentation can be found at\n  <a href=\"http://nodejs.org/api.html\">http://nodejs.org/api.html</a> or with ‘man\n  node’</p>\n</blockquote>\n\n<p>You should also be able to run the <em>Hello World</em> example from <br />\n<a href=\"http://nodejs.org/\">NodeJS</a>. I tested it and I get some errors. Here is\na corrected version:</p>\n\n<blockquote>\n  <p>var sys = require(‘sys’), http = require(‘http’);\\\n   http.createServer(function (req, res) {\\\n   setTimeout(function () {\\\n   res.sendHeader(200, {‘Content-Type’: ‘text/plain’});\\\n   res.write(‘Hello World’);\\\n   res.close();\\\n   }, 2000);\\\n   }).listen(8000);\\\n   sys.puts(‘Server running at\n  <a href=\"http://127.0.0.1:8000/'\">http://127.0.0.1:8000/’</a>);</p>\n</blockquote>\n\n<h2 id=\"installationofexpress\">Installation of Express  </h2>\n\n<p>The NodeJS framework express is a Sinatra touched web framework on top <br />\nof NodeJS. It allows you to just specify some routes (so URIs) and a <br />\nresponse you want to give to the browser.</p>\n\n<blockquote>\n  <p>kiwi -v install express</p>\n</blockquote>\n\n<p>Finished that you can try to run the following lines of code:</p>\n\n<blockquote>\n  <p>var sys = require(“sys”),\\\n   kiwi = require(“kiwi”),\\\n   express = kiwi.require(‘express’)\\\n  \\\n  get(‘/’, function(){\\\n   this.redirect(‘/hello/world’)\\\n   })\\\n  \\\n  get(‘/hello/world’, function(){\\\n   return ‘Hello World’\\\n   })\\\n  \\\n  run()</p>\n</blockquote>\n\n<p>Just save it in a file and run it with the node command.</p>\n\n<p>So… that’s it! Let me know if something went wrong during the <br />\ninstallation process.</p>\n\n<p>Ah and… here are some links to the things:</p>\n\n<ul>\n<li><a href=\"http://nodejs.org/\">NodeJS</a></li>\n<li><a href=\"http://github.com/visionmedia/kiwi\">Kiwi</a></li>\n<li><a href=\"http://github.com/visionmedia/express\">Express</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-03-24T19:41:00.000Z","created_by":1,"updated_at":"2010-03-24T19:41:00.000Z","updated_by":1,"published_at":"2010-03-24T19:41:00.000Z","published_by":1},{"id":35,"uuid":"95d0f247-fd75-45ba-a207-0769fe06ae6d","title":"Disabling error reporting of PHP on Snow Leopard","slug":"disabling-error-reporting-of-php-on-snow-leopard","markdown":"Due to my studies I’m currently working with Typo 3. I wanted to setup\nthe CMS on my Snow Leopard based MacBook and ended in a bunch of\nwarnings. Most of them informed about the use of deprecated function\ncalls. First I just thought: Well that’s not my business! BUT: Because\nwarnings are passed to the browser just when they appear, PHP is not\nmore able to redirect to another page using PHPs header function.\n\nTo disable the so-called *error\\_reporting* do the following:\n\n> sudo cp /etc/php.ini.default /etc/php.ini\\\n>  sudo chmod 644 /etc/php.ini\\\n>  sudo mate|pico|nano|vi /etc/php.ini\n\nThe last command will open your most favorite ultimate text editor! I\nfigured out, that using the complete default php.ini will cause several\nstrange behaviors. For example I wasn’t able to connect to my MySQL\ndatabase after using the new php.ini. So I just deleted most of it’s\ncontent and only using that:\n\n> error\\_reporting = E\\_ALL\\\n>  display\\_errors = Off\n\nActually I think that the whole magic is in that display\\_errors\nattribute :\\> There are a lot of combinations for the error\\_reporting\nfield … but none of them worked for me !? I thought something like\n*E\\_ALL & \\~E\\_DEPRECATED* should do the trick.\n\nOne necessary thing you have to do in order to enable the new\nconfiguration:\n\n> sudo apachectl restart\n\nHave fun :)\n","html":"<p>Due to my studies I’m currently working with Typo 3. I wanted to setup <br />\nthe CMS on my Snow Leopard based MacBook and ended in a bunch of <br />\nwarnings. Most of them informed about the use of deprecated function <br />\ncalls. First I just thought: Well that’s not my business! BUT: Because <br />\nwarnings are passed to the browser just when they appear, PHP is not <br />\nmore able to redirect to another page using PHPs header function.</p>\n\n<p>To disable the so-called <em>error_reporting</em> do the following:</p>\n\n<blockquote>\n  <p>sudo cp /etc/php.ini.default /etc/php.ini\\\n   sudo chmod 644 /etc/php.ini\\\n   sudo mate|pico|nano|vi /etc/php.ini</p>\n</blockquote>\n\n<p>The last command will open your most favorite ultimate text editor! I <br />\nfigured out, that using the complete default php.ini will cause several <br />\nstrange behaviors. For example I wasn’t able to connect to my MySQL <br />\ndatabase after using the new php.ini. So I just deleted most of it’s <br />\ncontent and only using that:</p>\n\n<blockquote>\n  <p>error_reporting = E_ALL\\\n   display_errors = Off</p>\n</blockquote>\n\n<p>Actually I think that the whole magic is in that display_errors <br />\nattribute :> There are a lot of combinations for the error_reporting <br />\nfield … but none of them worked for me !? I thought something like <br />\n<em>E_ALL &amp; \\~E_DEPRECATED</em> should do the trick.</p>\n\n<p>One necessary thing you have to do in order to enable the new <br />\nconfiguration:</p>\n\n<blockquote>\n  <p>sudo apachectl restart</p>\n</blockquote>\n\n<p>Have fun :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-03-20T19:34:00.000Z","created_by":1,"updated_at":"2010-03-20T19:34:00.000Z","updated_by":1,"published_at":"2010-03-20T19:34:00.000Z","published_by":1},{"id":36,"uuid":"e17c0926-f0d8-4758-bfae-c4dac8c91fed","title":"Blogging with TextMate","slug":"blogging-with-textmate","markdown":"As you may have already noticed I’m looking for a possibility to write\nmy blogposts with a desktop application. I just tested RapidWeaver which\nis a really cool tool, but where you have to pay for such silly stuff as\na search function. 15 bucks I really know to use more senseful!\n\nSo I just spend my time surfing the net for some cool apps doing such\nthings. On my way I found out, that TextMate also has a so-called\n*blogging bundle*. So I watched the screencast and decided to give it a\ntry.\n\nReally important to me is the possiblity to upload images just\non-the-fly. As the screencast showed this seems to be pretty easy. Just\ndrag an image into the textmate window and there you are! Let’s check it\nout:\n\n[![](http://depold.com/wordpress/wp-content/uploads/2010/03/blogging_in_textmate1.png \"blogging_in_textmate\")](http://depold.com/wordpress/wp-content/uploads/2010/03/blogging_in_textmate1.png)\n\nI like! :)\n","html":"<p>As you may have already noticed I’m looking for a possibility to write <br />\nmy blogposts with a desktop application. I just tested RapidWeaver which <br />\nis a really cool tool, but where you have to pay for such silly stuff as <br />\na search function. 15 bucks I really know to use more senseful!</p>\n\n<p>So I just spend my time surfing the net for some cool apps doing such <br />\nthings. On my way I found out, that TextMate also has a so-called <br />\n<em>blogging bundle</em>. So I watched the screencast and decided to give it a\ntry.</p>\n\n<p>Really important to me is the possiblity to upload images just <br />\non-the-fly. As the screencast showed this seems to be pretty easy. Just <br />\ndrag an image into the textmate window and there you are! Let’s check it <br />\nout:</p>\n\n<p><a href=\"http://depold.com/wordpress/wp-content/uploads/2010/03/blogging_in_textmate1.png\"><img src=\"http://depold.com/wordpress/wp-content/uploads/2010/03/blogging_in_textmate1.png\" alt=\"\" title=\"blogging_in_textmate\" /></a></p>\n\n<p>I like! :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-03-15T19:31:00.000Z","created_by":1,"updated_at":"2010-03-15T19:31:00.000Z","updated_by":1,"published_at":"2010-03-15T19:31:00.000Z","published_by":1},{"id":37,"uuid":"ab179975-9aa8-449b-9e63-f9f247e55473","title":"MacHeist nanoBundle 2","slug":"macheist-nanobundle-2","markdown":"Hey folks. MacHeist is currently selling its new mac apps bundle,\ncontaining the following 10 programs:\n\n-   MacJournal\n-   RipIt\n-   Clips\n-   CoverScout\n-   Flow\n-   Tales of Monkey Island\n-   RapidWeaver\n-   Tracks\n-   Airburst Extreme\n-   Burning Monkey Solitaire\n\nMacJounal\n---------\n\nThis tool lets you write blog entries offline. Just push them to your\nserver when you are online again. Im currently testing it and am a\nlittle bit disappointed about the few delivered features. Maybe Im just\nblind and unable to find them, but shouldnt a blog post application\nprovide a function for declaring a text as headline ?! The interface is\npretty… *pragmatic*, haha ;) Its not directly supported but I use it\nwith a (or better this) wordpress blog (have chosen MoveableTypes\ninstead) and it works quite well. You can just download the already\nwritten posts and edit them. The biggest problem is the fact, that the\nformatting of downloaded posts is almost completely lost… strange imho.\nWhat works nicely is the inclusion of images. Just put them into the\ntext and MacJournal will automatically upload them as well. Im also\nwondering, why there is no possibility to edit a post in HTML mode.\nEdit: Err.. just found out, that wordpress is also available in the blog\nsystem drop down box! Sorry.\n\n![wpid-Bildschirmfoto2010-03-06um20.09.26.v934MDFwwsH3.jpg](http://depold.com/wordpress/wp-content/uploads/2010/03/wpid-Bildschirmfoto2010-03-06um20.09.26.v934MDFwwsH3.jpg)\n\nRipIt\n-----\n\nThis awesome and easy to use application does exactly what it says… it\nrips ;) Just push a DVD in to your drive, run the app and hit the\nrip/compress button. Whats pretty cool, is the fact, that you have a\nguarantee, that all DVDs you want to rip are actually working. The\nwebsite says: If a DVD doesn’t work, we’ll buy it ourselves and fix it\nas soon as possible. Nice!\n\nClips\n-----\n\nFirst I thought, that this tool is some kind of note management thing.\nMy girlfriend was pretty happy about that and a lot disappointed when\nshe figured out, that it is not. \\*g\\* You maybe know JumpCut, do you?\nClips is doing somehow the same but as far as I find out til now its\nmore mouse based than JumpCut. Hit Ctrl+Space to open a menu. In this\nmenu you will see all programs in which you copied some text. You also\nfind what you actually copied and can just click on one of the relevant\ncopies to paste it into the currently active application. So the tool is\nlisting the history of your paste board. Thats nice!\n\n![wpid-Bildschirmfoto2010-03-06um20.25.22.bFwnYnHrzM1C.jpg](http://depold.com/wordpress/wp-content/uploads/2010/03/wpid-Bildschirmfoto2010-03-06um20.25.22.bFwnYnHrzM1C.jpg)\n\nCoverScout\n----------\n\nThis tool was one of the very reasons to buy the bundle. Just run it and\nit will search you iTunes data to find songs without a cover. You have\nsome options for automatically setting a found cover. Pretty useful and\neasy, but sometimes a little bit buggy. (Yeah you have found a cover\nthan fucking use that!)\n\nFlow\n----\n\nI already had this application before so yeah its cool ;) This is a ftp\ntool, build by some students. Support them, they need it ;) As the name\nsays its all about the working flow. Somewhat minimalistic feature set\nbut whats supported its doing very well.\n\nTales of Monkey Island\n----------------------\n\nThe key for that game is not yet available so I dont want to tell much\nabout that. Only thing I know is: It is a Monkey Island. And thats nice!\nUpdate: Yo! Had some time to play and what I can tell you so far is the\nfact, that the camera is sometimes a little bit strange. Furthermore the\nenglish is (for me as non native english speaker) somewhat difficulty :)\n\n[![](http://depold.com/wordpress/wp-content/uploads/2010/03/monkey_island1.png \"monkey_island\")](http://depold.com/wordpress/wp-content/uploads/2010/03/monkey_island1.png)\n\nRapidWeaver\n-----------\n\nThe key is not yet availble, so no comment for now. It seems to be a\nFrontpage like tool. Update: OK, the key is currently available and Im\nalso currently testing the tool. So far, it is a lot more useful than\nMacJournal and it really has a nice workflow. Im just moving all my\nwordpress content to RapidWeaver.\n\nTracks\n------\n\nPretty interesting for people with an old MacBook. I dont know exactly\nwhen Apple decided to use the F7 to F9 buttons for toggling currently\nplayed music, but with this app you can specify key combination to skip\nto the next song, rate the current song and so on.\n\nAirburst Extreme\n----------------\n\nI havent played the game (currently downloading) but Im currently\nthinking: What a strange looking game is that ;) Will let you know what\nit is about once the download is finished. Update: Ok, the download\n130MB download finished and I just tested the game. It’s somehow\npong-like. A disc is flying across the screen and you have to hit the\nopponents. With a some pixel big “shield” you can push the disc away.\nStrange and obsolete game type imho.\n\nBurning Monkey Solitaire\n------------------------\n\nHavent played that as well but it seems to be a solitare game ;)\n","html":"<p>Hey folks. MacHeist is currently selling its new mac apps bundle, <br />\ncontaining the following 10 programs:</p>\n\n<ul>\n<li>MacJournal</li>\n<li>RipIt</li>\n<li>Clips</li>\n<li>CoverScout</li>\n<li>Flow</li>\n<li>Tales of Monkey Island</li>\n<li>RapidWeaver</li>\n<li>Tracks</li>\n<li>Airburst Extreme</li>\n<li>Burning Monkey Solitaire</li>\n</ul>\n\n<h2 id=\"macjounal\">MacJounal  </h2>\n\n<p>This tool lets you write blog entries offline. Just push them to your <br />\nserver when you are online again. Im currently testing it and am a <br />\nlittle bit disappointed about the few delivered features. Maybe Im just <br />\nblind and unable to find them, but shouldnt a blog post application <br />\nprovide a function for declaring a text as headline ?! The interface is <br />\npretty… <em>pragmatic</em>, haha ;) Its not directly supported but I use it <br />\nwith a (or better this) wordpress blog (have chosen MoveableTypes <br />\ninstead) and it works quite well. You can just download the already <br />\nwritten posts and edit them. The biggest problem is the fact, that the <br />\nformatting of downloaded posts is almost completely lost… strange imho. <br />\nWhat works nicely is the inclusion of images. Just put them into the <br />\ntext and MacJournal will automatically upload them as well. Im also <br />\nwondering, why there is no possibility to edit a post in HTML mode. <br />\nEdit: Err.. just found out, that wordpress is also available in the blog <br />\nsystem drop down box! Sorry.</p>\n\n<p><img src=\"http://depold.com/wordpress/wp-content/uploads/2010/03/wpid-Bildschirmfoto2010-03-06um20.09.26.v934MDFwwsH3.jpg\" alt=\"wpid-Bildschirmfoto2010-03-06um20.09.26.v934MDFwwsH3.jpg\" /></p>\n\n<h2 id=\"ripit\">RipIt  </h2>\n\n<p>This awesome and easy to use application does exactly what it says… it <br />\nrips ;) Just push a DVD in to your drive, run the app and hit the <br />\nrip/compress button. Whats pretty cool, is the fact, that you have a <br />\nguarantee, that all DVDs you want to rip are actually working. The <br />\nwebsite says: If a DVD doesn’t work, we’ll buy it ourselves and fix it <br />\nas soon as possible. Nice!</p>\n\n<h2 id=\"clips\">Clips  </h2>\n\n<p>First I thought, that this tool is some kind of note management thing. <br />\nMy girlfriend was pretty happy about that and a lot disappointed when <br />\nshe figured out, that it is not. *g* You maybe know JumpCut, do you? <br />\nClips is doing somehow the same but as far as I find out til now its <br />\nmore mouse based than JumpCut. Hit Ctrl+Space to open a menu. In this <br />\nmenu you will see all programs in which you copied some text. You also <br />\nfind what you actually copied and can just click on one of the relevant <br />\ncopies to paste it into the currently active application. So the tool is <br />\nlisting the history of your paste board. Thats nice!</p>\n\n<p><img src=\"http://depold.com/wordpress/wp-content/uploads/2010/03/wpid-Bildschirmfoto2010-03-06um20.25.22.bFwnYnHrzM1C.jpg\" alt=\"wpid-Bildschirmfoto2010-03-06um20.25.22.bFwnYnHrzM1C.jpg\" /></p>\n\n<h2 id=\"coverscout\">CoverScout  </h2>\n\n<p>This tool was one of the very reasons to buy the bundle. Just run it and <br />\nit will search you iTunes data to find songs without a cover. You have <br />\nsome options for automatically setting a found cover. Pretty useful and <br />\neasy, but sometimes a little bit buggy. (Yeah you have found a cover <br />\nthan fucking use that!)</p>\n\n<h2 id=\"flow\">Flow  </h2>\n\n<p>I already had this application before so yeah its cool ;) This is a ftp <br />\ntool, build by some students. Support them, they need it ;) As the name <br />\nsays its all about the working flow. Somewhat minimalistic feature set <br />\nbut whats supported its doing very well.</p>\n\n<h2 id=\"talesofmonkeyisland\">Tales of Monkey Island  </h2>\n\n<p>The key for that game is not yet available so I dont want to tell much <br />\nabout that. Only thing I know is: It is a Monkey Island. And thats nice! <br />\nUpdate: Yo! Had some time to play and what I can tell you so far is the <br />\nfact, that the camera is sometimes a little bit strange. Furthermore the <br />\nenglish is (for me as non native english speaker) somewhat difficulty :)</p>\n\n<p><a href=\"http://depold.com/wordpress/wp-content/uploads/2010/03/monkey_island1.png\"><img src=\"http://depold.com/wordpress/wp-content/uploads/2010/03/monkey_island1.png\" alt=\"\" title=\"monkey_island\" /></a></p>\n\n<h2 id=\"rapidweaver\">RapidWeaver  </h2>\n\n<p>The key is not yet availble, so no comment for now. It seems to be a <br />\nFrontpage like tool. Update: OK, the key is currently available and Im <br />\nalso currently testing the tool. So far, it is a lot more useful than <br />\nMacJournal and it really has a nice workflow. Im just moving all my <br />\nwordpress content to RapidWeaver.</p>\n\n<h2 id=\"tracks\">Tracks  </h2>\n\n<p>Pretty interesting for people with an old MacBook. I dont know exactly <br />\nwhen Apple decided to use the F7 to F9 buttons for toggling currently <br />\nplayed music, but with this app you can specify key combination to skip <br />\nto the next song, rate the current song and so on.</p>\n\n<h2 id=\"airburstextreme\">Airburst Extreme  </h2>\n\n<p>I havent played the game (currently downloading) but Im currently <br />\nthinking: What a strange looking game is that ;) Will let you know what <br />\nit is about once the download is finished. Update: Ok, the download <br />\n130MB download finished and I just tested the game. It’s somehow <br />\npong-like. A disc is flying across the screen and you have to hit the <br />\nopponents. With a some pixel big “shield” you can push the disc away. <br />\nStrange and obsolete game type imho.</p>\n\n<h2 id=\"burningmonkeysolitaire\">Burning Monkey Solitaire  </h2>\n\n<p>Havent played that as well but it seems to be a solitare game ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-03-06T19:25:00.000Z","created_by":1,"updated_at":"2010-03-06T19:25:00.000Z","updated_by":1,"published_at":"2010-03-06T19:25:00.000Z","published_by":1},{"id":38,"uuid":"80041b0d-e4d3-4561-8585-7b9599874fbd","title":"FXRuby: Oooh nice?","slug":"fxruby-oooh-nice","markdown":"Just found [FXRuby](http://www.fxruby.org/) - as far as I currently know\nit is a Desktop App GUI Framework for Ruby. Because I just wondered\nwhich programming language is the one to use for desktop apps, I\npromptly installed the gem with the following command:\n\n> sudo gem install fxruby\n\nAfter some seconds of installation process I ran the interactive ruby\nshell (irb) and did the following (copied from the tutorial page):\n\n> require ‘fox16’\\\n>  include Fox\\\n>  theApp = FXApp.new\\\n>  theMainWindow = FXMainWindow.new(theApp, “Hello”)\\\n>  theApp.create\\\n>  theMainWindow.show\\\n>  theApp.run\n\nWhile running those commands you will recognize the opening X11\nenvironment. My first thought was: WTF gimme more alias shit for the\nvery same commands. Am I the only one for whom those commands sounds all\nequals???\n\nI will give this stuff a try and currently wonder, how I can just give\nsuch an app to another person…?\n","html":"<p>Just found <a href=\"http://www.fxruby.org/\">FXRuby</a> - as far as I currently know <br />\nit is a Desktop App GUI Framework for Ruby. Because I just wondered <br />\nwhich programming language is the one to use for desktop apps, I <br />\npromptly installed the gem with the following command:</p>\n\n<blockquote>\n  <p>sudo gem install fxruby</p>\n</blockquote>\n\n<p>After some seconds of installation process I ran the interactive ruby <br />\nshell (irb) and did the following (copied from the tutorial page):</p>\n\n<blockquote>\n  <p>require ‘fox16’\\\n   include Fox\\\n   theApp = FXApp.new\\\n   theMainWindow = FXMainWindow.new(theApp, “Hello”)\\\n   theApp.create\\\n   theMainWindow.show\\\n   theApp.run</p>\n</blockquote>\n\n<p>While running those commands you will recognize the opening X11 <br />\nenvironment. My first thought was: WTF gimme more alias shit for the <br />\nvery same commands. Am I the only one for whom those commands sounds all <br />\nequals???</p>\n\n<p>I will give this stuff a try and currently wonder, how I can just give <br />\nsuch an app to another person…?</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-02-03T19:23:00.000Z","created_by":1,"updated_at":"2010-02-03T19:23:00.000Z","updated_by":1,"published_at":"2010-02-03T19:23:00.000Z","published_by":1},{"id":39,"uuid":"185f4809-a86c-46f3-ae55-16d4c2671eba","title":"QuakeLive on Mac OS X","slug":"quakelive-on-mac-os-x","markdown":"![](http://media.tumblr.com/tumblr_lctetygEKP1qbrzcp.png)\n\nToday I just found the free-to-play Quake III - Port\n[QuakeLive](http://quakelive.com).\n\nWhen entering the site you can find the an image, telling you, that\nQuakeLive is easy to join…\n\nSo I registered and… got stucked in that fucking installation process\nyou have to succeed before being able to play. So what is that\ninstallation stuff about? You have to download a plugin that\nprovidesfunctionality for the browser. That’s just the way it is when\nplaying Battlefield Heroes.\n\nWhen trying to run the game, it will ask you to download that plugin and\nput it intothe folder /Library/Internet Plug-Ins/. When finished and\nrestarted the browser the game will tell you, that it is just unable to\nfind the plugin and that you should just download it… A vicious circle!\n\nThe solution is to copy the plugin file into you private Library folder!\nSo don’t copy it to the suggested folderbutto \\~/Library/Internet\nPlug-Ins/ ! Now restart the browser and run the website again. As you\nwill see, it’s now working :)\n\nAh and don’t forget to play the game in Safari or Firefox. Other\nbrowsers are afaik not supported yet!\n\n![](http://media.tumblr.com/tumblr_lctew6wCKq1qbrzcp.png)\n\n![](http://media.tumblr.com/tumblr_lctex3PrU41qbrzcp.png)\n\n![](http://media.tumblr.com/tumblr_lctez6xdSL1qbrzcp.png)\n","html":"<p><img src=\"http://media.tumblr.com/tumblr_lctetygEKP1qbrzcp.png\" alt=\"\" /></p>\n\n<p>Today I just found the free-to-play Quake III - Port <br />\n<a href=\"http://quakelive.com\">QuakeLive</a>.</p>\n\n<p>When entering the site you can find the an image, telling you, that <br />\nQuakeLive is easy to join…</p>\n\n<p>So I registered and… got stucked in that fucking installation process <br />\nyou have to succeed before being able to play. So what is that <br />\ninstallation stuff about? You have to download a plugin that <br />\nprovidesfunctionality for the browser. That’s just the way it is when <br />\nplaying Battlefield Heroes.</p>\n\n<p>When trying to run the game, it will ask you to download that plugin and <br />\nput it intothe folder /Library/Internet Plug-Ins/. When finished and <br />\nrestarted the browser the game will tell you, that it is just unable to <br />\nfind the plugin and that you should just download it… A vicious circle!</p>\n\n<p>The solution is to copy the plugin file into you private Library folder! <br />\nSo don’t copy it to the suggested folderbutto \\~/Library/Internet <br />\nPlug-Ins/ ! Now restart the browser and run the website again. As you <br />\nwill see, it’s now working :)</p>\n\n<p>Ah and don’t forget to play the game in Safari or Firefox. Other <br />\nbrowsers are afaik not supported yet!</p>\n\n<p><img src=\"http://media.tumblr.com/tumblr_lctew6wCKq1qbrzcp.png\" alt=\"\" /></p>\n\n<p><img src=\"http://media.tumblr.com/tumblr_lctex3PrU41qbrzcp.png\" alt=\"\" /></p>\n\n<p><img src=\"http://media.tumblr.com/tumblr_lctez6xdSL1qbrzcp.png\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-01-29T19:14:00.000Z","created_by":1,"updated_at":"2010-01-29T19:14:00.000Z","updated_by":1,"published_at":"2010-01-29T19:14:00.000Z","published_by":1},{"id":40,"uuid":"efbb7eb3-e828-4b00-b2b9-65c3fbed8860","title":"Theme Hospital on Mac OS X","slug":"theme-hospital-on-mac-os-x","markdown":"### UPDATE\n\n[I updated the article for the latest version of Boxer. You can find the\npost\nhere.](http://blog.depold.com/post/11193755052/theme-hospital-on-mac-os-x-with-boxer-1-1-1)\n\n### Original post:\n\n![](http://media.tumblr.com/tumblr_lctef9UDh51qbrzcp.jpg)\n\nI just found a nice app for playing DOS games on mac os x without this\nfucking DOSBox configuration shit.It’s called Boxer and to get Theme\nHospital work, follow these steps:\n\nAttention: Due to the localized folder names, the apps are possibly\nnamed in another way.\n\n1.  Download Boxer from\n    [here](http://boxer.washboardabs.net/download/latest)\n2.  Open the disk image and copy the Boxer app to your harddisk.\n3.  Run the app. It will configure some stuff and create a folder in\n    your user’s root called DOS-Games. According to the manual you can\n    put this folder whereever you want to.\n4.  Get a copy of the game. I just used my old cd.\n5.  Open the CD in finder and run DOSSETUP/SETUP.EXE.\n6.  This will start the boxer.app and the included installer.\n7.  The game installation will popup. Run through the process. If you\n    have problems with mouse handling hold down the alt key and click\n    into the boxer window.\n8.  Choose the language you prefer.\n9.  Set up your soundcard: Sound Effects =\\> Creative Labs Sound Blaster\n    or 100% Compatible; Music =\\> Creative Labs Sound Blaster 16\n10. Install the game completely.\n11. After the copy process is finished, exit the installation.\n12. Quit the DOS window (CMD+Q)\n13. Boxer will ask you, if you want to import the CD. Do so!\n14. When the CD copy task was finished, Boxer will quit and show you the\n    DOS-Games folder. You will find an icon called “Theme\n    Hospital.boxer”.\n15. Eject your CD and hit the icon.\n16. Choose HOSPITAL.EXE and Run this game. Allow Boxer to always run\n    this file.\n17. And there you are :) Hit CMD+F to switch to fullscreen mode.\n\nFor further information to the boxer app, check the\n[manual](http://boxer.washboardabs.net/guide/). Have fun :)\n\n![](http://media.tumblr.com/tumblr_lctel7hvLn1qbrzcp.png)\n\n![](http://media.tumblr.com/tumblr_lctelkDw9D1qbrzcp.png)\n\n![](http://media.tumblr.com/tumblr_lctemlDyvp1qbrzcp.png)\n","html":"<h3 id=\"update\">UPDATE</h3>\n\n<p><a href=\"http://blog.depold.com/post/11193755052/theme-hospital-on-mac-os-x-with-boxer-1-1-1\">I updated the article for the latest version of Boxer. You can find the\npost <br />\nhere.</a></p>\n\n<h3 id=\"originalpost\">Original post:</h3>\n\n<p><img src=\"http://media.tumblr.com/tumblr_lctef9UDh51qbrzcp.jpg\" alt=\"\" /></p>\n\n<p>I just found a nice app for playing DOS games on mac os x without this <br />\nfucking DOSBox configuration shit.It’s called Boxer and to get Theme <br />\nHospital work, follow these steps:</p>\n\n<p>Attention: Due to the localized folder names, the apps are possibly <br />\nnamed in another way.</p>\n\n<ol>\n<li>Download Boxer from <br />\n<a href=\"http://boxer.washboardabs.net/download/latest\">here</a></li>\n<li>Open the disk image and copy the Boxer app to your harddisk.  </li>\n<li>Run the app. It will configure some stuff and create a folder in <br />\nyour user’s root called DOS-Games. According to the manual you can\nput this folder whereever you want to.</li>\n<li>Get a copy of the game. I just used my old cd.  </li>\n<li>Open the CD in finder and run DOSSETUP/SETUP.EXE.  </li>\n<li>This will start the boxer.app and the included installer.  </li>\n<li>The game installation will popup. Run through the process. If you <br />\nhave problems with mouse handling hold down the alt key and click\ninto the boxer window.</li>\n<li>Choose the language you prefer.  </li>\n<li>Set up your soundcard: Sound Effects => Creative Labs Sound Blaster <br />\nor 100% Compatible; Music => Creative Labs Sound Blaster 16</li>\n<li>Install the game completely.  </li>\n<li>After the copy process is finished, exit the installation.  </li>\n<li>Quit the DOS window (CMD+Q)  </li>\n<li>Boxer will ask you, if you want to import the CD. Do so!  </li>\n<li>When the CD copy task was finished, Boxer will quit and show you the <br />\nDOS-Games folder. You will find an icon called “Theme\nHospital.boxer”.</li>\n<li>Eject your CD and hit the icon.  </li>\n<li>Choose HOSPITAL.EXE and Run this game. Allow Boxer to always run <br />\nthis file.</li>\n<li>And there you are :) Hit CMD+F to switch to fullscreen mode.</li>\n</ol>\n\n<p>For further information to the boxer app, check the <br />\n<a href=\"http://boxer.washboardabs.net/guide/\">manual</a>. Have fun :)</p>\n\n<p><img src=\"http://media.tumblr.com/tumblr_lctel7hvLn1qbrzcp.png\" alt=\"\" /></p>\n\n<p><img src=\"http://media.tumblr.com/tumblr_lctelkDw9D1qbrzcp.png\" alt=\"\" /></p>\n\n<p><img src=\"http://media.tumblr.com/tumblr_lctemlDyvp1qbrzcp.png\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-01-22T16:59:00.000Z","created_by":1,"updated_at":"2010-01-22T16:59:00.000Z","updated_by":1,"published_at":"2010-01-22T16:59:00.000Z","published_by":1},{"id":41,"uuid":"7cf93751-ebc3-4545-9158-84403b471c3d","title":"Future Posts","slug":"future-posts","markdown":"Once I finished this nightmarish first semester of my master studies, I\nwant to write some new posts. Here are the topics you can expect to see\nsomewhat soon on my blog:\n\n-   Setting up and using Silenium\n-   Some stuff I did in my bachelor studies\n-   Tutorials and presentations of my github projects\n    -   rateable\\_attributes\n    -   Autocompleter.Local.MultiContent\n\nSo stay tuned, take out your mojos and rub the magic lanterns you\npossibly have in your shelf. I need all luck you can find, haha!\n","html":"<p>Once I finished this nightmarish first semester of my master studies, I <br />\nwant to write some new posts. Here are the topics you can expect to see <br />\nsomewhat soon on my blog:</p>\n\n<ul>\n<li>Setting up and using Silenium</li>\n<li>Some stuff I did in my bachelor studies</li>\n<li>Tutorials and presentations of my github projects\n<ul><li>rateable_attributes</li>\n<li>Autocompleter.Local.MultiContent</li></ul></li>\n</ul>\n\n<p>So stay tuned, take out your mojos and rub the magic lanterns you <br />\npossibly have in your shelf. I need all luck you can find, haha!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2010-01-21T16:56:00.000Z","created_by":1,"updated_at":"2010-01-21T16:56:00.000Z","updated_by":1,"published_at":"2010-01-21T16:56:00.000Z","published_by":1},{"id":42,"uuid":"e1668179-44a0-413a-a427-49b8658b8bd0","title":"Nice way to create HashMaps in Java","slug":"nice-way-to-create-hashmaps-in-java","markdown":"In my blog post from december 14th, 2009 I posted a way to create\nHashMaps on-the-fly:\n[http://depold.tumblr.com/post/2069109153/hashmaps-on-the-fly](http://depold.tumblr.com/post/2069109153/hashmaps-on-the-fly)\n\nToday I just released a helper collection (currently only containing one\nhelper :D) for Java-Stuff. The contained helper is a MapBuilder, which\nallows you to create HashMaps in Java in an easy way. Including the\nclass you can just do the following:\n\n> `Map map = MapBuilder.build(``\"key1\", 123,\"key2\", 345,\"key3\", 456 );`\n\nSo if you want to, checkout the following page:\n[http://github.com/sdepold/com.depold.helpers](http://github.com/sdepold/com.depold.helpers)\n","html":"<p>In my blog post from december 14th, 2009 I posted a way to create <br />\nHashMaps on-the-fly: <br />\n<a href=\"http://depold.tumblr.com/post/2069109153/hashmaps-on-the-fly\">http://depold.tumblr.com/post/2069109153/hashmaps-on-the-fly</a></p>\n\n<p>Today I just released a helper collection (currently only containing one <br />\nhelper :D) for Java-Stuff. The contained helper is a MapBuilder, which <br />\nallows you to create HashMaps in Java in an easy way. Including the <br />\nclass you can just do the following:</p>\n\n<blockquote>\n  <p><code>Map map = MapBuilder.build(``\"key1\", 123,\"key2\", 345,\"key3\", 456 );</code></p>\n</blockquote>\n\n<p>So if you want to, checkout the following page: <br />\n<a href=\"http://github.com/sdepold/com.depold.helpers\">http://github.com/sdepold/com.depold.helpers</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2009-12-21T16:28:00.000Z","created_by":1,"updated_at":"2009-12-21T16:28:00.000Z","updated_by":1,"published_at":"2009-12-21T16:28:00.000Z","published_by":1},{"id":43,"uuid":"9decf84f-abb2-473c-93af-13d4c8c3c77f","title":"HashMaps on-the-fly","slug":"hashmaps-on-the-fly","markdown":"Da ich derzeit studienbedingt mit Java hantiere, fiel mir auf, was fr\nein Krampf das Erstellen von HashMaps in Java ist. Vom Durchiterieren\nsei an dieser Stelle noch gar nicht die Rede!\n\nDa ich aus der JavaScript/Ruby-Welt komme und dort Hashes Gang und Gebe\nsind, war ich leicht schockiert :D\n\nWie also kann man eine HashMap erzeugen?\n\n> Map\\<String, List\\<String» map = new HashMap\\<String, List\\<String»();\n> \\\n> map.put(“key”, new ArrayList\\<String\\>());\\\n> `Map<String, List<String>> map = new HashMap<String, List<String>>(); map.put(\"key\", new ArrayList<String>());`\n\nIst doch intuitiv oder? ;) Nur zum Vergleich in Rails:\n\n> map = {:key =\\> []}\n\nDa ich fr meinen Code eine Methode gesucht habe, eine HashMap *inline*\nzu bergeben, musste Google herhalten und es kam folgendes heraus:\n\n> `new HashMap<String, List<String>>(){{`put(“key1”, new\n> ArrayList\\<String\\>());\\\n> put(“key2”, new ArrayList\\<String\\>());\\\n> }}\n\nIch spare mir an dieser Stelle mal einen Ruby-Vergleich. Vielmehr werde\nich mich mal darum bemhen einen Builder fr Hashes zu basteln.\n\n… naaa gut doch noch schnell das Ruby-Pendent :D\n\n> `{:key1 => [], :key2 => []}`\n","html":"<p>Da ich derzeit studienbedingt mit Java hantiere, fiel mir auf, was fr <br />\nein Krampf das Erstellen von HashMaps in Java ist. Vom Durchiterieren <br />\nsei an dieser Stelle noch gar nicht die Rede!</p>\n\n<p>Da ich aus der JavaScript/Ruby-Welt komme und dort Hashes Gang und Gebe <br />\nsind, war ich leicht schockiert :D</p>\n\n<p>Wie also kann man eine HashMap erzeugen?</p>\n\n<blockquote>\n  <p>Map\\<String, List\\<String» map = new HashMap\\<String, List\\<String»();\n  \\\n  map.put(“key”, new ArrayList\\<String\\>());\\\n  <code>Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;String, List&lt;String&gt;&gt;(); map.put(\"key\", new ArrayList&lt;String&gt;());</code></p>\n</blockquote>\n\n<p>Ist doch intuitiv oder? ;) Nur zum Vergleich in Rails:</p>\n\n<blockquote>\n  <p>map = {:key => []}</p>\n</blockquote>\n\n<p>Da ich fr meinen Code eine Methode gesucht habe, eine HashMap <em>inline</em> <br />\nzu bergeben, musste Google herhalten und es kam folgendes heraus:</p>\n\n<blockquote>\n  <p><code>new HashMap&lt;String, List&lt;String&gt;&gt;(){{</code>put(“key1”, new\n  ArrayList\\<String\\>());\\\n  put(“key2”, new ArrayList\\<String\\>());\\\n  }}</p>\n</blockquote>\n\n<p>Ich spare mir an dieser Stelle mal einen Ruby-Vergleich. Vielmehr werde <br />\nich mich mal darum bemhen einen Builder fr Hashes zu basteln.</p>\n\n<p>… naaa gut doch noch schnell das Ruby-Pendent :D</p>\n\n<blockquote>\n  <p><code>{:key1 =&gt; [], :key2 =&gt; []}</code></p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2009-12-14T22:51:00.000Z","created_by":1,"updated_at":"2009-12-14T22:51:00.000Z","updated_by":1,"published_at":"2009-12-14T22:51:00.000Z","published_by":1},{"id":44,"uuid":"bb09d02c-740d-4251-a0db-661d2e4a6c8f","title":"Mitarbeit / Collaboration an einem Heroku-Projekt","slug":"mitarbeit-collaboration-an-einem-heroku-projekt","markdown":"Wer zur Mitarbeit an einem Heroku Projekt eingeladen wird, muss entgegen\nder Anleitung auf\n[http://docs.heroku.com/sharing](http://docs.heroku.com/sharing) zuvor\nnoch einen zustzlichen Schritt durchfhren. Versucht man direkt einen\nCheckout des Projektes, schlgt dieser Vorgang fehl.\n\n> git clone -o heroku git@heroku.com:myapp.git\\\n> Initialized empty Git repository in /Users/user/Projects/myapp/.git/\\\n> Permission denied (publickey).\\\n>  fatal: The remote end hung up unexpectedly\n\nDamit man sich beim Heroku-Server erfolgreich authentifizieren kann,\nmuss zunchst ein SSH-Key erstellt werden und dieser daraufhin an Heroku\ngeschickt werden.\n\n> heroku keys:add \\~/.ssh/id\\_rsa.pub\\\n>  Enter your Heroku credentials.\\\n>  Email: meine@adresse.com\\\n>  Password: \\*\\*\\*\\*\\*\\*\\*\\*\\*\\\n>  Uploading ssh public key /Users/user/.ssh/id\\_rsa.pub\n\nVersucht man nun nochmals das entsprechende Repository zu klonen,\ngeschieht dies, wie etwa von Github gewohnt.\n\n> git clone -o heroku git@heroku.com:myapp.git\\\n>  Initialized empty Git repository in /Users/user/Projects/myapp/.git/\\\n> remote: Counting objects: 395, done.\\\n>  remote: Compressing objects: 100% (342/342), done.\\\n>  remote: Total 395 (delta 55), reused 217 (delta 12)\\\n>  Receiving objects: 100% (395/395), 269.24 KiB | 234 KiB/s, done.\\\n> Resolving deltas: 100% (55/55), done.\n\nDas Arbeiten kann los gehen :)\n","html":"<p>Wer zur Mitarbeit an einem Heroku Projekt eingeladen wird, muss entgegen <br />\nder Anleitung auf <br />\n<a href=\"http://docs.heroku.com/sharing\">http://docs.heroku.com/sharing</a> zuvor\nnoch einen zustzlichen Schritt durchfhren. Versucht man direkt einen <br />\nCheckout des Projektes, schlgt dieser Vorgang fehl.</p>\n\n<blockquote>\n  <p>git clone -o heroku git@heroku.com:myapp.git\\\n  Initialized empty Git repository in /Users/user/Projects/myapp/.git/\\\n  Permission denied (publickey).\\\n   fatal: The remote end hung up unexpectedly</p>\n</blockquote>\n\n<p>Damit man sich beim Heroku-Server erfolgreich authentifizieren kann, <br />\nmuss zunchst ein SSH-Key erstellt werden und dieser daraufhin an Heroku <br />\ngeschickt werden.</p>\n\n<blockquote>\n  <p>heroku keys:add \\~/.ssh/id_rsa.pub\\\n   Enter your Heroku credentials.\\\n   Email: meine@adresse.com\\\n   Password: *********\\\n   Uploading ssh public key /Users/user/.ssh/id_rsa.pub</p>\n</blockquote>\n\n<p>Versucht man nun nochmals das entsprechende Repository zu klonen, <br />\ngeschieht dies, wie etwa von Github gewohnt.</p>\n\n<blockquote>\n  <p>git clone -o heroku git@heroku.com:myapp.git\\\n   Initialized empty Git repository in /Users/user/Projects/myapp/.git/\\\n  remote: Counting objects: 395, done.\\\n   remote: Compressing objects: 100% (342/342), done.\\\n   remote: Total 395 (delta 55), reused 217 (delta 12)\\\n   Receiving objects: 100% (395/395), 269.24 KiB | 234 KiB/s, done.\\\n  Resolving deltas: 100% (55/55), done.</p>\n</blockquote>\n\n<p>Das Arbeiten kann los gehen :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2009-10-03T19:39:00.000Z","created_by":1,"updated_at":"2009-10-03T19:39:00.000Z","updated_by":1,"published_at":"2009-10-03T19:39:00.000Z","published_by":1},{"id":45,"uuid":"2f58ae34-c6b2-49ac-96f7-a16c9ed33bbe","title":"Farewell make ... Hello gulp ...","slug":"farewell-make-hello-gulp","markdown":"At work, we recently decided to switch our JavaScript coding style from a chaotic mess to a more consistant, disciplined and streamlined masterpiece. In order to achieve that goal, we decided to include JSHint in our build process and to configure it as strict as possible. As our codebase is relatively young, it was quite easy to get things green and to make the linter happy. Inspired by this move and by the consistent code style that followed, I thought about making the [Sequelize CLI](https://github.com/sequelize/cli) compatible as well.\n\n## Makefile\n\nWhen the main repository of sequelize switched its test framework in 2013 from BusterJS to Mocha it came up with a **Makefile** which collected the paths to the test files and called mocha with them accordingly. In the first place I thought, that the file might look scary but that it is certainly good enough and that I will most likely never have to touch it again. Well, that has been until I opened it in my favorite text editor (which has been configured to convert all tabs to space automatically), made some slight adjustments, hit the save button and ran **make test**.\n\n![code, y u no work](/content/images/2014/Sep/bq42u.jpg)\n\nThose of you who are familiar with Makefiles (and which most likely did the same mistake several times already) should know what followed:\n\n```lang-bash\nMakefile:18: *** missing separator.  Stop.\n```\n\nSo after some googling and debugging I finally found out about make's nature to dislike *spaces* and to love well formatted *tabs*. \"Alright\", I thought and went on with my changes. I finished my stuff, committed the changes and turned my focus to something more pleasant, meaning extending the Sequelize core and writing some additional tests. And while I was happily coding, I found myself opening the Makefile from time to time accidently, which sent me a shudder down my spine and which made me think, if it really has to be that ugly and unmaintainable.\n\nAnd then ... one day ... I stumbled over Gulp.\n\n## Gulp\n\nThe first time I looked at that *streaming build system* for a *simpler and more intuitive build*, I was stunned by its simplicity and flexibility. It just makes everything exactly as one would expect it: \n\n1. You define a task with `gulp.task` by giving it a name and a function.\n2. You can define dependencies just by naming them in an array.\n3. You call the gulp CLI with the name of respective task.\n4. You see the results. Boom. Case closed.\n\nHere is a very simple example of a gulp task which gets defined in a `gulpfile.js`:\n\n```lang-javascript\ngulp.task(\"task-name\", [\"dependency1\", \"dependency2\"], function () {\n  // * do something synchronous\n  // * or something asynchronous by\n  //   * returning a promise\n  //   * or specifying and calling a callback param\n});\n```\n\nDue to the fact that my main use case for the Makefile has always been to run the Mocha tests, I opened Google, searched for **gulp mocha** and found a [nice looking library](https://github.com/sindresorhus/gulp-mocha), that does not only exactly solve the problem I had, but also does that in a very minimal and simple manner:\n\n```lang-javascript\ngulp.task('test', function () {\n  gulp\n    .src(path.resolve(__dirname, \"test\", \"**\", \"*.test.js\"), { read: false })\n    .pipe(mocha());\n});\n```\n\nOnce saved as `gulpfile.js` and executed via `node_modules/.bin/gulp test` (I like locally installed modules) it just worked. Cool! So next task was to actually lint/validate the codebase before running the tests. So I went to Google again, fired up a search for **gulp jshint** and again [found exactly](https://github.com/spenceralger/gulp-jshint)  what I was looking for.\n\n```lang-javascript\ngulp.task(\"lint\", function () {\n  gulp\n    .src([\n      path.resolve(__dirname, \"gulpfile.js\"),\n      path.resolve(__dirname, \"bin\", \"sequelize\"),\n      path.resolve(__dirname, \"lib\", \"**\", \"*.js\"),\n      path.resolve(__dirname, \"test\", \"**\", \"*.js\")\n    ])\n    .pipe(jshint())\n    .pipe(jshint.reporter(\"default\"));\n});\n```\nNow, that was easy! The configuration of the plugin can be done via a `.jshintrc` which makes the gulpfile less cluttered and reflects the standard behavior for jshint.\n\n### Default task\n\nWhen you run gulp without any additional parameters it will search for a task definition `default`. For the sequelize CLI the default task is to lint the project and to run the tests afterwards. The respective code looks like this:\n\n```lang-javascript\ngulp.task(\"default\", [\"lint\", \"test\"], function () {});\n```\n\nIt basically defines an empty task which is called `default` and which depends on the `lint` and the `test`. Thats it!\n\n## tl;dr\n\nIf you are in a Node.JS environment and need some kind of build/task runner system, I would highly recommend to at least take a look at Gulp. In my opinion, it is not only easier to use but also looks leaner and more like Node.JS that its alternatives.\n\n## Links\n\n* [Obsolete Makefile of sequelize/cli](https://github.com/sequelize/cli/blob/eff83454e744ff3c71a042edf5842e8b7ca56ca4/Makefile)\n* [gulpfile.js of sequelize/cli](https://github.com/sequelize/cli/blob/master/gulpfile.js)\n* [.jshintrc of sequelize/cli](https://github.com/sequelize/cli/blob/master/.jshintrc)\n* [Gulp](http://gulpjs.com/)\n* [gulp-mocha](https://github.com/sindresorhus/gulp-mocha)\n* [gulp-jshint](https://github.com/spenceralger/gulp-jshint)\n\n\n","html":"<p>At work, we recently decided to switch our JavaScript coding style from a chaotic mess to a more consistant, disciplined and streamlined masterpiece. In order to achieve that goal, we decided to include JSHint in our build process and to configure it as strict as possible. As our codebase is relatively young, it was quite easy to get things green and to make the linter happy. Inspired by this move and by the consistent code style that followed, I thought about making the <a href=\"https://github.com/sequelize/cli\">Sequelize CLI</a> compatible as well.</p>\n\n<h2 id=\"makefile\">Makefile</h2>\n\n<p>When the main repository of sequelize switched its test framework in 2013 from BusterJS to Mocha it came up with a <strong>Makefile</strong> which collected the paths to the test files and called mocha with them accordingly. In the first place I thought, that the file might look scary but that it is certainly good enough and that I will most likely never have to touch it again. Well, that has been until I opened it in my favorite text editor (which has been configured to convert all tabs to space automatically), made some slight adjustments, hit the save button and ran <strong>make test</strong>.</p>\n\n<p><img src=\"/content/images/2014/Sep/bq42u.jpg\" alt=\"code, y u no work\" /></p>\n\n<p>Those of you who are familiar with Makefiles (and which most likely did the same mistake several times already) should know what followed:</p>\n\n<pre><code class=\"lang-bash\">Makefile:18: *** missing separator.  Stop.  \n</code></pre>\n\n<p>So after some googling and debugging I finally found out about make's nature to dislike <em>spaces</em> and to love well formatted <em>tabs</em>. \"Alright\", I thought and went on with my changes. I finished my stuff, committed the changes and turned my focus to something more pleasant, meaning extending the Sequelize core and writing some additional tests. And while I was happily coding, I found myself opening the Makefile from time to time accidently, which sent me a shudder down my spine and which made me think, if it really has to be that ugly and unmaintainable.</p>\n\n<p>And then ... one day ... I stumbled over Gulp.</p>\n\n<h2 id=\"gulp\">Gulp</h2>\n\n<p>The first time I looked at that <em>streaming build system</em> for a <em>simpler and more intuitive build</em>, I was stunned by its simplicity and flexibility. It just makes everything exactly as one would expect it: </p>\n\n<ol>\n<li>You define a task with <code>gulp.task</code> by giving it a name and a function.  </li>\n<li>You can define dependencies just by naming them in an array.  </li>\n<li>You call the gulp CLI with the name of respective task.  </li>\n<li>You see the results. Boom. Case closed.</li>\n</ol>\n\n<p>Here is a very simple example of a gulp task which gets defined in a <code>gulpfile.js</code>:</p>\n\n<pre><code class=\"lang-javascript\">gulp.task(\"task-name\", [\"dependency1\", \"dependency2\"], function () {  \n  // * do something synchronous\n  // * or something asynchronous by\n  //   * returning a promise\n  //   * or specifying and calling a callback param\n});\n</code></pre>\n\n<p>Due to the fact that my main use case for the Makefile has always been to run the Mocha tests, I opened Google, searched for <strong>gulp mocha</strong> and found a <a href=\"https://github.com/sindresorhus/gulp-mocha\">nice looking library</a>, that does not only exactly solve the problem I had, but also does that in a very minimal and simple manner:</p>\n\n<pre><code class=\"lang-javascript\">gulp.task('test', function () {  \n  gulp\n    .src(path.resolve(__dirname, \"test\", \"**\", \"*.test.js\"), { read: false })\n    .pipe(mocha());\n});\n</code></pre>\n\n<p>Once saved as <code>gulpfile.js</code> and executed via <code>node_modules/.bin/gulp test</code> (I like locally installed modules) it just worked. Cool! So next task was to actually lint/validate the codebase before running the tests. So I went to Google again, fired up a search for <strong>gulp jshint</strong> and again <a href=\"https://github.com/spenceralger/gulp-jshint\">found exactly</a>  what I was looking for.</p>\n\n<pre><code class=\"lang-javascript\">gulp.task(\"lint\", function () {  \n  gulp\n    .src([\n      path.resolve(__dirname, \"gulpfile.js\"),\n      path.resolve(__dirname, \"bin\", \"sequelize\"),\n      path.resolve(__dirname, \"lib\", \"**\", \"*.js\"),\n      path.resolve(__dirname, \"test\", \"**\", \"*.js\")\n    ])\n    .pipe(jshint())\n    .pipe(jshint.reporter(\"default\"));\n});\n</code></pre>\n\n<p>Now, that was easy! The configuration of the plugin can be done via a <code>.jshintrc</code> which makes the gulpfile less cluttered and reflects the standard behavior for jshint.</p>\n\n<h3 id=\"defaulttask\">Default task</h3>\n\n<p>When you run gulp without any additional parameters it will search for a task definition <code>default</code>. For the sequelize CLI the default task is to lint the project and to run the tests afterwards. The respective code looks like this:</p>\n\n<pre><code class=\"lang-javascript\">gulp.task(\"default\", [\"lint\", \"test\"], function () {});  \n</code></pre>\n\n<p>It basically defines an empty task which is called <code>default</code> and which depends on the <code>lint</code> and the <code>test</code>. Thats it!</p>\n\n<h2 id=\"tldr\">tl;dr</h2>\n\n<p>If you are in a Node.JS environment and need some kind of build/task runner system, I would highly recommend to at least take a look at Gulp. In my opinion, it is not only easier to use but also looks leaner and more like Node.JS that its alternatives.</p>\n\n<h2 id=\"links\">Links</h2>\n\n<ul>\n<li><a href=\"https://github.com/sequelize/cli/blob/eff83454e744ff3c71a042edf5842e8b7ca56ca4/Makefile\">Obsolete Makefile of sequelize/cli</a></li>\n<li><a href=\"https://github.com/sequelize/cli/blob/master/gulpfile.js\">gulpfile.js of sequelize/cli</a></li>\n<li><a href=\"https://github.com/sequelize/cli/blob/master/.jshintrc\">.jshintrc of sequelize/cli</a></li>\n<li><a href=\"http://gulpjs.com/\">Gulp</a></li>\n<li><a href=\"https://github.com/sindresorhus/gulp-mocha\">gulp-mocha</a></li>\n<li><a href=\"https://github.com/spenceralger/gulp-jshint\">gulp-jshint</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-08-30T06:11:45.000Z","created_by":1,"updated_at":"2014-09-05T08:01:01.000Z","updated_by":1,"published_at":"2014-09-05T07:53:59.000Z","published_by":1},{"id":46,"uuid":"d1a4d507-cc5a-4972-90c3-a7127c7827b4","title":"Windows Phone ... A recap","slug":"windows-phone-a-recap","markdown":"* july 2013 bought\n* major updates\n  * http://www.wpcentral.com/lumia-black\n  * ","html":"<ul>\n<li>july 2013 bought</li>\n<li>major updates\n<ul><li><a href='http://www.wpcentral.com/lumia-black'>http://www.wpcentral.com/lumia-black</a></li>\n*</ul></li>\n</ul>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-09-09T06:23:00.000Z","created_by":1,"updated_at":"2014-09-11T08:32:59.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":47,"uuid":"ea7bfc63-7c4a-44e5-b54d-be45bb97ae57","title":"Using gulp all the way down","slug":"using-gulp-all-the-way-down","markdown":"","html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-09-09T06:23:20.000Z","created_by":1,"updated_at":"2014-09-09T06:23:20.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":48,"uuid":"c95433d0-01ec-4480-ac4e-9fd19413b4be","title":"Windows Phone Development","slug":"windows-phone-development","markdown":"","html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-09-09T06:23:34.000Z","created_by":1,"updated_at":"2014-09-09T06:23:34.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":49,"uuid":"be26b99b-1d47-4f7e-bcf3-87a4749a6218","title":"Even more contentful ruby apps","slug":"even-more-contentful-ruby-apps","markdown":"Some weeks ago I posted about [kickstarting a ruby application with Contentful](/contentful-ruby-apps/) as its data backend. Now that I gained some field experience with that setup, it made some caveats pretty obvious. This blog post will show you some improvements and also some nicites we added to our app in the last weeks.\n\n![Contentful](/content/images/2014/Sep/127490-baf54c64-e0b3-4298-9178-bd6b490b3b69-illustration_2520cloud-original-1397144208.jpg)\n\nWe found out that the previously suggested approach had three major issues, which get addressed in this post:\n\n* The configuration was in the model.\n* The models weren't clearly namespaced.\n* The model files needed to be loaded manually.\n\n## Configuration in the model\n\nA model used too look like this:\n\n```language-ruby\nclass BlogPost < ContentModel\n  CONTENT_TYPE_ID = \"5FPTMiJ7R6uycIcC4EiCYc\"\nend\n```\n\nBesides the fact that it looks kinda ugly, it is also pretty hard to change that value for example in a test setup. Imagine that you want to write tests which actually call the Contentful backend. Wouldn't it be nice to be independent from the production data? Or what if you would like to have another data space for different server environments? \n\nIn order to fix that, it is a good idea to move the configuration to a separate file. We called it `contentful.yml`:\n\n```language-yml\nshared:\n  space_id: svq072ikci2q\n  mapping:\n    blog_post: 5FPTMiJ7R6uycIcC4EiCYc\n    tag:       1XvAy0wOG8WEUQGsYAMYcU\n```\n\nAnd here is the respective initializer `load_contentful.rb`:\n\n```language-ruby\nrequire \"yaml\"\n\nconfig_yml        = YAML.load_file(\"./contentful.yml\")\nCONTENTFUL_CONFIG = config_yml[\"shared\"].merge(config_yml[ENV['RACK_ENV']] || {})\n```\n\nRequiring the file will make the constant `CONTENTFUL_CONFIG` available. Having that said, it is no longer necessary to have the content type id in the model, which makes the blog post model look like this:\n\n```language-ruby\nclass BlogPost < ContentModel\nend\n```\n\n## Introducing the namespace\n\nIn order to have clear separation of business logic and content, we decided to move all the contentful models to a namespace called `Content`. That basically meant moving all files from `models` to `models/content` and to rename `models/content_model.rb` to `models/content/base.rb`. Once that was done, we just wrapped everything in the respective module:\n\n```language-ruby\nmodule Content\n  class BlogPost < Base\n  end\nend\n```\n\n## Entry mapping\n\nOur new and shiny `base.rb` now utilizes the config file and went straight into the new namespace:\n\n```language-ruby\nrequire \"contentful\"\nrequire_relative \"../../config/contentful\"\n\nmodule Content\n  class Base < Contentful::Entry\n    class << self\n      def entry_mapping\n        @entry_mapping ||= CONTENTFUL_CONFIG.fetch(\"mapping\").map do |klass, content_type_id|\n          require_relative(klass)\n          [content_type_id, Content.const_get(klass.classify)]\n        end.to_h\n      end\n      alias_method :populate_classes, :entry_mapping\n\n      def delivery_client\n        @delivery_client ||= Contentful::Client.new(\n          access_token:    ENV.fetch(\"CONTENTFUL_ACCESS_TOKEN\"),\n          space:           CONTENTFUL_CONFIG.fetch(\"space_id\"),\n          dynamic_entries: :auto,\n          entry_mapping:   entry_mapping\n        )\n      end\n    end\n    \n    # the other code\n  end\n  \n  Base.populate_classes\nend\n```\n\nPlease note the second last line. Here we are making the other content classes available. The idea behind it, is to load the respective files and to return a hash with the content type ids as key and the classes as value.\n\n## Entry mapping with autoloading\n\nIf you are in an environment where autoloading of files is supported, you might think that the `require_relative(klass)` statement in the `entry_mapping` method looks ugly. And by that you are perfectly right. The good thing is: Just delete that line and your framework will hopefully find out by itself how to handle `Content.const_get(klass.classify)`. Furthermore you can also remove the second last line and eventually the config loader. The result will look like this:\n\n```language-ruby\nrequire \"contentful\"\n\nmodule Content\n  class Base < Contentful::Entry\n    class << self\n      def entry_mapping\n        @entry_mapping ||= CONTENTFUL_CONFIG.fetch(\"mapping\").map do |klass, content_type_id|\n          [content_type_id, Content.const_get(klass.classify)]\n        end.to_h\n      end\n\n      def delivery_client\n        @delivery_client ||= Contentful::Client.new(\n          access_token:    ENV.fetch(\"CONTENTFUL_ACCESS_TOKEN\"),\n          space:           CONTENTFUL_CONFIG.fetch(\"space_id\"),\n          dynamic_entries: :auto,\n          entry_mapping:   entry_mapping\n        )\n      end\n    end\n    \n    # the other code\n  end\nend\n```\n\n## Storing the access token in the config file\n\nIf you trust your CVS enough to store sensitive data such as credentials in it, you can also add the access token in your config file á la:\n\n```language-yaml\nshared:\n  access_token: 985174a630cf3203f578e747250bd9a9a9b6250e0a0be61367c2e9338b82d983\n  space_id:     svq072ikci2q\n  mapping:\n    blog_post: 5FPTMiJ7R6uycIcC4EiCYc\n    tag:       1XvAy0wOG8WEUQGsYAMYcU\n```\n\nNow you can read the access token in `Content::Base.delivery_client` and alternatively fall back to the environment variables:\n\n```language-ruby\ndef delivery_client\n  @delivery_client ||= Contentful::Client.new(\n    access_token:    CONTENTFUL_CONFIG.fetch(\"access_token\", ENV[\"CONTENTFUL_ACCESS_TOKEN\"]),\n    space:           CONTENTFUL_CONFIG.fetch(\"space_id\"),\n    dynamic_entries: :auto,\n    entry_mapping:   entry_mapping\n  )\nend\n```\n\n## Additional features\n\n### has_fields\n\nAs we don't want to type `fields[:name]` all the time, let's introduce a little helper method called `has_fields`, which takes an arbitrary amount of symbols and creates instance methods for the respective fields. The usage looks like this:\n\n```language-ruby\nmodule Content\n  class BlogPost < Base\n    has_fields :headline, :published_at, :content, :tags\n  end\nend\n```\n\nHaving defined the fields, we can later call the respective methods on the instances:\n\n```language-ruby\npost = Content::BlogPost.first\npost.headline     # Will return the result of fields[:headline]\npost.published_at # Will return the result of fields[:publishedAt]\n```\n\nAnd here is the helper itself:\n\n```language-ruby\nmodule Content\n  class Base < Contentful::Entry\n    class << self\n      def has_fields(*args)\n        [*args].each do |field_name|\n          define_method(field_name.to_s) do\n            fields.public_send(:[], field_name.to_s.camelize(:lower).to_sym)\n          end\n        end\n      end\n      \n      # here comes the method missing definition\n    end\n  end\nend\n```\n\n### has_image\n\nAs pure text is pretty boring, I extended the blog post model with an additional field that references assets. In order to fetch the image's url, we can do this:\n\n```language-ruby\nblog_post.fields[:image].fields[:file].url\n```\n\nAs this is quite a lot to type, let's define a helper method that returns the image's url as well as a method that returns whether or not there is an image. The usage would look like this, where image is the name of the field in Contentful:\n\n```language-ruby\nmodule Content\n  class BlogPost < Base\n    has_image :image\n  end\nend\n```\n\nHaving that defined, we can now use the following instance methods:\n\n```language-ruby\npost = Content::BlogPost.first\npost.image?    # Returns true or false\npost.image_url # Returns the URL of the image\n```\n\nAnd here is the helper method:\n\n```language-ruby\nmodule Content\n  class Base < Contentful::Entry\n    class << self\n      def has_image(field_name)\n        define_method(\"#{field_name}_url\") do\n          if public_send(\"#{field_name}?\")\n            if asset = fields[field_name]\n              asset.fields[:file].url\n            end\n          end\n        end\n\n        define_method(\"#{field_name}?\") do\n          fields.key?(field_name)\n        end\n      end\n    end\n  end\nend\n```\n\n## Summary\n\nThis post decribed the introduction of a namespace for contentful models as well the usage of a configuration file which contains the mapping of classes to content type ids. Furthermore it explained some handy helper methods which makes the development easier and more ruby-esque. Having that said, I think it would be a good idea to either move that stuff right into the contentful gem or to create another gem which does all that stuff for us, so that we basically only have to inherit from `Content::Base`. Depending on my spare time I might come up with such a gem and write another blog post about, once its done.\n\n## Links\n\n* [Github repository with the latest changes](https://github.com/sdepold/contentful_blog)\n* [Github repository with the previous version](https://github.com/sdepold/contentful_blog/tree/v1)\n* [Github diff view](https://github.com/sdepold/contentful_blog/compare/v1...master)","html":"<p>Some weeks ago I posted about <a href=\"/contentful-ruby-apps/\">kickstarting a ruby application with Contentful</a> as its data backend. Now that I gained some field experience with that setup, it made some caveats pretty obvious. This blog post will show you some improvements and also some nicites we added to our app in the last weeks.</p>\n\n<p><img src=\"/content/images/2014/Sep/127490-baf54c64-e0b3-4298-9178-bd6b490b3b69-illustration_2520cloud-original-1397144208.jpg\" alt=\"Contentful\" /></p>\n\n<p>We found out that the previously suggested approach had three major issues, which get addressed in this post:</p>\n\n<ul>\n<li>The configuration was in the model.</li>\n<li>The models weren't clearly namespaced.</li>\n<li>The model files needed to be loaded manually.</li>\n</ul>\n\n<h2 id=\"configurationinthemodel\">Configuration in the model</h2>\n\n<p>A model used too look like this:</p>\n\n<pre><code class=\"language-ruby\">class BlogPost &lt; ContentModel  \n  CONTENT_TYPE_ID = \"5FPTMiJ7R6uycIcC4EiCYc\"\nend  \n</code></pre>\n\n<p>Besides the fact that it looks kinda ugly, it is also pretty hard to change that value for example in a test setup. Imagine that you want to write tests which actually call the Contentful backend. Wouldn't it be nice to be independent from the production data? Or what if you would like to have another data space for different server environments? </p>\n\n<p>In order to fix that, it is a good idea to move the configuration to a separate file. We called it <code>contentful.yml</code>:</p>\n\n<pre><code class=\"language-yml\">shared:  \n  space_id: svq072ikci2q\n  mapping:\n    blog_post: 5FPTMiJ7R6uycIcC4EiCYc\n    tag:       1XvAy0wOG8WEUQGsYAMYcU\n</code></pre>\n\n<p>And here is the respective initializer <code>load_contentful.rb</code>:</p>\n\n<pre><code class=\"language-ruby\">require \"yaml\"\n\nconfig_yml        = YAML.load_file(\"./contentful.yml\")  \nCONTENTFUL_CONFIG = config_yml[\"shared\"].merge(config_yml[ENV['RACK_ENV']] || {})  \n</code></pre>\n\n<p>Requiring the file will make the constant <code>CONTENTFUL_CONFIG</code> available. Having that said, it is no longer necessary to have the content type id in the model, which makes the blog post model look like this:</p>\n\n<pre><code class=\"language-ruby\">class BlogPost &lt; ContentModel  \nend  \n</code></pre>\n\n<h2 id=\"introducingthenamespace\">Introducing the namespace</h2>\n\n<p>In order to have clear separation of business logic and content, we decided to move all the contentful models to a namespace called <code>Content</code>. That basically meant moving all files from <code>models</code> to <code>models/content</code> and to rename <code>models/content_model.rb</code> to <code>models/content/base.rb</code>. Once that was done, we just wrapped everything in the respective module:</p>\n\n<pre><code class=\"language-ruby\">module Content  \n  class BlogPost &lt; Base\n  end\nend  \n</code></pre>\n\n<h2 id=\"entrymapping\">Entry mapping</h2>\n\n<p>Our new and shiny <code>base.rb</code> now utilizes the config file and went straight into the new namespace:</p>\n\n<pre><code class=\"language-ruby\">require \"contentful\"  \nrequire_relative \"../../config/contentful\"\n\nmodule Content  \n  class Base &lt; Contentful::Entry\n    class &lt;&lt; self\n      def entry_mapping\n        @entry_mapping ||= CONTENTFUL_CONFIG.fetch(\"mapping\").map do |klass, content_type_id|\n          require_relative(klass)\n          [content_type_id, Content.const_get(klass.classify)]\n        end.to_h\n      end\n      alias_method :populate_classes, :entry_mapping\n\n      def delivery_client\n        @delivery_client ||= Contentful::Client.new(\n          access_token:    ENV.fetch(\"CONTENTFUL_ACCESS_TOKEN\"),\n          space:           CONTENTFUL_CONFIG.fetch(\"space_id\"),\n          dynamic_entries: :auto,\n          entry_mapping:   entry_mapping\n        )\n      end\n    end\n\n    # the other code\n  end\n\n  Base.populate_classes\nend  \n</code></pre>\n\n<p>Please note the second last line. Here we are making the other content classes available. The idea behind it, is to load the respective files and to return a hash with the content type ids as key and the classes as value.</p>\n\n<h2 id=\"entrymappingwithautoloading\">Entry mapping with autoloading</h2>\n\n<p>If you are in an environment where autoloading of files is supported, you might think that the <code>require_relative(klass)</code> statement in the <code>entry_mapping</code> method looks ugly. And by that you are perfectly right. The good thing is: Just delete that line and your framework will hopefully find out by itself how to handle <code>Content.const_get(klass.classify)</code>. Furthermore you can also remove the second last line and eventually the config loader. The result will look like this:</p>\n\n<pre><code class=\"language-ruby\">require \"contentful\"\n\nmodule Content  \n  class Base &lt; Contentful::Entry\n    class &lt;&lt; self\n      def entry_mapping\n        @entry_mapping ||= CONTENTFUL_CONFIG.fetch(\"mapping\").map do |klass, content_type_id|\n          [content_type_id, Content.const_get(klass.classify)]\n        end.to_h\n      end\n\n      def delivery_client\n        @delivery_client ||= Contentful::Client.new(\n          access_token:    ENV.fetch(\"CONTENTFUL_ACCESS_TOKEN\"),\n          space:           CONTENTFUL_CONFIG.fetch(\"space_id\"),\n          dynamic_entries: :auto,\n          entry_mapping:   entry_mapping\n        )\n      end\n    end\n\n    # the other code\n  end\nend  \n</code></pre>\n\n<h2 id=\"storingtheaccesstokenintheconfigfile\">Storing the access token in the config file</h2>\n\n<p>If you trust your CVS enough to store sensitive data such as credentials in it, you can also add the access token in your config file á la:</p>\n\n<pre><code class=\"language-yaml\">shared:  \n  access_token: 985174a630cf3203f578e747250bd9a9a9b6250e0a0be61367c2e9338b82d983\n  space_id:     svq072ikci2q\n  mapping:\n    blog_post: 5FPTMiJ7R6uycIcC4EiCYc\n    tag:       1XvAy0wOG8WEUQGsYAMYcU\n</code></pre>\n\n<p>Now you can read the access token in <code>Content::Base.delivery_client</code> and alternatively fall back to the environment variables:</p>\n\n<pre><code class=\"language-ruby\">def delivery_client  \n  @delivery_client ||= Contentful::Client.new(\n    access_token:    CONTENTFUL_CONFIG.fetch(\"access_token\", ENV[\"CONTENTFUL_ACCESS_TOKEN\"]),\n    space:           CONTENTFUL_CONFIG.fetch(\"space_id\"),\n    dynamic_entries: :auto,\n    entry_mapping:   entry_mapping\n  )\nend  \n</code></pre>\n\n<h2 id=\"additionalfeatures\">Additional features</h2>\n\n<h3 id=\"has_fields\">has_fields</h3>\n\n<p>As we don't want to type <code>fields[:name]</code> all the time, let's introduce a little helper method called <code>has_fields</code>, which takes an arbitrary amount of symbols and creates instance methods for the respective fields. The usage looks like this:</p>\n\n<pre><code class=\"language-ruby\">module Content  \n  class BlogPost &lt; Base\n    has_fields :headline, :published_at, :content, :tags\n  end\nend  \n</code></pre>\n\n<p>Having defined the fields, we can later call the respective methods on the instances:</p>\n\n<pre><code class=\"language-ruby\">post = Content::BlogPost.first  \npost.headline     # Will return the result of fields[:headline]  \npost.published_at # Will return the result of fields[:publishedAt]  \n</code></pre>\n\n<p>And here is the helper itself:</p>\n\n<pre><code class=\"language-ruby\">module Content  \n  class Base &lt; Contentful::Entry\n    class &lt;&lt; self\n      def has_fields(*args)\n        [*args].each do |field_name|\n          define_method(field_name.to_s) do\n            fields.public_send(:[], field_name.to_s.camelize(:lower).to_sym)\n          end\n        end\n      end\n\n      # here comes the method missing definition\n    end\n  end\nend  \n</code></pre>\n\n<h3 id=\"has_image\">has_image</h3>\n\n<p>As pure text is pretty boring, I extended the blog post model with an additional field that references assets. In order to fetch the image's url, we can do this:</p>\n\n<pre><code class=\"language-ruby\">blog_post.fields[:image].fields[:file].url  \n</code></pre>\n\n<p>As this is quite a lot to type, let's define a helper method that returns the image's url as well as a method that returns whether or not there is an image. The usage would look like this, where image is the name of the field in Contentful:</p>\n\n<pre><code class=\"language-ruby\">module Content  \n  class BlogPost &lt; Base\n    has_image :image\n  end\nend  \n</code></pre>\n\n<p>Having that defined, we can now use the following instance methods:</p>\n\n<pre><code class=\"language-ruby\">post = Content::BlogPost.first  \npost.image?    # Returns true or false  \npost.image_url # Returns the URL of the image  \n</code></pre>\n\n<p>And here is the helper method:</p>\n\n<pre><code class=\"language-ruby\">module Content  \n  class Base &lt; Contentful::Entry\n    class &lt;&lt; self\n      def has_image(field_name)\n        define_method(\"#{field_name}_url\") do\n          if public_send(\"#{field_name}?\")\n            if asset = fields[field_name]\n              asset.fields[:file].url\n            end\n          end\n        end\n\n        define_method(\"#{field_name}?\") do\n          fields.key?(field_name)\n        end\n      end\n    end\n  end\nend  \n</code></pre>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>This post decribed the introduction of a namespace for contentful models as well the usage of a configuration file which contains the mapping of classes to content type ids. Furthermore it explained some handy helper methods which makes the development easier and more ruby-esque. Having that said, I think it would be a good idea to either move that stuff right into the contentful gem or to create another gem which does all that stuff for us, so that we basically only have to inherit from <code>Content::Base</code>. Depending on my spare time I might come up with such a gem and write another blog post about, once its done.</p>\n\n<h2 id=\"links\">Links</h2>\n\n<ul>\n<li><a href=\"https://github.com/sdepold/contentful_blog\">Github repository with the latest changes</a></li>\n<li><a href=\"https://github.com/sdepold/contentful_blog/tree/v1\">Github repository with the previous version</a></li>\n<li><a href=\"https://github.com/sdepold/contentful_blog/compare/v1...master\">Github diff view</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-09-09T06:23:56.000Z","created_by":1,"updated_at":"2014-09-28T20:03:43.000Z","updated_by":1,"published_at":"2014-09-24T12:56:29.000Z","published_by":1},{"id":50,"uuid":"83e0b4a0-de33-4395-947e-b6ff2e49ad45","title":"Chasm - Preview","slug":"chasm-preview","markdown":"When I thought about plans for the weekend, I had in mind to fix some Sequelize CLI issues and to extend one of my personal projects I'm currently working on. This has been until I opened this one lovely email with the subject \"Project Update #37: Chasm by Discord Games LLC\". The first sentence read \"Anyone who backed at $25+ can play the Alpha build right now!\", which made me instantly stop everything I was doing and forced me to open the Humble Key Resender. After receiving my Steam key and downloading the game, I was ready to kill my weekend's spare time and to dive deeply into the world of the retro-platformer **Chasm** :)\n\n![Chasm - Alpha Access](/content/images/2014/Sep/4dd81b5deb4416c6626421dfed84a2fa_large.jpg)\n\n## Story\n\n> When a small mining community falls silent, a young soldier named Daltyn is sent to investigate. Upon arriving in the remote mountain town of Karthas, he discovers that paranormal forces have sealed the town off from the outside world. Now trapped, he's left with no option but to explore the mines below the town and uncover the source of the disturbances. Six huge procedurally-generated areas await, each lovingly crafted in a retro pixel art style.\n\nAt the current state of development, I was actually suprised to read this text on the official homepage, because one does not really find out, that your character has a name or that he has been landed in that city for a certain reason. One is basically just thrown into a snowy city with some not overly talkative people around and with an entrance to a mine. Though this sounds awkward, I was just overwhelmed by charming retro graphics and instantly started my journey through the chasm. \n\n## Gameplay\n\nThe mechanics of the game are solid and easily explained: Daltyn slays his way through the dungeons, collects herbs or essences, opens treasure boxes, spends essences to gain level ups, finds documents of former advanturers and heals himself on a fireplace from time to time. Oh and ... he is also pretty good at dying. Honestly. I didn't die more often in a game than in Chasm and I completed Zombie U, in which dying is basically one of the core concepts!\n\n![Deaths](/content/images/2014/Sep/Screenshot--11-.png)\n\nAnyway, when you manage to stay alive for long enough, you will find fireplaces every once in a while. Those do not only restore your health points but also allow you to exchange collected essences for attribute upgrades (VIT, STR, INT, LCK). Besides that you can create health or mana potions if you collected enough herbs and empty bottles.\n\n![fireplace](/content/images/2014/Sep/Screenshot--6--1.png)\n\nWhile I expected something like Zelda but in a sidescrolling feshion, I had to find out that Chasm is actually more a Castlevania, Metroid or even Megaman kind of game. And while some people automatically tend to escape by the sound of that names, I just get more and more excited about it.\n\n## Caveats\n\nWhile I would definetly recommend the game to everyone who liked one of the mentioned games, I also think there are some things missing right now. Here is a list of issues:\n\n* The story. When you open the current alpha build you instantly enter a city which does neither introduce itself nor the characters. \n* <strike>The prices. After playing ~2.5 hours I managed to reach level 4, which means I increased strength and vitality by 2 points each. I find it seriously hard to collect enough essences to make Daltyn a better soldier. Especially as all of your essences are resetted when he dies. Also creating mana and healths potions is super expensive.</strike>\n* Fall damage. Right now you don't lose any health points when you jump from high locations. As you lose HP when drowning, you should also lose HP when falling from high places.\n* Nests. After an hour of gameplay I found rat nests which spawn an unlimited amount of rats. Though I can see the charm of having a gazillion of monsters running around like crazy, there is also one issue with that: You can easily grind them. Just locate yourself in front of a nest, wait for a mob and kill it. After a while you will have enough essences to level up without ever being in serious danger. I think the nests should stop spawning monsters after a certain amount.\n\n\nBesides those issues I didn't find any critters yet. Its just a wonderful game :)\n\n## Screenshots\n\n![](/content/images/2014/Sep/Screenshot--7-.png)\n![](/content/images/2014/Sep/Screenshot--9-.png)\n![](/content/images/2014/Sep/Screenshot--12-.png)\n![](/content/images/2014/Sep/Screenshot--8-.png)\n![](/content/images/2014/Sep/Screenshot--13-.png)\n![](/content/images/2014/Sep/Screenshot--14-.png)\n\n## Links\n\n* [Chasm - The game](http://www.chasmgame.com/)\n\n## Updates\n\n**0.4.1**\n\nThough I am not entirely sure if it has not been like that before, I noticed after the todays update that one is not really losing all of the collected essences. It is more like you are dropping them at the place of death and once you go back there, you will find them swirling around and waiting for you to collect them again.\n\n**0.4.2**\n\nThe mini map has been updated. It does now look a tiny bit more like a real map rather than a Lego-esque thingy with dozens of squares on it. Sidenote: I \"finished\" the game today. Its so sad...\n\n![Fin?](/content/images/2014/Sep/Screenshot--17-.png)","html":"<p>When I thought about plans for the weekend, I had in mind to fix some Sequelize CLI issues and to extend one of my personal projects I'm currently working on. This has been until I opened this one lovely email with the subject \"Project Update #37: Chasm by Discord Games LLC\". The first sentence read \"Anyone who backed at $25+ can play the Alpha build right now!\", which made me instantly stop everything I was doing and forced me to open the Humble Key Resender. After receiving my Steam key and downloading the game, I was ready to kill my weekend's spare time and to dive deeply into the world of the retro-platformer <strong>Chasm</strong> :)</p>\n\n<p><img src=\"/content/images/2014/Sep/4dd81b5deb4416c6626421dfed84a2fa_large.jpg\" alt=\"Chasm - Alpha Access\" /></p>\n\n<h2 id=\"story\">Story</h2>\n\n<blockquote>\n  <p>When a small mining community falls silent, a young soldier named Daltyn is sent to investigate. Upon arriving in the remote mountain town of Karthas, he discovers that paranormal forces have sealed the town off from the outside world. Now trapped, he's left with no option but to explore the mines below the town and uncover the source of the disturbances. Six huge procedurally-generated areas await, each lovingly crafted in a retro pixel art style.</p>\n</blockquote>\n\n<p>At the current state of development, I was actually suprised to read this text on the official homepage, because one does not really find out, that your character has a name or that he has been landed in that city for a certain reason. One is basically just thrown into a snowy city with some not overly talkative people around and with an entrance to a mine. Though this sounds awkward, I was just overwhelmed by charming retro graphics and instantly started my journey through the chasm. </p>\n\n<h2 id=\"gameplay\">Gameplay</h2>\n\n<p>The mechanics of the game are solid and easily explained: Daltyn slays his way through the dungeons, collects herbs or essences, opens treasure boxes, spends essences to gain level ups, finds documents of former advanturers and heals himself on a fireplace from time to time. Oh and ... he is also pretty good at dying. Honestly. I didn't die more often in a game than in Chasm and I completed Zombie U, in which dying is basically one of the core concepts!</p>\n\n<p><img src=\"/content/images/2014/Sep/Screenshot--11-.png\" alt=\"Deaths\" /></p>\n\n<p>Anyway, when you manage to stay alive for long enough, you will find fireplaces every once in a while. Those do not only restore your health points but also allow you to exchange collected essences for attribute upgrades (VIT, STR, INT, LCK). Besides that you can create health or mana potions if you collected enough herbs and empty bottles.</p>\n\n<p><img src=\"/content/images/2014/Sep/Screenshot--6--1.png\" alt=\"fireplace\" /></p>\n\n<p>While I expected something like Zelda but in a sidescrolling feshion, I had to find out that Chasm is actually more a Castlevania, Metroid or even Megaman kind of game. And while some people automatically tend to escape by the sound of that names, I just get more and more excited about it.</p>\n\n<h2 id=\"caveats\">Caveats</h2>\n\n<p>While I would definetly recommend the game to everyone who liked one of the mentioned games, I also think there are some things missing right now. Here is a list of issues:</p>\n\n<ul>\n<li>The story. When you open the current alpha build you instantly enter a city which does neither introduce itself nor the characters. </li>\n<li><strike>The prices. After playing ~2.5 hours I managed to reach level 4, which means I increased strength and vitality by 2 points each. I find it seriously hard to collect enough essences to make Daltyn a better soldier. Especially as all of your essences are resetted when he dies. Also creating mana and healths potions is super expensive.</strike></li>\n<li>Fall damage. Right now you don't lose any health points when you jump from high locations. As you lose HP when drowning, you should also lose HP when falling from high places.</li>\n<li>Nests. After an hour of gameplay I found rat nests which spawn an unlimited amount of rats. Though I can see the charm of having a gazillion of monsters running around like crazy, there is also one issue with that: You can easily grind them. Just locate yourself in front of a nest, wait for a mob and kill it. After a while you will have enough essences to level up without ever being in serious danger. I think the nests should stop spawning monsters after a certain amount.</li>\n</ul>\n\n<p>Besides those issues I didn't find any critters yet. Its just a wonderful game :)</p>\n\n<h2 id=\"screenshots\">Screenshots</h2>\n\n<p><img src=\"/content/images/2014/Sep/Screenshot--7-.png\" alt=\"\" />\n<img src=\"/content/images/2014/Sep/Screenshot--9-.png\" alt=\"\" />\n<img src=\"/content/images/2014/Sep/Screenshot--12-.png\" alt=\"\" />\n<img src=\"/content/images/2014/Sep/Screenshot--8-.png\" alt=\"\" />\n<img src=\"/content/images/2014/Sep/Screenshot--13-.png\" alt=\"\" />\n<img src=\"/content/images/2014/Sep/Screenshot--14-.png\" alt=\"\" /></p>\n\n<h2 id=\"links\">Links</h2>\n\n<ul>\n<li><a href=\"http://www.chasmgame.com/\">Chasm - The game</a></li>\n</ul>\n\n<h2 id=\"updates\">Updates</h2>\n\n<p><strong>0.4.1</strong></p>\n\n<p>Though I am not entirely sure if it has not been like that before, I noticed after the todays update that one is not really losing all of the collected essences. It is more like you are dropping them at the place of death and once you go back there, you will find them swirling around and waiting for you to collect them again.</p>\n\n<p><strong>0.4.2</strong></p>\n\n<p>The mini map has been updated. It does now look a tiny bit more like a real map rather than a Lego-esque thingy with dozens of squares on it. Sidenote: I \"finished\" the game today. Its so sad...</p>\n\n<p><img src=\"/content/images/2014/Sep/Screenshot--17-.png\" alt=\"Fin?\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-09-20T19:22:57.000Z","created_by":1,"updated_at":"2014-09-24T19:40:39.000Z","updated_by":1,"published_at":"2014-09-21T20:29:15.000Z","published_by":1},{"id":51,"uuid":"a7feb087-0072-4089-8cad-9da7d5d28c5a","title":"Running io.js builds on travis","slug":"running-io-js-builds-on-travis","markdown":"**Update:** As [Keith](http://blog.depold.com/running-io-js-builds-on-travis/#comment-1842615678) pointed out, Travis rolled out a newer version of NVM [just some days ago](http://docs.travis-ci.com/user/build-environment-updates/2015-02-03/#Node.js-VM). Having that in place it's actually super easy to get started:\n\n```yml\nnode_js:\n  - \"0.10\"\n  - iojs-v1.1.0\n```\n\nThat's it :) And while you can now go and add the lovely supporter badge to your projects, I will try to find out how to not miss those changes from Travis anymore... (Do they have a changelog?)\n\n**Original post:** With the release of io.js 1.0 many Node.JS developers were asking for respective build support on Travis. While the [first answer](https://github.com/travis-ci/travis-ci/issues/3108#issuecomment-69752679) was (imho) a bit weak, discussion led to the fact that they are using NVM, which added support quite quickly. \n\n> No concrete plans at the moment. I don't know how they are going to release it, and how that would impact our existing Node.js environment. It is too early to say if/when we can support it.\n\nSo while everyone was happily installing io.js via NVM some days after it's release on their local machine, Travis was still not updating their images to ship the latest version of NVM. This is still true for the time of writing. But: There is a fix for that :)\n\n## Hackety hack\n\nWhile this might not be the best solution and one really want to switch to the official support from Travis once they are in the mood for it, you can add the following changes to your `.travis.yml` and can happily build your package with io.js:\n\n```yml\nenv:\n  - IOJS=false\n  - IOJS=1.1.0\n  \nbefore_install:\n  - curl -s https://gist.githubusercontent.com/sdepold/a7f17e4854d79b533cf1/raw/1a0acd18dfd0db0cd2d42efa00eae5095123daa2/travis.sh | bash\n```\n\nThe script is available [here](https://gist.github.com/sdepold/a7f17e4854d79b533cf1) and will check for an environment variable `IOJS` which is set to something else than `false` and uses that value to install the respective version of io.js. It will also print the just installed version of `npm` and `node`.\n\nThe output on Travis will look like this:\n\n```\n$ curl -s https://gist.githubusercontent.com/sdepold/a7f17e4854d79b533cf1/raw/1a0acd18dfd0db0cd2d42efa00eae5095123daa2/travis.sh | bash\nInstalling io.js v1.1.0 ...\nInstallation successful\nnode --version v1.1.0\nnpm --version 2.4.1\n$ npm install \n$ npm test\n```\n\n## One last thing\n\nDepending on how you set up your `.travis.yml` this approach might dramatically increase the amount of builds. But for everyone who only ever builds his project for one version of Node.JS, it should be fine. But as said, once the official support is in place, one would most likely want to switch.\n\nBy the way: You might want to add a badge to your readme file.\n\n```\n ![io.js supported](https://img.shields.io/badge/io.js-supported-green.svg?style=flat)\n```\n\nThis will render: <img src=\"https://img.shields.io/badge/io.js-supported-green.svg?style=flat\" alt=\"io.js supported\" style=\"width: 101px\">\n\n","html":"<p><strong>Update:</strong> As <a href=\"http://blog.depold.com/running-io-js-builds-on-travis/#comment-1842615678\">Keith</a> pointed out, Travis rolled out a newer version of NVM <a href=\"http://docs.travis-ci.com/user/build-environment-updates/2015-02-03/#Node.js-VM\">just some days ago</a>. Having that in place it's actually super easy to get started:</p>\n\n<pre><code class=\"language-yml\">node_js:  \n  - \"0.10\"\n  - iojs-v1.1.0\n</code></pre>\n\n<p>That's it :) And while you can now go and add the lovely supporter badge to your projects, I will try to find out how to not miss those changes from Travis anymore... (Do they have a changelog?)</p>\n\n<p><strong>Original post:</strong> With the release of io.js 1.0 many Node.JS developers were asking for respective build support on Travis. While the <a href=\"https://github.com/travis-ci/travis-ci/issues/3108#issuecomment-69752679\">first answer</a> was (imho) a bit weak, discussion led to the fact that they are using NVM, which added support quite quickly. </p>\n\n<blockquote>\n  <p>No concrete plans at the moment. I don't know how they are going to release it, and how that would impact our existing Node.js environment. It is too early to say if/when we can support it.</p>\n</blockquote>\n\n<p>So while everyone was happily installing io.js via NVM some days after it's release on their local machine, Travis was still not updating their images to ship the latest version of NVM. This is still true for the time of writing. But: There is a fix for that :)</p>\n\n<h2 id=\"hacketyhack\">Hackety hack</h2>\n\n<p>While this might not be the best solution and one really want to switch to the official support from Travis once they are in the mood for it, you can add the following changes to your <code>.travis.yml</code> and can happily build your package with io.js:</p>\n\n<pre><code class=\"language-yml\">env:  \n  - IOJS=false\n  - IOJS=1.1.0\n\nbefore_install:  \n  - curl -s https://gist.githubusercontent.com/sdepold/a7f17e4854d79b533cf1/raw/1a0acd18dfd0db0cd2d42efa00eae5095123daa2/travis.sh | bash\n</code></pre>\n\n<p>The script is available <a href=\"https://gist.github.com/sdepold/a7f17e4854d79b533cf1\">here</a> and will check for an environment variable <code>IOJS</code> which is set to something else than <code>false</code> and uses that value to install the respective version of io.js. It will also print the just installed version of <code>npm</code> and <code>node</code>.</p>\n\n<p>The output on Travis will look like this:</p>\n\n<pre><code>$ curl -s https://gist.githubusercontent.com/sdepold/a7f17e4854d79b533cf1/raw/1a0acd18dfd0db0cd2d42efa00eae5095123daa2/travis.sh | bash\nInstalling io.js v1.1.0 ...  \nInstallation successful  \nnode --version v1.1.0  \nnpm --version 2.4.1  \n$ npm install \n$ npm test\n</code></pre>\n\n<h2 id=\"onelastthing\">One last thing</h2>\n\n<p>Depending on how you set up your <code>.travis.yml</code> this approach might dramatically increase the amount of builds. But for everyone who only ever builds his project for one version of Node.JS, it should be fine. But as said, once the official support is in place, one would most likely want to switch.</p>\n\n<p>By the way: You might want to add a badge to your readme file.</p>\n\n<pre><code> ![io.js supported](https://img.shields.io/badge/io.js-supported-green.svg?style=flat)\n</code></pre>\n\n<p>This will render: <img src=\"https://img.shields.io/badge/io.js-supported-green.svg?style=flat\" alt=\"io.js supported\" style=\"width: 101px\"></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-02-08T12:05:12.000Z","created_by":1,"updated_at":"2015-02-09T05:33:25.000Z","updated_by":1,"published_at":"2015-02-08T12:32:25.000Z","published_by":1},{"id":52,"uuid":"214208ad-b593-4b50-8bca-79c1210e55c9","title":"You've been upgraded to the latest version of Ghost","slug":"ghost-0-7","markdown":"You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!\n\n## Woah, why does everything look different?\n\nAfter two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.\n\n![New Design](https://ghost.org/images/zelda.png)\n\nThe main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!\n\n## Lost and found: Your old posts\n\nFrom talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!\n\n![Search](https://ghost.org/images/search.gif)\n\nQuestions? Comments? Send us a tweet [@TryGhost](https://twitter.com/tryghost)\n\nOh, and yes – you can safely delete this draft post!","html":"<p>You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!</p>\n\n<h2 id=\"woahwhydoeseverythinglookdifferent\">Woah, why does everything look different?</h2>\n\n<p>After two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.</p>\n\n<p><img src=\"https://ghost.org/images/zelda.png\" alt=\"New Design\" /></p>\n\n<p>The main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!</p>\n\n<h2 id=\"lostandfoundyouroldposts\">Lost and found: Your old posts</h2>\n\n<p>From talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!</p>\n\n<p><img src=\"https://ghost.org/images/search.gif\" alt=\"Search\" /></p>\n\n<p>Questions? Comments? Send us a tweet <a href=\"https://twitter.com/tryghost\">@TryGhost</a></p>\n\n<p>Oh, and yes – you can safely delete this draft post!</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-09-03T16:07:25.000Z","created_by":1,"updated_at":"2015-09-03T16:07:25.000Z","updated_by":1,"published_at":"2015-09-03T16:07:25.000Z","published_by":null}],"posts_tags":[{"id":105,"post_id":44,"tag_id":5,"sort_order":0},{"id":180,"post_id":45,"tag_id":6,"sort_order":3},{"id":181,"post_id":45,"tag_id":7,"sort_order":2},{"id":182,"post_id":45,"tag_id":8,"sort_order":1},{"id":183,"post_id":45,"tag_id":9,"sort_order":0},{"id":226,"post_id":3,"tag_id":10,"sort_order":2},{"id":227,"post_id":3,"tag_id":13,"sort_order":1},{"id":228,"post_id":3,"tag_id":14,"sort_order":0},{"id":256,"post_id":1,"tag_id":2,"sort_order":2},{"id":257,"post_id":1,"tag_id":3,"sort_order":1},{"id":258,"post_id":1,"tag_id":4,"sort_order":0},{"id":271,"post_id":50,"tag_id":10,"sort_order":2},{"id":272,"post_id":50,"tag_id":11,"sort_order":1},{"id":273,"post_id":50,"tag_id":12,"sort_order":0},{"id":277,"post_id":49,"tag_id":2,"sort_order":1},{"id":278,"post_id":49,"tag_id":3,"sort_order":0},{"id":279,"post_id":49,"tag_id":4,"sort_order":2}],"roles":[{"id":1,"uuid":"62383fa0-8aa3-4de8-8fa8-709d35e134a1","name":"Administrator","description":"Administrators","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":2,"uuid":"3c041e21-3c6b-44e5-906b-afa53f8d46e8","name":"Editor","description":"Editors","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":3,"uuid":"51588edd-51e5-464e-92e8-9fc84dcb7b2d","name":"Author","description":"Authors","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":4,"uuid":"8bd54ba8-a007-4d2b-bcf3-f308f9315afd","name":"Owner","description":"Blog Owner","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"settings":[{"id":1,"uuid":"b1c04899-1fda-4ffc-910f-bb38a5caf8f2","key":"databaseVersion","value":"004","type":"core","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":2,"uuid":"77bcc1bc-3c1f-4360-833e-ffed321fc47d","key":"dbHash","value":"d3b57ed2-6a61-497c-801e-414a0a312e9f","type":"core","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":3,"uuid":"963dbb2f-6b4a-4e34-bf6b-ac6fdaa7c455","key":"nextUpdateCheck","value":null,"type":"core","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":4,"uuid":"248b998c-4d48-4884-a2b2-75f702a20757","key":"displayUpdateNotification","value":null,"type":"core","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":5,"uuid":"a10774f3-bf33-4de8-a4b8-f888a1df094a","key":"title","value":"Sascha Depold ∴ Blog","type":"blog","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":6,"uuid":"9708c62a-678f-4196-88ba-527007814f1e","key":"description","value":"Thoughts, stories and ideas.","type":"blog","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":7,"uuid":"1488ee6a-f948-460d-b10c-069907213341","key":"email","value":"sascha@depold.com","type":"blog","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":8,"uuid":"87a6781f-3573-48b2-8d0a-fffb72e6d504","key":"logo","value":"/content/images/2014/Aug/logo.png","type":"blog","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":9,"uuid":"f18f5607-b1a0-4d65-acc9-0e97f2ef98b2","key":"cover","value":"","type":"blog","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":10,"uuid":"2a9e8897-dcc9-49a7-8386-1a4c496f9ae8","key":"defaultLang","value":"en_US","type":"blog","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":11,"uuid":"d74f8e21-2751-44b9-bdd2-ea98fbbb361c","key":"postsPerPage","value":"5","type":"blog","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":12,"uuid":"24a43507-acc9-4802-bd3a-685299dbee88","key":"forceI18n","value":"true","type":"blog","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":13,"uuid":"7666c2d9-65e8-4cb6-9dc5-c4e02d299cd8","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":14,"uuid":"27606f94-bd23-4bcd-8096-854333280197","key":"activeTheme","value":"casper","type":"theme","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-20T06:33:52.000Z","updated_by":1},{"id":15,"uuid":"9158c406-05cb-4e4b-b927-3121d74582df","key":"activeApps","value":"[]","type":"app","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":16,"uuid":"339ce62a-57a1-4c7d-8c31-217736406a5c","key":"installedApps","value":"[]","type":"app","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2015-11-03T19:20:50.000Z","updated_by":1},{"id":17,"uuid":"6c175924-69c9-42bc-bba8-c6261e744d60","key":"ghost_head","value":"","type":"blog","created_at":"2014-12-05T17:11:55.000Z","created_by":1,"updated_at":"2014-12-05T17:11:55.000Z","updated_by":1},{"id":18,"uuid":"d428c406-c525-4518-aae7-065bb2896bb5","key":"ghost_foot","value":"<!-- You can safely delete this line if your theme does not require jQuery -->\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>\n\n","type":"blog","created_at":"2014-12-05T17:11:55.000Z","created_by":1,"updated_at":"2015-09-03T16:07:25.000Z","updated_by":1},{"id":19,"uuid":"80defdb6-37c7-4c6d-83f6-6a9941b2dba8","key":"labs","value":"{}","type":"blog","created_at":"2015-01-13T00:15:09.000Z","created_by":1,"updated_at":"2015-01-13T00:15:09.000Z","updated_by":1},{"id":20,"uuid":"12457c2b-56e0-46e5-bc4a-c41a28b1c978","key":"navigation","value":"[{\"label\":\"Home\", \"url\":\"/\"}]","type":"blog","created_at":"2015-02-28T23:23:17.000Z","created_by":1,"updated_at":"2015-02-28T23:23:17.000Z","updated_by":1},{"id":21,"uuid":"9885c21e-60d4-4eaa-889e-f2c1607588e6","key":"isPrivate","value":"false","type":"private","created_at":"2015-05-14T18:43:26.000Z","created_by":1,"updated_at":"2015-09-03T16:07:25.000Z","updated_by":1},{"id":22,"uuid":"cd3ddaf8-65cf-48e7-be0b-f97892276bb0","key":"password","value":"","type":"private","created_at":"2015-05-14T18:43:26.000Z","created_by":1,"updated_at":"2015-09-03T16:07:25.000Z","updated_by":1}],"tags":[{"id":1,"uuid":"3c67ee05-d67e-4bd9-972b-a33f4c7ba1d8","name":"Getting Started","slug":"getting-started","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2014-08-19T17:45:03.000Z","updated_by":1},{"id":2,"uuid":"9d1ecb67-b3b8-41f4-8109-f0f54a2bf7ff","name":"content management","slug":"content-management","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-08-19T18:13:01.000Z","created_by":1,"updated_at":"2014-08-19T18:13:01.000Z","updated_by":1},{"id":3,"uuid":"3e337600-3d1a-4f37-bb5a-500061faa660","name":"ruby","slug":"ruby","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-08-19T18:13:01.000Z","created_by":1,"updated_at":"2014-08-19T18:13:01.000Z","updated_by":1},{"id":4,"uuid":"f52dc6f8-b674-4fb4-9c44-02241e8ad58a","name":"service","slug":"service","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-08-19T18:13:01.000Z","created_by":1,"updated_at":"2014-08-19T18:13:01.000Z","updated_by":1},{"id":5,"uuid":"b53beae2-f488-44c3-8755-7e88bc2c775d","name":"Heroku","slug":"heroku","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-08-21T19:01:36.000Z","created_by":1,"updated_at":"2014-08-21T19:01:36.000Z","updated_by":1},{"id":6,"uuid":"b873ba54-d848-4a73-b676-dc5ddb29a79c","name":"node.js","slug":"node-js","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-09-05T07:36:41.000Z","created_by":1,"updated_at":"2014-09-05T07:36:41.000Z","updated_by":1},{"id":7,"uuid":"ec805fc5-65db-4dd1-9915-32acd267ad67","name":"task runner","slug":"task-runner","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-09-05T07:36:41.000Z","created_by":1,"updated_at":"2014-09-05T07:36:41.000Z","updated_by":1},{"id":8,"uuid":"7b268777-ddef-4512-9468-77ec883d5596","name":"gulp","slug":"gulp","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-09-05T07:36:41.000Z","created_by":1,"updated_at":"2014-09-05T07:36:41.000Z","updated_by":1},{"id":9,"uuid":"336ccf0b-e3de-42ef-9cfc-a8eadad6b5fd","name":"make","slug":"make","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-09-05T07:36:41.000Z","created_by":1,"updated_at":"2014-09-05T07:36:41.000Z","updated_by":1},{"id":10,"uuid":"18e8b9fc-10f0-4033-a424-63ca6fd119f5","name":"games","slug":"games","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-09-20T20:15:56.000Z","created_by":1,"updated_at":"2014-09-20T20:15:56.000Z","updated_by":1},{"id":11,"uuid":"fb2113fb-9653-4fcb-abed-166d1e0240ae","name":"early access","slug":"early-access","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-09-20T20:15:56.000Z","created_by":1,"updated_at":"2014-09-20T20:15:56.000Z","updated_by":1},{"id":12,"uuid":"2529f01d-02fd-4fdf-835d-002931fa134c","name":"kickstarter","slug":"kickstarter","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-09-20T20:15:56.000Z","created_by":1,"updated_at":"2014-09-20T20:15:56.000Z","updated_by":1},{"id":13,"uuid":"911c77b2-7efe-4af1-8f57-05017ff91851","name":"wii u","slug":"wii-u","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-09-24T05:35:46.000Z","created_by":1,"updated_at":"2014-09-24T05:35:46.000Z","updated_by":1},{"id":14,"uuid":"c843c2c7-f9be-4456-b9bb-b4f0b2f466cf","name":"consoles","slug":"consoles","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-09-24T05:35:46.000Z","created_by":1,"updated_at":"2014-09-24T05:35:46.000Z","updated_by":1}],"users":[{"id":1,"uuid":"4506e208-1859-478e-814f-a0cabffb92ab","name":"Sascha Depold","slug":"sascha-depold","password":"$2a$10$mTHCaZMtob5symP6QlzyNeEnWs.GTgeJP3eL6NJV9JT9dmLI7ITJW","email":"sascha@depold.com","image":"//www.gravatar.com/avatar/f30479a06db175157387334e03766420?d=404&s=250","cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":"2015-11-03T19:22:33.000Z","created_at":"2014-08-19T17:45:03.000Z","created_by":1,"updated_at":"2015-11-03T19:22:33.000Z","updated_by":1,"tour":null}]}}]}